{"selected_lines": [46, 44, 50, 39, 41, 42, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 41, 48, 51, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.5061550140380859, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 49, 50, 39, 42, 47, 41, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='r')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.026680946350097656, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 49, 46, 41, 51, 50, 48, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.17085695266723633, "tests_passed": true, "error": null}}
{"selected_lines": [41, 46, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0380861759185791, "tests_passed": true, "error": null}}
{"selected_lines": [50, 42, 47, 44, 46, 41, 39, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03228187561035156, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 39, 42, 51, 47, 49, 44, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='r')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.024380922317504883, "tests_passed": true, "error": null}}
{"selected_lines": [50, 41, 48, 39, 51, 42, 47, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 42, 46, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='b')\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.039919137954711914, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.17085695266723633, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 51, 44, 50, 49, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.015923023223876953, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39, 42, 41, 47, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.02520298957824707, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 48, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.036956071853637695, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='r')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0415499210357666, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 48, 42, 47, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03611397743225098, "tests_passed": true, "error": null}}
{"selected_lines": [50, 42, 49, 39, 48, 51, 46, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.025773048400878906, "tests_passed": true, "error": null}}
{"selected_lines": [39, 49, 46, 44, 50, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.014482975006103516, "tests_passed": true, "error": null}}
{"selected_lines": [50, 39, 49, 51, 44, 48, 41, 46, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.025449275970458984, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 39, 46, 50, 49, 47, 41, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='r', marker='o')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.014032840728759766, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 42, 49, 48, 41, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='r')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.049784183502197266, "tests_passed": true, "error": null}}
{"selected_lines": [39, 48, 49, 46, 51, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.019767045974731445, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 39, 41, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='k')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.014983892440795898, "tests_passed": true, "error": null}}
{"selected_lines": [41, 50, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03793501853942871, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18910694122314453, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 51, 50, 42, 47, 39, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='black')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='r', marker='o')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.026228904724121094, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 42, 50, 49, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='rainbow', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.039253950119018555, "tests_passed": true, "error": null}}
{"selected_lines": [41, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04184699058532715, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.023023128509521484, "tests_passed": true, "error": null}}
{"selected_lines": [51, 41, 44, 50, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='b')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03955984115600586, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 39, 42, 47, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.028409957885742188, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 46, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.027385950088500977, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 48, 39, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.024665117263793945, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 41, 39, 51, 46, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03471207618713379, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 49, 44, 41, 42, 48, 39, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.035730838775634766, "tests_passed": true, "error": null}}
{"selected_lines": [51, 46, 42, 50, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.027931690216064453, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='orange')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.040041208267211914, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39, 49, 47, 51, 44, 48, 42, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.021902799606323242, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.10494184494018555, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 46, 39, 41, 50, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03559684753417969, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 41, 47, 48, 44, 39, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.01826786994934082, "tests_passed": true, "error": null}}
{"selected_lines": [50, 39, 47, 48, 44, 46, 41, 51, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.030125141143798828, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 48, 39, 51, 46, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 44, 50, 47, 42, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03867912292480469, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 49, 46, 44, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.025436878204345703, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 44, 41, 39, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='r', marker='o')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0269167423248291, "tests_passed": true, "error": null}}
{"selected_lines": [51, 41, 39, 42, 47, 48, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0274660587310791, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 39, 51, 50, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.023447036743164062, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 51, 41, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04129385948181152, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 44, 51, 41, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.024198055267333984, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 39, 51, 50, 49, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.016141176223754883, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 46, 39, 42, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04076814651489258, "tests_passed": true, "error": null}}
{"selected_lines": [48, 41, 39, 44, 46, 42, 51, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 47, 51, 44, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 42, 46, 41, 49, 47, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.040422916412353516, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 46, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03760814666748047, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 44, 51, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04076099395751953, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 50, 51, 48, 39, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0265810489654541, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 51, 46, 49, 50, 47, 39, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.3)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 48, 44, 42, 51, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.show()\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.050421953201293945, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 51, 44, 47, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='black')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.026179075241088867, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 44, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04042696952819824, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 49, 41, 46, 39, 47, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0265810489654541, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 47, 49, 44, 42, 48, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.027157068252563477, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 50, 51, 39, 49, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='b')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.028573989868164062, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1975538730621338, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 46, 39, 44, 51, 47, 49, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.026803970336914062, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46, 48, 50, 49, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03049015998840332, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03000187873840332, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09354186058044434, "tests_passed": true, "error": null}}
{"selected_lines": [39, 51, 44, 41, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.04114103317260742, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 48, 50, 46, 39, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.028284788131713867, "tests_passed": true, "error": null}}
{"selected_lines": [41, 50, 39, 42, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04072403907775879, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 50, 47, 49, 39, 41, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.029081106185913086, "tests_passed": true, "error": null}}
{"selected_lines": [41, 51, 46, 39, 49, 42, 44, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='orange')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.019390106201171875, "tests_passed": true, "error": null}}
{"selected_lines": [48, 41, 51, 49, 47, 50, 42, 39, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.01656794548034668, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 51, 49, 50, 48, 44, 39, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.025250911712646484, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 42, 46, 44, 49, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.02908802032470703, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.030883073806762695, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18085885047912598, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": false, "time": 0.00030112266540527344, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [42, 41, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05488109588623047, "tests_passed": true, "error": null}}
{"selected_lines": [50, 44, 47, 49, 48, 46, 41, 51, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.show()\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 44, 48, 50, 47, 46, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05163693428039551, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04081892967224121, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 44, 51, 42, 41, 46, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04368996620178223, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 49, 42, 44, 39, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='rainbow', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.01763772964477539, "tests_passed": true, "error": null}}
{"selected_lines": [48, 41, 42, 51, 46, 47, 39, 44, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.031172752380371094, "tests_passed": true, "error": null}}
{"selected_lines": [50, 41, 51, 39, 47, 48, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0428159236907959, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.041932106018066406, "tests_passed": true, "error": null}}
{"selected_lines": [50, 39, 44, 47, 51, 42, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.01729416847229004, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04096627235412598, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19712591171264648, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 47, 39, 42, 46, 51, 41, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='r', marker='o')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.038665056228637695, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='r')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04350590705871582, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 48, 51, 44, 42, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.029354095458984375, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 50, 46, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='r', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04548287391662598, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 49, 50, 47, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04110908508300781, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.041223764419555664, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 42, 51, 50, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04373979568481445, "tests_passed": true, "error": null}}
{"selected_lines": [41, 48, 46, 47, 42, 50, 51, 39, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.021167993545532227, "tests_passed": true, "error": null}}
{"selected_lines": [42, 51, 44, 39, 48, 41, 46, 50, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='r')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.032742977142333984, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 44, 39, 51, 50, 48, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.031855106353759766, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 46, 50, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0397641658782959, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 48, 47, 51, 46, 49, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='r', marker='o')\n    plt.show()\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.029342174530029297, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 46, 50, 51, 48, 41, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.016802072525024414, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 51, 44, 41, 46, 39, 48, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.039261817932128906, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 39, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.016630172729492188, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 39, 44, 47, 49, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='r', marker='o')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1968839168548584, "tests_passed": true, "error": null}}
{"selected_lines": [41, 48, 39, 44, 46, 51, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='r', marker='o')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03016209602355957, "tests_passed": true, "error": null}}
{"selected_lines": [42, 50, 49, 48, 51, 44, 41, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='orange')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.042439937591552734, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 50, 48, 47, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 41, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='b')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04514026641845703, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 47, 42, 48, 50, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0445399284362793, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04594826698303223, "tests_passed": true, "error": null}}
{"selected_lines": [42, 47, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.017127037048339844, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.01961493492126465, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 51, 42, 47, 41, 46, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03174185752868652, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 46, 50, 48, 42, 47, 39, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.01699995994567871, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 44, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04042696952819824, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04439878463745117, "tests_passed": true, "error": null}}
{"selected_lines": [50, 44, 46, 48, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([x[0] for x in kmeans.cluster_centers_], [x[1] for x in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 42, 47, 50, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.042983055114746094, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 39, 48, 41, 46, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.019912004470825195, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 41, 44, 42, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03436589241027832, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.043977975845336914, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 46, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04460883140563965, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.02816295623779297, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 51, 42, 46, 47, 50, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.020179033279418945, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 42, 39, 41, 47, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.04301786422729492, "tests_passed": true, "error": null}}
{"selected_lines": [47, 41, 49, 50, 42, 51, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05318403244018555, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 46, 49, 44, 47, 39, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='r')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03281402587890625, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 44, 41, 49, 42, 51, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.055162906646728516, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19310998916625977, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 51, 39, 47, 41, 46, 50, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.01751995086669922, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 47, 41, 51, 42, 46, 49, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.054930925369262695, "tests_passed": true, "error": null}}
{"selected_lines": [46, 44, 47, 49, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04562711715698242, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='r')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1795191764831543, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 51, 47, 42, 49, 44, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03198981285095215, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 41, 50, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04363512992858887, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06533002853393555, "tests_passed": true, "error": null}}
{"selected_lines": [39, 51, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.03519105911254883, "tests_passed": true, "error": null}}
{"selected_lines": [47, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.044651031494140625, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.175278902053833, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 51, 41, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.050878047943115234, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39, 51, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.03118896484375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 48, 39, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0440828800201416, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 49, 39, 44, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03579902648925781, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 41, 50, 46, 39, 42, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='r')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.032208919525146484, "tests_passed": true, "error": null}}
{"selected_lines": [50, 44, 51, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.04546093940734863, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 44, 51, 39, 48, 42, 47, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='b')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.020787954330444336, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39, 41, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('x')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0370938777923584, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='r', marker='o')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1968839168548584, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 46, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 39, 41, 47, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='black')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.03473806381225586, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.020353078842163086, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 51, 44, 47, 49, 48, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.020270109176635742, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [41, 51, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05855607986450195, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.21684932708740234, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 44, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03585314750671387, "tests_passed": true, "error": null}}
{"selected_lines": [41, 46, 39, 48, 49, 50, 44, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0448908805847168, "tests_passed": true, "error": null}}
{"selected_lines": [44, 50, 46, 49, 41, 51, 39, 42, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03546595573425293, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09354186058044434, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 44, 47, 39, 42, 46, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='black')\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.04511904716491699, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 39, 51, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04524636268615723, "tests_passed": true, "error": null}}
{"selected_lines": [51, 39, 42, 50, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.033789873123168945, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 41, 48, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.04502415657043457, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 49, 46, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0346989631652832, "tests_passed": true, "error": null}}
{"selected_lines": [41, 46, 49, 48, 44, 47, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='b')\n    # Plot the cluster centroids\n    plt.scatter([x[0] for x in kmeans.cluster_centers_], [x[1] for x in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 50, 39, 49, 48, 41, 44, 46, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 44, 46, 47, 49, 42, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter([x[0] for x in kmeans.cluster_centers_], [x[1] for x in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.13384175300598145, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 49, 46, 44, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.026266098022460938, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 42, 44, 51, 39, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 50, 44, 41, 49, 39, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.039099931716918945, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46, 48, 50, 49, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03049015998840332, "tests_passed": true, "error": null}}
{"selected_lines": [51, 39, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.032759904861450195, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 42, 49, 39, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter([kmeans.cluster_centers_[i][0] for i in range(CLUSTERS)],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05923724174499512, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 51, 42, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.021718740463256836, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 48, 42, 46, 49, 41, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 51, 49, 48, 50, 41, 47, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.033972978591918945, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 42, 47, 50, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.042983055114746094, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 50, 39, 47, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03486800193786621, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 51, 44, 39, 41, 50, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.021203994750976562, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 39, 41, 46, 50, 44, 49, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.046437740325927734, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.175278902053833, "tests_passed": true, "error": null}}
{"selected_lines": [49, 41, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05887293815612793, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39, 41, 47, 44, 48, 51, 42, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='orange')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.018042802810668945, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04593205451965332, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 50, 44, 51, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='black')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05033397674560547, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 50, 41, 44, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03620004653930664, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 41, 48, 47, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03697919845581055, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [50, 41, 48, 46, 51, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.xlabel('x')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.047306060791015625, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 50, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.035025835037231445, "tests_passed": true, "error": null}}
{"selected_lines": [50, 44, 46, 49, 48, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.045523881912231445, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 47, 50, 41, 39, 51, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05654001235961914, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 48, 47, 50, 41, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04765629768371582, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 46, 50, 41, 49, 39, 42, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='k')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0359501838684082, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 46, 50, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18383288383483887, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 44, 47, 48, 50, 49, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.023442983627319336, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 39, 47, 44, 50, 41, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.3)\n    # Plot the cluster centroids\n    plt.scatter([x[0] for x in kmeans.cluster_centers_], [x[1] for x in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 48, 51, 41, 49, 44, 50, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.035028934478759766, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 48, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04725503921508789, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 51, 49, 50, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04630303382873535, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 44, 51, 49, 48, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.036965131759643555, "tests_passed": true, "error": null}}
{"selected_lines": [49, 42, 51, 47, 46, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.04786205291748047, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 46, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04813098907470703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 46, 44, 51, 41, 49, 50, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.029430150985717773, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 46, 41, 47, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04951000213623047, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([x[0] for x in kmeans.cluster_centers_], [x[1] for x in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 51, 50, 48, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.035059213638305664, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 51, 48, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0634000301361084, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.30526089668273926, "tests_passed": true, "error": null}}
{"selected_lines": [41, 48, 47, 50, 51, 39, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x')\n    plt.show()\n    plt.xlabel('x')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.024465322494506836, "tests_passed": true, "error": null}}
{"selected_lines": [41, 50, 46, 44, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 44, 42, 51, 49, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.020507335662841797, "tests_passed": true, "error": null}}
{"selected_lines": [41, 47, 48, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('x')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.38199400901794434, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 42, 48, 41, 46, 50, 44, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.show()\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05288505554199219, "tests_passed": true, "error": null}}
{"selected_lines": [50, 39, 42, 41, 47, 48, 51, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0417788028717041, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1897108554840088, "tests_passed": true, "error": null}}
{"selected_lines": [39, 49, 44, 46, 42, 41, 50, 48, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03750205039978027, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.3)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1932849884033203, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 47, 46, 41, 51, 48, 50, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.03812670707702637, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18910694122314453, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 50, 47, 48, 42, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='rainbow', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.02940678596496582, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19602298736572266, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 50, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.028142690658569336, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 47, 50, 39, 42, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.035902976989746094, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 50, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05244612693786621, "tests_passed": true, "error": null}}
{"selected_lines": [47, 41, 50, 49, 48, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05198812484741211, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.3500511646270752, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 50, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.035025835037231445, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04594826698303223, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 47, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.050655364990234375, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 46, 49, 48, 42, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03636026382446289, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 50, 46, 42, 51, 44, 39, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.04021906852722168, "tests_passed": true, "error": null}}
{"selected_lines": [47, 51, 49, 41, 46, 39, 48, 44, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='black')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.028339862823486328, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.21684932708740234, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.20258092880249023, "tests_passed": true, "error": null}}
{"selected_lines": [41, 48, 44, 39, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03872203826904297, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 46, 41, 48, 51, 49, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(RANGE, SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 41, 46, 50, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05432891845703125, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 39, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03930497169494629, "tests_passed": true, "error": null}}
{"selected_lines": [51, 41, 47, 44, 50, 49, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06325292587280273, "tests_passed": true, "error": null}}
{"selected_lines": [51, 44, 48, 46, 47, 41, 42, 49, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 42, 46, 51, 48, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([kmeans.cluster_centers_[i][0] for i in range(CLUSTERS)],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 51, 46, 48, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='black')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05019211769104004, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46, 41, 50, 47, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(RANGE, SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05051898956298828, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 42, 44, 41, 47, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04056906700134277, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18910694122314453, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 50, 51, 42, 44, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.023437976837158203, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 49, 41, 47, 51, 48, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.04711580276489258, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.04191899299621582, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 50, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='b')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0531010627746582, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 44, 51, 50, 48, 49, 41, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 50, 47, 44, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.05478787422180176, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05084800720214844, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1930370330810547, "tests_passed": true, "error": null}}
{"selected_lines": [49, 41, 44, 42, 48, 39, 47, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.3)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05268597602844238, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06508111953735352, "tests_passed": true, "error": null}}
{"selected_lines": [41, 48, 46, 49, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.051850080490112305, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.15315008163452148, "tests_passed": true, "error": null}}
{"selected_lines": [50, 39, 42, 41, 47, 51, 48, 44, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.05129218101501465, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 41, 49, 48, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='b')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.06714177131652832, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 50, 46, 44, 47, 49, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.036199331283569336, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 46, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.039778947830200195, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 51, 41, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.05323314666748047, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 41, 46, 39, 48, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05573010444641113, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.05280613899230957, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 42, 51, 50, 44, 39, 49, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='b')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03879284858703613, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 44, 50, 47, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.049520254135131836, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 42, 46, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05113506317138672, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03970789909362793, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 47, 48, 51, 46, 39, 41, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 48, 42, 47, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03611397743225098, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 46, 41, 39, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03233504295349121, "tests_passed": true, "error": null}}
{"selected_lines": [44, 50, 42, 41, 49, 39, 48, 46, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04112410545349121, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 49, 48, 46, 51, 42, 41, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='black')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05182695388793945, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.051470041275024414, "tests_passed": true, "error": null}}
{"selected_lines": [41, 48, 47, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05144691467285156, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05224776268005371, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('x')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0507509708404541, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 41, 50, 48, 49, 51, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05172991752624512, "tests_passed": true, "error": null}}
{"selected_lines": [42, 50, 48, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='b')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05447864532470703, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 46, 50, 41, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.039005279541015625, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 50, 48, 46, 49, 42, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='r', marker='o')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.055747032165527344, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1827678680419922, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19602298736572266, "tests_passed": true, "error": null}}
{"selected_lines": [49, 41, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05887293815612793, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 42, 44, 41, 49, 50, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.031233787536621094, "tests_passed": true, "error": null}}
{"selected_lines": [47, 41, 42, 48, 46, 50, 49, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.031661033630371094, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 41, 44, 47, 49, 48, 39, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03361105918884277, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 46, 41, 42, 48, 51, 50, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.05085396766662598, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 51, 47, 41, 49, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.03129911422729492, "tests_passed": true, "error": null}}
{"selected_lines": [51, 39, 48, 42, 50, 49, 47, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04363393783569336, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 41, 46, 47, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06919193267822266, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 39, 48, 51, 41, 50, 44, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 42, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05185890197753906, "tests_passed": true, "error": null}}
{"selected_lines": [48, 41, 39, 49, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.02508997917175293, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 50, 44, 49, 39, 47, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.041243791580200195, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 49, 47, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05259394645690918, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 49, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0542600154876709, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 47, 49, 51, 44, 42, 39, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 48, 51, 42, 47, 46, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='b')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.040596961975097656, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('x')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.053479909896850586, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.13384175300598145, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 48, 47, 42, 41, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='orange')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.06878423690795898, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 39, 50, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.055126190185546875, "tests_passed": true, "error": null}}
{"selected_lines": [41, 50, 44, 47, 46, 51, 49, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter([kmeans.cluster_centers_[i][0] for i in range(CLUSTERS)],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 42, 47, 49, 51, 44, 41, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter([kmeans.cluster_centers_[i][0] for i in range(CLUSTERS)],\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1975538730621338, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 47, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.024132251739501953, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.056693077087402344, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 44, 48, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.025417804718017578, "tests_passed": true, "error": null}}
{"selected_lines": [49, 41, 47, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.024772167205810547, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 46, 48, 51, 49, 39, 50, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.040411949157714844, "tests_passed": true, "error": null}}
{"selected_lines": [49, 41, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05887293815612793, "tests_passed": true, "error": null}}
{"selected_lines": [41, 47, 50, 51, 44, 49, 39, 46, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='rainbow', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.026662111282348633, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 50, 51, 47, 42, 46, 44, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.024888038635253906, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.012161016464233398, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}}
{"selected_lines": [47, 39, 41, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.027542829513549805, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 48, 49, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.30526089668273926, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03307008743286133, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 39, 49, 46, 48, 41, 44, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='black')\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05417323112487793, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 51, 39, 49, 41, 42, 50, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.044496774673461914, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 49, 39, 46, 42, 44, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('x')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.043682098388671875, "tests_passed": true, "error": null}}
{"selected_lines": [39, 48, 50, 51, 42, 46, 41, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.042063236236572266, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.02689504623413086, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": false, "time": 0.00030112266540527344, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 50, 48, 49, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04565715789794922, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 49, 39, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='black')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.042283058166503906, "tests_passed": true, "error": null}}
{"selected_lines": [50, 44, 48, 41, 42, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.05584120750427246, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 39, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(RANGE, SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 50, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.058596134185791016, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 51, 48, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.05939507484436035, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 49, 41, 42, 39, 47, 51, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.046508073806762695, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.175278902053833, "tests_passed": true, "error": null}}
{"selected_lines": [49, 41, 51, 47, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04441714286804199, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 39, 51, 50, 47, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='rainbow', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05500483512878418, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05705595016479492, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 46, 41, 39, 49, 50, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.025721073150634766, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 48, 47, 46, 44, 42, 39, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03836321830749512, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 39, 51, 44, 47, 50, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.027592182159423828, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [47, 42, 51, 50, 44, 48, 41, 49, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='b')\n    plt.show()\n    plt.xlabel('x')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05504107475280762, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46, 51, 48, 49, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([x[0] for x in kmeans.cluster_centers_], [x[1] for x in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 42, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.029688119888305664, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 51, 41, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04076814651489258, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 46, 47, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05697989463806152, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 42, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='rainbow', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='k')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06111884117126465, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 46, 50, 42, 47, 39, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='k')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.036402225494384766, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 50, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.027354001998901367, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 49, 39, 46, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04448986053466797, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 50, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0408167839050293, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 50, 41, 49, 42, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06939005851745605, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='black')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.042961835861206055, "tests_passed": true, "error": null}}
{"selected_lines": [50, 39, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04554009437561035, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 50, 41, 47, 44, 46, 49, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.027662038803100586, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 51, 44, 42, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05904102325439453, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 46, 39, 50, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='r')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.02850198745727539, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 51, 49, 50, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04630303382873535, "tests_passed": true, "error": null}}
{"selected_lines": [50, 44, 41, 48, 49, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.06245708465576172, "tests_passed": true, "error": null}}
{"selected_lines": [42, 51, 44, 41, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07281780242919922, "tests_passed": true, "error": null}}
{"selected_lines": [47, 41, 51, 48, 42, 46, 39, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0454709529876709, "tests_passed": true, "error": null}}
{"selected_lines": [51, 46, 44, 39, 50, 41, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.05675220489501953, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39, 49, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([kmeans.cluster_centers_[i][0] for i in range(CLUSTERS)],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 50, 41, 46, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03940892219543457, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 39, 51, 42, 48, 41, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04768991470336914, "tests_passed": true, "error": null}}
{"selected_lines": [41, 50, 47, 46, 42, 48, 49, 39, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05788707733154297, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05084800720214844, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 47, 44, 41, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter([kmeans.cluster_centers_[i][0] for i in range(CLUSTERS)],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.20258092880249023, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 42, 51, 47, 39, 50, 41, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.056993722915649414, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 41, 50, 39, 46, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04435610771179199, "tests_passed": true, "error": null}}
{"selected_lines": [42, 47, 51, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.06107902526855469, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 39, 44, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.045668840408325195, "tests_passed": true, "error": null}}
{"selected_lines": [47, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.044651031494140625, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 41, 48, 47, 44, 39, 49, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(RANGE, SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.30526089668273926, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.175278902053833, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.30526089668273926, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 51, 39, 44, 48, 42, 50, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.049408912658691406, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 46, 48, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07254695892333984, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 51, 42, 48, 50, 49, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.057775259017944336, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 47, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05710601806640625, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 42, 41, 46, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.07513689994812012, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 42, 50, 41, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05992388725280762, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46, 48, 51, 42, 44, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='orange')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='r')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.02861618995666504, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 41, 47, 49, 46, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.030950307846069336, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 48, 41, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.039659976959228516, "tests_passed": true, "error": null}}
{"selected_lines": [41, 48, 42, 51, 44, 49, 47, 50, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='orange')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05867409706115723, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 49, 47, 42, 41, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0714571475982666, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 42, 41, 50, 46, 44, 51, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05824470520019531, "tests_passed": true, "error": null}}
{"selected_lines": [51, 42, 39, 41, 49, 50, 47, 46, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03653311729431152, "tests_passed": true, "error": null}}
{"selected_lines": [42, 50, 39, 44, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='black')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05052614212036133, "tests_passed": true, "error": null}}
{"selected_lines": [47, 42, 46, 39, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 41, 51, 44, 42, 39, 48, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.027584075927734375, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 42, 49, 41, 46, 47, 39, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='b')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05050086975097656, "tests_passed": true, "error": null}}
{"selected_lines": [47, 41, 39, 51, 42, 50, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0437169075012207, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 44, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.046478986740112305, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04076814651489258, "tests_passed": true, "error": null}}
{"selected_lines": [42, 47, 39, 49, 51, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 50, 44, 49, 39, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06429219245910645, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04655790328979492, "tests_passed": true, "error": null}}
{"selected_lines": [41, 46, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06204080581665039, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 42, 46, 44, 51, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.062120914459228516, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 51, 48, 41, 39, 42, 46, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([kmeans.cluster_centers_[i][0] for i in range(CLUSTERS)],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 41, 42, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07823371887207031, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 44, 41, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='r', marker='o')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07440781593322754, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18383288383483887, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 49, 41, 51, 46, 42, 44, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0651090145111084, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 50, 46, 51, 39, 48, 47, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03092026710510254, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04903697967529297, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39, 42, 44, 47, 46, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.045610904693603516, "tests_passed": true, "error": null}}
{"selected_lines": [51, 39, 46, 48, 49, 42, 41, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.027469158172607422, "tests_passed": true, "error": null}}
{"selected_lines": [51, 41, 47, 44, 42, 49, 46, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.030884981155395508, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 51, 47, 46, 41, 42, 50, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04076814651489258, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 48, 44, 42, 39, 46, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 48, 49, 46, 50, 41, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='b')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05940985679626465, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19602298736572266, "tests_passed": true, "error": null}}
{"selected_lines": [51, 42, 48, 41, 46, 47, 39, 50, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.046729087829589844, "tests_passed": true, "error": null}}
{"selected_lines": [41, 50, 47, 51, 49, 44, 39, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='black')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.02942800521850586, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 49, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0542600154876709, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 50, 42, 41, 44, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='rainbow', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.048628807067871094, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 42, 41, 46, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04693007469177246, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.30526089668273926, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19137787818908691, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03131270408630371, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.059361934661865234, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 47, 46, 39, 44, 50, 49, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05070781707763672, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 51, 46, 39, 47, 49, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter([x[0] for x in kmeans.cluster_centers_], [x[1] for x in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03970789909362793, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 44, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07427620887756348, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04076814651489258, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 44, 39, 49, 50, 47, 42, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 39, 50, 49, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05006909370422363, "tests_passed": true, "error": null}}
{"selected_lines": [49, 42, 47, 39, 50, 51, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04896903038024902, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 46, 44, 42, 51, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='black')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0621190071105957, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 44, 46, 48, 42, 41, 39, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06444525718688965, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06428122520446777, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 46, 48, 49, 41, 50, 42, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.059031009674072266, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.17536687850952148, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 42, 47, 44, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03455018997192383, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06717395782470703, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18610906600952148, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 46, 39, 41, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06138205528259277, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 49, 50, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='k')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.051470279693603516, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 42, 49, 41, 47, 51, 46, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.3)\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='k')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0650482177734375, "tests_passed": true, "error": null}}
{"selected_lines": [51, 41, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07491779327392578, "tests_passed": true, "error": null}}
{"selected_lines": [41, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05923724174499512, "tests_passed": true, "error": null}}
{"selected_lines": [42, 51, 49, 50, 39, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04096627235412598, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 42, 46, 50, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.030752182006835938, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": false, "time": 0.00030112266540527344, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [46, 44, 42, 49, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='orange')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06272387504577637, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 39, 41, 49, 48, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04909491539001465, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 42, 47, 41, 49, 44, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07898592948913574, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.3)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05125021934509277, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.30526089668273926, "tests_passed": true, "error": null}}
{"selected_lines": [48, 41, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.07503199577331543, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06928086280822754, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 41, 48, 44, 51, 49, 46, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06189107894897461, "tests_passed": true, "error": null}}
{"selected_lines": [44, 50, 42, 49, 39, 48, 41, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='rainbow', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06423187255859375, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 47, 41, 48, 49, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter([x[0] for x in kmeans.cluster_centers_], [x[1] for x in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 46, 50, 44, 51, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.08057999610900879, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 47, 42, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06493306159973145, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 44, 42, 47, 49, 39, 46, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.030494213104248047, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 50, 46, 41, 44, 47, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07273387908935547, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 42, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='b')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('x')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06354618072509766, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39, 50, 46, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03353595733642578, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 42, 49, 46, 44, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='r')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06831622123718262, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 41, 44, 46, 51, 50, 49, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05115175247192383, "tests_passed": true, "error": null}}
{"selected_lines": [42, 50, 39, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04896903038024902, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1742391586303711, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 39, 50, 51, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.05472588539123535, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04096627235412598, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 39, 47, 42, 44, 50, 51, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='r', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.038291215896606445, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 50, 47, 51, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='black')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06554889678955078, "tests_passed": true, "error": null}}
{"selected_lines": [51, 41, 49, 50, 46, 48, 47, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='k')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06354594230651855, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='r')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1795191764831543, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 47, 51, 50, 46, 48, 41, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06899404525756836, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 48, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19310998916625977, "tests_passed": true, "error": null}}
{"selected_lines": [49, 42, 47, 48, 44, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03200411796569824, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.21684932708740234, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 41, 48, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.04502415657043457, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 49, 41, 47, 46, 50, 51, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='rainbow', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.051880836486816406, "tests_passed": true, "error": null}}
{"selected_lines": [41, 49, 44, 47, 50, 39, 46, 48, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.054393768310546875, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 41, 44, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06713604927062988, "tests_passed": true, "error": null}}
{"selected_lines": [50, 41, 44, 46, 49, 42, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.3)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0766749382019043, "tests_passed": true, "error": null}}
{"selected_lines": [42, 51, 44, 46, 50, 48, 39, 41, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.06468796730041504, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 47, 48, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='black')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.06824588775634766, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 46, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(RANGE, SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 51, 47, 46, 44, 48, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='black')\n    plt.show()\n    plt.xlabel('x')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.055504798889160156, "tests_passed": true, "error": null}}
{"selected_lines": [42, 50, 44, 47, 46, 51, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08305597305297852, "tests_passed": true, "error": null}}
{"selected_lines": [44, 50, 41, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06902766227722168, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39, 51, 47, 42, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.055830955505371094, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39, 42, 50, 44, 47, 51, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='orange')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='r')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03151512145996094, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 50, 39, 41, 46, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.034600019454956055, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.035809993743896484, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.175278902053833, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 41, 51, 46, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='r', marker='o')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07343101501464844, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 44, 46, 49, 51, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.07761287689208984, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.21684932708740234, "tests_passed": true, "error": null}}
{"selected_lines": [50, 42, 41, 51, 49, 39, 44, 48, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([kmeans.cluster_centers_[i][0] for i in range(CLUSTERS)],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 47, 41, 51, 46, 48, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05663585662841797, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07024598121643066, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 51, 47, 44, 49, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.057975053787231445, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 39, 51, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.054963111877441406, "tests_passed": true, "error": null}}
{"selected_lines": [42, 51, 49, 44, 48, 47, 41, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([kmeans.cluster_centers_[i][0] for i in range(CLUSTERS)],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04081892967224121, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 49, 42, 51, 50, 47, 48, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05856895446777344, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.175278902053833, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 49, 48, 42, 50, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.039517879486083984, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 39, 41, 51, 50, 46, 42, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.11080193519592285, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 51, 50, 39, 46, 47, 49, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='r', marker='o')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07029008865356445, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 39, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.054840087890625, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 51, 47, 41, 50, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07122468948364258, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07077312469482422, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07080411911010742, "tests_passed": true, "error": null}}
{"selected_lines": [51, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.05846810340881348, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 49, 39, 50, 48, 51, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='r')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03648018836975098, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 46, 49, 48, 47, 44, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06861329078674316, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": false, "time": 0.00030112266540527344, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05866098403930664, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 50, 47, 48, 44, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.053186893463134766, "tests_passed": true, "error": null}}
{"selected_lines": [47, 51, 48, 46, 41, 50, 44, 42, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 41, 51, 49, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07491374015808105, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 41, 42, 44, 50, 46, 51, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.05920100212097168, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 42, 47, 46, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07078790664672852, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 42, 39, 51, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('x')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.05327796936035156, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 51, 46, 42, 44, 41, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='b')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05903267860412598, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 39, 44, 51, 46, 49, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04569888114929199, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 48, 39, 50, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.043792009353637695, "tests_passed": true, "error": null}}
{"selected_lines": [47, 42, 49, 39, 51, 50, 48, 44, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06992197036743164, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 42, 46, 47, 41, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='b')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.1062469482421875, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 51, 47, 39, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0430147647857666, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18383288383483887, "tests_passed": true, "error": null}}
{"selected_lines": [50, 41, 49, 51, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.08129215240478516, "tests_passed": true, "error": null}}
{"selected_lines": [47, 39, 46, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='r')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07283616065979004, "tests_passed": true, "error": null}}
{"selected_lines": [50, 44, 39, 46, 42, 47, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 44, 46, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='orange')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.060127973556518555, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46, 49, 42, 41, 44, 47, 50, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 48, 39, 50, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03422403335571289, "tests_passed": true, "error": null}}
{"selected_lines": [46, 44, 51, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08306884765625, "tests_passed": true, "error": null}}
{"selected_lines": [41, 47, 46, 48, 51, 44, 39, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03843092918395996, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 49, 47, 44, 48, 42, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05807828903198242, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 39, 42, 47, 41, 46, 50, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04096174240112305, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 42, 46, 49, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0717780590057373, "tests_passed": true, "error": null}}
{"selected_lines": [41, 47, 51, 48, 44, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.057398080825805664, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 50, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.086395263671875, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 49, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06975793838500977, "tests_passed": true, "error": null}}
{"selected_lines": [51, 44, 50, 47, 49, 39, 48, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.03789329528808594, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 41, 49, 47, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04620814323425293, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 50, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.028142690658569336, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07325887680053711, "tests_passed": true, "error": null}}
{"selected_lines": [41, 46, 44, 50, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07254195213317871, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 51, 48, 46, 44, 39, 41, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.06131577491760254, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 47, 42, 51, 48, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03603506088256836, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 48, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07528018951416016, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 48, 47, 50, 41, 44, 39, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03561520576477051, "tests_passed": true, "error": null}}
{"selected_lines": [49, 41, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05887293815612793, "tests_passed": true, "error": null}}
{"selected_lines": [41, 50, 47, 42, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07053589820861816, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 50, 49, 44, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08745813369750977, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 49, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03818821907043457, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1897108554840088, "tests_passed": true, "error": null}}
{"selected_lines": [51, 42, 44, 50, 46, 48, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08413910865783691, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 41, 42, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='black')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07280683517456055, "tests_passed": true, "error": null}}
{"selected_lines": [42, 47, 39, 51, 46, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([x[0] for x in kmeans.cluster_centers_], [x[1] for x in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 51, 50, 48, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06381416320800781, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07523703575134277, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 44, 39, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.044068098068237305, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.17986416816711426, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05084800720214844, "tests_passed": true, "error": null}}
{"selected_lines": [39, 51, 41, 44, 47, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(RANGE, SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.175278902053833, "tests_passed": true, "error": null}}
{"selected_lines": [39, 49, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([x[0] for x in kmeans.cluster_centers_], [x[1] for x in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.062168121337890625, "tests_passed": true, "error": null}}
{"selected_lines": [51, 41, 39, 49, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06248307228088379, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 46, 41, 42, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08477282524108887, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 50, 46, 44, 51, 47, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0629432201385498, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 51, 49, 44, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07574319839477539, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 50, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07700490951538086, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 41, 47, 42, 48, 46, 39, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 41, 51, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.07701683044433594, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 41, 44, 48, 51, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05896711349487305, "tests_passed": true, "error": null}}
{"selected_lines": [41, 46, 44, 47, 51, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07411623001098633, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 41, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08884716033935547, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 42, 50, 51, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([x[0] for x in kmeans.cluster_centers_], [x[1] for x in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 41, 51, 50, 46, 42, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.038700103759765625, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='b')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06112790107727051, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 50, 48, 51, 49, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08837199211120605, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 39, 42, 49, 41, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03615379333496094, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 47, 46, 50, 44, 39, 41, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04607582092285156, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 41, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08884716033935547, "tests_passed": true, "error": null}}
{"selected_lines": [42, 47, 51, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='rainbow', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0733499526977539, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 48, 41, 47, 49, 46, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07800483703613281, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 49, 44, 42, 48, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06264209747314453, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 50, 44, 39, 48, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07719612121582031, "tests_passed": true, "error": null}}
{"selected_lines": [41, 50, 39, 42, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04072403907775879, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06571197509765625, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 48, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04163074493408203, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 49, 44, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07772111892700195, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 49, 47, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05259394645690918, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.30526089668273926, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 46, 41, 47, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04951000213623047, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 50, 48, 39, 49, 47, 51, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='b')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07312679290771484, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0708158016204834, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 47, 42, 50, 51, 44, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07845282554626465, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 41, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08884716033935547, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 41, 39, 48, 42, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07728791236877441, "tests_passed": true, "error": null}}
{"selected_lines": [47, 42, 49, 44, 48, 39, 46, 51, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": false, "time": 0.0002720355987548828, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.16652393341064453, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 41, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 41, 47, 50, 51, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.04305100440979004, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 41, 46, 49, 42, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08765697479248047, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 50, 51, 48, 44, 39, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='r', marker='o')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0634617805480957, "tests_passed": true, "error": null}}
{"selected_lines": [42, 50, 48, 39, 41, 47, 44, 49, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.03720808029174805, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 39, 50, 47, 42, 44, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06512713432312012, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 49, 50, 48, 39, 41, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0753169059753418, "tests_passed": true, "error": null}}
{"selected_lines": [41, 48, 47, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05144691467285156, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 44, 50, 48, 51, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07801580429077148, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39, 50, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06351590156555176, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 50, 49, 47, 46, 41, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09155917167663574, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 44, 41, 49, 42, 51, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07950305938720703, "tests_passed": true, "error": null}}
{"selected_lines": [51, 46, 44, 50, 47, 49, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07851409912109375, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 48, 47, 50, 46, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03891181945800781, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 39, 42, 50, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.040144920349121094, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 42, 47, 48, 39, 46, 41, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0843658447265625, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 50, 48, 49, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04565715789794922, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 46, 51, 49, 39, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 51, 46, 44, 48, 42, 47, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 50, 49, 46, 42, 39, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.06582403182983398, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 39, 41, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06286191940307617, "tests_passed": true, "error": null}}
{"selected_lines": [50, 39, 46, 42, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04055309295654297, "tests_passed": true, "error": null}}
{"selected_lines": [47, 39, 46, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='r')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07283616065979004, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 41, 44, 39, 50, 48, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08392596244812012, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 44, 47, 46, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 51, 41, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07981586456298828, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='b')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07908105850219727, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [51, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.07710409164428711, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='r')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07700872421264648, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 50, 42, 44, 46, 49, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter([kmeans.cluster_centers_[i][0] for i in range(CLUSTERS)],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 50, 44, 41, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08023905754089355, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 50, 51, 39, 44, 41, 46, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.06682109832763672, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06717085838317871, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.175278902053833, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 41, 51, 39, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06491804122924805, "tests_passed": true, "error": null}}
{"selected_lines": [46, 44, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08134102821350098, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 46, 50, 41, 49, 44, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='black')\n    plt.show()\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0489199161529541, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 41, 39, 49, 47, 46, 50, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05016183853149414, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04076814651489258, "tests_passed": true, "error": null}}
{"selected_lines": [47, 42, 51, 41, 50, 48, 49, 39, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 46, 41, 42, 51, 44, 39, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.06829214096069336, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 41, 42, 50, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08076596260070801, "tests_passed": true, "error": null}}
{"selected_lines": [51, 44, 47, 50, 49, 42, 39, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04530000686645508, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06968498229980469, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 49, 51, 46, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='orange')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 48, 47, 41, 39, 50, 46, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='r')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06814312934875488, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 42, 44, 46, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06751680374145508, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 47, 48, 51, 44, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06713294982910156, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 49, 42, 51, 41, 47, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07975220680236816, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0821070671081543, "tests_passed": true, "error": null}}
{"selected_lines": [51, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([x[0] for x in kmeans.cluster_centers_], [x[1] for x in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 49, 50, 48, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08042383193969727, "tests_passed": true, "error": null}}
{"selected_lines": [44, 50, 41, 39, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='black')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='b')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05013918876647949, "tests_passed": true, "error": null}}
{"selected_lines": [46, 44, 49, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09222412109375, "tests_passed": true, "error": null}}
{"selected_lines": [51, 41, 48, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0768120288848877, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06608796119689941, "tests_passed": true, "error": null}}
{"selected_lines": [42, 51, 39, 49, 44, 50, 47, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.06948614120483398, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 46, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04460883140563965, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05084800720214844, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.21684932708740234, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1742391586303711, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([x[0] for x in kmeans.cluster_centers_], [x[1] for x in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": false, "time": 0.0003190040588378906, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [47, 51, 50, 39, 42, 41, 48, 44, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.06721019744873047, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 41, 42, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07823371887207031, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 41, 48, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08708000183105469, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [46, 44, 42, 47, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='b')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.10097789764404297, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1824197769165039, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 42, 41, 51, 44, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.3)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.09074902534484863, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 51, 46, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08204913139343262, "tests_passed": true, "error": null}}
{"selected_lines": [41, 49, 42, 44, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0845029354095459, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 46, 49, 47, 50, 48, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='r')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05511188507080078, "tests_passed": true, "error": null}}
{"selected_lines": [46, 44, 41, 42, 47, 39, 51, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 49, 51, 41, 50, 48, 47, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04953408241271973, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 50, 49, 41, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='black')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09609317779541016, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 41, 48, 50, 47, 44, 42, 51, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.09371805191040039, "tests_passed": true, "error": null}}
{"selected_lines": [50, 42, 47, 46, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.11080193519592285, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 44, 47, 42, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08071398735046387, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07243609428405762, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.175278902053833, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 42, 46, 49, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0717780590057373, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.175278902053833, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 44, 39, 47, 41, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05144023895263672, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 50, 49, 51, 41, 42, 39, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 49, 46, 39, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='b')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.041477203369140625, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 41, 48, 46, 42, 49, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='r')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08332085609436035, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 49, 42, 50, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06970715522766113, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 41, 47, 51, 39, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07850980758666992, "tests_passed": true, "error": null}}
{"selected_lines": [50, 39, 47, 41, 49, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08690714836120605, "tests_passed": true, "error": null}}
{"selected_lines": [46, 44, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08455395698547363, "tests_passed": true, "error": null}}
{"selected_lines": [50, 42, 51, 44, 41, 48, 39, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07275104522705078, "tests_passed": true, "error": null}}
{"selected_lines": [39, 48, 42, 50, 51, 49, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07726812362670898, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 46, 48, 39, 41, 42, 47, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07312178611755371, "tests_passed": true, "error": null}}
{"selected_lines": [41, 48, 51, 44, 50, 39, 47, 42, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07143092155456543, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.08745718002319336, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.14859890937805176, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 44, 47, 49, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='r')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0895380973815918, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07551836967468262, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 42, 47, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0923299789428711, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [47, 51, 46, 48, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='black', marker='x', linewidths=2)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06963205337524414, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 50, 42, 46, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='r')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08238506317138672, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 50, 51, 47, 42, 46, 44, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='rainbow', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.09255194664001465, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18085885047912598, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 50, 39, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04382491111755371, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 46, 41, 48, 47, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 41, 48, 44, 46, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": false, "time": 0.00030112266540527344, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [46, 48, 49, 51, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08673405647277832, "tests_passed": true, "error": null}}
{"selected_lines": [49, 41, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05887293815612793, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 51, 41, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 48, 51, 46, 44, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='k')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04163813591003418, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08815884590148926, "tests_passed": true, "error": null}}
{"selected_lines": [41, 48, 39, 46, 50, 47, 42, 49, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07134103775024414, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='orange')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.20163989067077637, "tests_passed": true, "error": null}}
{"selected_lines": [49, 42, 51, 47, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='r')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08529400825500488, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 39, 51, 48, 49, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07323384284973145, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09104728698730469, "tests_passed": true, "error": null}}
{"selected_lines": [41, 50, 47, 44, 51, 46, 42, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09794497489929199, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 42, 39, 41, 46, 50, 51, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.04513096809387207, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 47, 39, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04522204399108887, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 44, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0855569839477539, "tests_passed": true, "error": null}}
{"selected_lines": [42, 50, 41, 48, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07245612144470215, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 50, 48, 49, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04565715789794922, "tests_passed": true, "error": null}}
{"selected_lines": [51, 44, 42, 41, 48, 39, 47, 50, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.3)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04457902908325195, "tests_passed": true, "error": null}}
{"selected_lines": [47, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.044651031494140625, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 44, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08648180961608887, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 41, 44, 39, 42, 50, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08344388008117676, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.3)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='r', marker='o')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0882720947265625, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1897108554840088, "tests_passed": true, "error": null}}
{"selected_lines": [42, 47, 51, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.08906221389770508, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 44, 48, 42, 51, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='rainbow', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08558011054992676, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 39, 41, 46, 48, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='orange')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05291295051574707, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09987497329711914, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 46, 47, 39, 44, 51, 41, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='b')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='black')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08776688575744629, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 41, 48, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08859705924987793, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 44, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.3669400215148926, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 42, 46, 39, 49, 41, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09008407592773438, "tests_passed": true, "error": null}}
{"selected_lines": [50, 51, 42, 46, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08694291114807129, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [46, 44, 41, 47, 51, 50, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0901179313659668, "tests_passed": true, "error": null}}
{"selected_lines": [47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18714380264282227, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 41, 48, 51, 46, 42, 39, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07670974731445312, "tests_passed": true, "error": null}}
{"selected_lines": [47, 50, 42, 41, 39, 51, 49, 44, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter([kmeans.cluster_centers_[i][0] for i in range(CLUSTERS)],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 48, 49, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='orange')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09171795845031738, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 39, 42, 41, 50, 44, 46, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.08443689346313477, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.30526089668273926, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 39, 46, 41, 51, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.076934814453125, "tests_passed": true, "error": null}}
{"selected_lines": [41, 49, 46, 44, 48, 50, 47, 42, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09943008422851562, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03970789909362793, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 44, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03585314750671387, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 48, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='r', marker='o')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08843684196472168, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 46, 50, 41, 47, 44, 42, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07378911972045898, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='r')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1795191764831543, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 39, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=1, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.042565107345581055, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 39, 42, 47, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.028409957885742188, "tests_passed": true, "error": null}}
{"selected_lines": [42, 51, 49, 41, 47, 46, 44, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='k')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08586478233337402, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 50, 48, 41, 49, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='r')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09078192710876465, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04076814651489258, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18383288383483887, "tests_passed": true, "error": null}}
{"selected_lines": [47, 41, 49, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05437421798706055, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09051227569580078, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04819822311401367, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 51, 41, 44, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0546109676361084, "tests_passed": true, "error": null}}
{"selected_lines": [49, 41, 39, 44, 48, 51, 42, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07828712463378906, "tests_passed": true, "error": null}}
{"selected_lines": [44, 50, 46, 47, 51, 39, 41, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0798940658569336, "tests_passed": true, "error": null}}
{"selected_lines": [41, 48, 49, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09255719184875488, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39, 47, 51, 50, 41, 44, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 42, 50, 51, 41, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.08953595161437988, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 44, 48, 41, 39, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_, cmap='brg')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0903768539428711, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 46, 41, 39, 51, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08674883842468262, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1930370330810547, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 44, 39, 50, 49, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='black')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='r')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09096789360046387, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39, 46, 42, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08147501945495605, "tests_passed": true, "error": null}}
{"selected_lines": [41, 46, 50, 47, 51, 44, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='r', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09107613563537598, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 39, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.016630172729492188, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07609891891479492, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 39, 48, 46, 41, 51, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='orange')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0568079948425293, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04076814651489258, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46, 47, 49, 42, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.045359134674072266, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 41, 42, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.092559814453125, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 41, 51, 47, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.10461211204528809, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 48, 42, 41, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.08027410507202148, "tests_passed": true, "error": null}}
{"selected_lines": [41, 48, 42, 47, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1042020320892334, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 39, 51, 44, 41, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(RANGE, SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='r')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 41, 49, 47, 42, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08908438682556152, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 44, 46, 49, 51, 42, 50, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07932591438293457, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 41, 42, 51, 50, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 41, 44, 50, 46, 51, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09383106231689453, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 42, 47, 49, 41, 44, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.10100769996643066, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 51, 47, 44, 49, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 39, 44, 47, 46, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0493009090423584, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 44, 50, 46, 42, 48, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='b')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.08366990089416504, "tests_passed": true, "error": null}}
{"selected_lines": [50, 39, 48, 44, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07842516899108887, "tests_passed": true, "error": null}}
{"selected_lines": [41, 47, 51, 48, 42, 49, 46, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='r')\n    plt.show()\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.091156005859375, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 48, 51, 46, 47, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09413313865661621, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.175278902053833, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19310998916625977, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 42, 47, 50, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07813191413879395, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 46, 50, 42, 47, 44, 48, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 42, 41, 39, 51, 44, 48, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([kmeans.cluster_centers_[i][0] for i in range(CLUSTERS)],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 51, 47, 41, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1123971939086914, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 49, 50, 41, 51, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 50, 51, 47, 46, 39, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04920792579650879, "tests_passed": true, "error": null}}
{"selected_lines": [49, 42, 39, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07811999320983887, "tests_passed": true, "error": null}}
{"selected_lines": [51, 46, 49, 50, 42, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07951688766479492, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46, 48, 44, 41, 50, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05580401420593262, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 42, 51, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08622622489929199, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08116793632507324, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08225417137145996, "tests_passed": true, "error": null}}
{"selected_lines": [39, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0476071834564209, "tests_passed": true, "error": null}}
{"selected_lines": [47, 42, 44, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09321904182434082, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 48, 39, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08408093452453613, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 49, 46, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([kmeans.cluster_centers_[i][0] for i in range(CLUSTERS)],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 44, 41, 49, 48, 42, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09467101097106934, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 42, 49, 46, 50, 47, 51, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04788780212402344, "tests_passed": true, "error": null}}
{"selected_lines": [48, 41, 49, 46, 50, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09355902671813965, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1811058521270752, "tests_passed": true, "error": null}}
{"selected_lines": [41, 50, 47, 42, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.07053589820861816, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 44, 42, 41, 51, 39, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05188608169555664, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18912577629089355, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 50, 42, 41, 46, 49, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='r')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08413410186767578, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 47, 39, 41, 51, 44, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0789191722869873, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.175278902053833, "tests_passed": true, "error": null}}
{"selected_lines": [51, 39, 47, 44, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(RANGE, SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 47, 39, 50, 48, 51, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.3)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.050321340560913086, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 47, 50, 49, 51, 42, 44, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter([x for x, _ in kmeans.cluster_centers_], [y for _, y in kmeans.cluster_centers_], c='black', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.10661602020263672, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 42, 47, 46, 41, 39, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.09121990203857422, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09051227569580078, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39, 46, 50, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0537261962890625, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1742391586303711, "tests_passed": true, "error": null}}
{"selected_lines": [41, 49, 42, 48, 51, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09713602066040039, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [51, 46, 48, 49, 41, 44, 39, 50, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08274292945861816, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 48, 51, 41, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='rainbow', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0936739444732666, "tests_passed": true, "error": null}}
{"selected_lines": [39, 48, 47, 44, 46, 51, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(RANGE, SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='black')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='k')\n    plt.show()\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 49, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09482192993164062, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 44, 51, 48, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09670567512512207, "tests_passed": true, "error": null}}
{"selected_lines": [41, 50, 39, 42, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04072403907775879, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18383288383483887, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.15315008163452148, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('x')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09736180305480957, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 50, 48, 49, 41, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04565715789794922, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08123111724853516, "tests_passed": true, "error": null}}
{"selected_lines": [49, 41, 46, 50, 48, 47, 42, 51, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09091401100158691, "tests_passed": true, "error": null}}
{"selected_lines": [47, 39, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0878148078918457, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 46, 50, 42, 41, 48, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08138418197631836, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 46, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09980392456054688, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 49, 51, 46, 39, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='orange')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08075380325317383, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 47, 48, 42, 44, 49, 39, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='black')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08478212356567383, "tests_passed": true, "error": null}}
{"selected_lines": [50, 39, 47, 41, 49, 44, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='b')\n    # Plot the cluster centroids\n    plt.scatter([kmeans.cluster_centers_[i][0] for i in range(CLUSTERS)],\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 50, 39, 49, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05483698844909668, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 39, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='b')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.052664995193481445, "tests_passed": true, "error": null}}
{"selected_lines": [41, 46, 47, 44, 51, 39, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08693575859069824, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1930370330810547, "tests_passed": true, "error": null}}
{"selected_lines": [51, 44, 41, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09572196006774902, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.10494184494018555, "tests_passed": true, "error": null}}
{"selected_lines": [47, 51, 46, 50, 41, 42, 49, 39, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.21684932708740234, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 42, 44, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06048393249511719, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.11080193519592285, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 50, 51, 44, 47, 41, 48, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.show()\n    plt.xlabel(\"X-Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.06331515312194824, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.30526089668273926, "tests_passed": true, "error": null}}
{"selected_lines": [51, 46, 39, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.08612775802612305, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 41, 39, 50, 47, 44, 51, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='b')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05801081657409668, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 39, 48, 44, 51, 41, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='b')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04999709129333496, "tests_passed": true, "error": null}}
{"selected_lines": [50, 44, 48, 42, 41, 47, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=100, alpha=0.5, c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0982062816619873, "tests_passed": true, "error": null}}
{"selected_lines": [47, 51, 48, 46, 42], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.10175800323486328, "tests_passed": true, "error": null}}
{"selected_lines": [41, 51, 46, 44, 42, 47, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.19113492965698242, "tests_passed": true, "error": null}}
{"selected_lines": [41, 50, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='r', marker='o')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.11281466484069824, "tests_passed": true, "error": null}}
{"selected_lines": [49, 41, 39, 47, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, max_iter=2000, random_state=10)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08629417419433594, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='k')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1926100254058838, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 49, 51, 47, 48, 42, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.show()\n    plt.xlabel('X')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05259585380554199, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 42, 44, 41, 49, 51, 48, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.3)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.10807514190673828, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 51, 46, 41, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], marker='x', s=200, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09789609909057617, "tests_passed": true, "error": null}}
{"selected_lines": [39, 50, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05297517776489258, "tests_passed": true, "error": null}}
{"selected_lines": [41, 47, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08573627471923828, "tests_passed": true, "error": null}}
{"selected_lines": [51, 41, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.11232113838195801, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.18383288383483887, "tests_passed": true, "error": null}}
{"selected_lines": [39, 49, 51, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.08735799789428711, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 39, 44, 41, 48, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='r')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.05762887001037598, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.30526089668273926, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 44, 41, 42, 51, 48, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], s=0.2)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=30, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.09910202026367188, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1827678680419922, "tests_passed": true, "error": null}}
{"selected_lines": [51, 42, 49, 48, 41, 39, 46, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter([cluster[0] for cluster in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 44, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.10133624076843262, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 42, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(RANGE, SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 48, 44, 42, 41, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09745216369628906, "tests_passed": true, "error": null}}
{"selected_lines": [39, 49, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09203886985778809, "tests_passed": true, "error": null}}
{"selected_lines": [39, 51, 41, 42, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='rainbow', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.09892416000366211, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0821070671081543, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.1930370330810547, "tests_passed": true, "error": null}}
{"selected_lines": [41, 48, 39, 46, 50, 49, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='b')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=100, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05566811561584473, "tests_passed": true, "error": null}}
{"selected_lines": [41, 50, 39, 42, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.04072403907775879, "tests_passed": true, "error": null}}
{"selected_lines": [48, 50, 49, 47, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0997161865234375, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 42, 49, 51, 41, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, SIZE)\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='r', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0877981185913086, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='w', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.10046100616455078, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08438396453857422, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.175278902053833, "tests_passed": true, "error": null}}
{"selected_lines": [41, 47, 51, 42, 39, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.10320305824279785, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 50, 39, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.06555914878845215, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=200)\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05470395088195801, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 46, 49, 48, 51, 41, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab10')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09158015251159668, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 41, 44, 47, 49, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_], c='r', marker='x')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.10966897010803223, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 41, 44, 39, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], alpha=0.2, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X Axis\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08902788162231445, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 39, 47, 51, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08928394317626953, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.10393977165222168, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 50, 46, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='b', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0605008602142334, "tests_passed": true, "error": null}}
{"selected_lines": [42, 50, 49, 44, 48, 39, 41], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09560704231262207, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 47, 48, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1, cmap='rainbow')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.056876182556152344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 51, 47, 39, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.10127687454223633, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=10, alpha=0.5)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return (data, kmeans)", "compilation_passed": true, "time": 0.08745718002319336, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 46, 50, 44, 41, 47, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.show()\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08769512176513672, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03970789909362793, "tests_passed": true, "error": null}}
{"selected_lines": [47, 39, 48, 41, 42, 49, 44, 51, 50], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.xlabel('X Axis')\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.05365180969238281, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.16652393341064453, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 39, 41, 44, 49], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:,0], data[:,1], c='b')  # Blue\n    # Plot the cluster centroids\n    plt.scatter([center[0] for center in kmeans.cluster_centers_], [center[1] for center in kmeans.cluster_centers_], c='red', marker='*')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.10240292549133301, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46, 42, 41, 50, 47, 48], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09000587463378906, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter([c[0] for c in kmeans.cluster_centers_], [c[1] for c in kmeans.cluster_centers_],\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 50, 46], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='b')\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.09974789619445801, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 46, 42, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black', marker='x', s=100)\n    plt.show()\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.10276913642883301, "tests_passed": true, "error": null}}
{"selected_lines": [50, 48, 41, 47], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.show()\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.08884716033935547, "tests_passed": true, "error": null}}
{"selected_lines": [48, 51, 44], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.array([(np.random.randint(0, RANGE), np.random.randint(0, RANGE)) for _ in range(SIZE)])\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.show()\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.10353422164916992, "tests_passed": true, "error": null}}
{"selected_lines": [49, 50, 39, 41, 46, 42, 44, 48, 51], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c='#1f77b4')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=50, c='black')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.10652804374694824, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.cluster import KMeans\n# Constants for configuration\nRANGE = 100\nSIZE = 1000\nCLUSTERS = 5\n\n\ndef task_func():\n    \"\"\"\n    Generates a set of 2D random points within a specified range and size,\n    applies KMeans clustering to these points, and plots the results with\n    cluster centroids.\n\n    The function creates a scatter plot of the clustered points with each\n    cluster displayed in a different color and the centroids of these clusters\n    highlighted.\n\n    Requirements:\n        - numpy\n        - sklearn.cluster\n        - matplotlib.pyplot\n\n    Returns:\n        A tuple containing the numpy array of data points and the fitted KMeans model.\n\n    Example:\n    >>> data, kmeans = task_func()\n    >>> isinstance(data, np.ndarray)  # Check if data is a numpy array\n    True\n    >>> data.shape == (1000, 2)  # Verify the shape of the data array\n    True\n    >>> isinstance(kmeans, KMeans)  # Confirm kmeans is an instance of KMeans\n    True\n    >>> len(kmeans.cluster_centers_) == 5  # Check the number of clusters\n    True\n    \"\"\"\n    # Generate random 2D points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', marker='.')\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', marker='x')\n    plt.title(\"KMeans Clustering of Random 2D Points\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.15315008163452148, "tests_passed": true, "error": null}}
