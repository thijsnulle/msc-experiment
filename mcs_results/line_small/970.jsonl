{"selected_lines": [44, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.45030808448791504, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 37, 38, 45, 44, 41, 39, 40, 49, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.char not in np.typecodes[\"AllInteger\"] + np.typecodes[\"AllFloat\"] + np.typecodes[\"AllCharacter\"]:\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 35, 46, 49, 34, 42, 38, 47, 40, 39, 44, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if len(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 41, 47, 44, 48, 36, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if len(data_sorted) > 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 40, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.isreal(data) == False):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 6.163007974624634, "tests_passed": true, "error": null}}
{"selected_lines": [37, 46, 39, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / len(data_sorted) * np.diff(data_sorted))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 34, 35, 44, 39, 42, 38, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.array(list(data.dtype.type))[1:] != np.dtype(np.number).type):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 37, 42, 40, 47, 41, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.count_nonzero(data_sorted) > 0\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2977478504180908, "tests_passed": true, "error": null}}
{"selected_lines": [38, 47, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.609804630279541, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 35, 45, 47, 40, 49, 34, 38, 36, 37, 42, 48, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(len(data_sorted) + 1) - 1\n        if np.sum(data_sorted) != 0\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 34, 40, 46, 41, 44, 45, 39, 37, 47, 36, 49, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if data_sorted.size > 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 40, 34, 48, 35, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) / data_sorted.size + 1 / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.36804699897766113, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 44, 47, 46, 38, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.array(list(data.dtype.type))[1:] != np.dtype(np.number).type):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 48, 45, 35, 46, 41, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any():\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1632230281829834, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 36, 34, 41, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError('Invalid data!')\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 49, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 45, 36, 40, 49, 39, 41, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array cannot contain negative numbers or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 45, 46, 36, 42, 37, 48, 41, 39, 47, 49, 44, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 49, 46, 41, 45, 42, 35, 40, 34, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(range(1, len(cumulative_prob) + 1), cumulative_prob)\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 37, 46, 44, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21340680122375488, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 37, 48, 34, 41, 44, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 44, 36, 41, 37, 38, 47, 49, 42, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) > 0\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 36, 38, 48, 45, 42, 39, 37, 47, 40, 46, 41, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(1, data_sorted.shape[0] + 1) -\n        if np.sum(data_sorted) != 0\n        else np.array([])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(1, len(cumulative_prob) + 1), cumulative_prob)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 38, 34, 48, 45, 44, 46, 35, 36, 37, 40, 49, 42, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(f\"Input array contains non-numeric values of type {data.dtype}.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.sum(data_sorted) != 0\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=0.2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 39, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 40, 34, 49, 46, 45, 36, 48, 41, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) + 1) / (data_sorted.size + 1)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) + 1\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.16325592994689941, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 46, 45, 40, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 35, 49, 46, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.8451881408691406, "tests_passed": true, "error": null}}
{"selected_lines": [45, 35, 41, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(1, len(cumulative_prob) + 1), cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21339869499206543, "tests_passed": true, "error": null}}
{"selected_lines": [49, 34, 38, 39, 44, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:  # In case of an empty array\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0] * len(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should only contain non-negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.22050189971923828, "tests_passed": true, "error": null}}
{"selected_lines": [40, 47, 38, 46, 45, 44, 41, 42, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.shape[0] + 1) * 100.0 / (data.shape[0] + 1.0)\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14544081687927246, "tests_passed": true, "error": null}}
{"selected_lines": [48, 41, 34, 44, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.44023704528808594, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 44, 37, 46, 47, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14449405670166016, "tests_passed": true, "error": null}}
{"selected_lines": [48, 34, 47, 39, 41, 37, 46, 49, 40, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array should only contain non-negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if len(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 46, 40, 36, 39, 49, 47, 37, 35, 45, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any():\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.ones_like(data_sorted)) / len(data_sorted)\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from typing import Callable, Any", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 38, 49, 34, 36, 40, 46, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2097182273864746, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 42, 46, 49, 34, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array should contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.5847733020782471, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if (np.nan in data) or (np.isinf(data)).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.4413120746612549, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 48, 38, 49, 47, 35, 42, 40, 39, 36, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 41, 42, 38, 44, 45, 48, 49, 34, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:  # In case of an empty array\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data) > 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from typing import Callable, Any", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 39, 40, 47, 44, 45, 35, 48, 36, 37, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 47, 41, 34, 44, 46, 39, 42, 49, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = np.zeros_like(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 46, 45, 39, 44, 42, 41, 49, 38, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.shape)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 49, 37, 45, 39, 42, 46, 36, 34, 44, 40, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input contains negative numbers or NaNs\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.arange(len(data_sorted)) + 1\n        if data_sorted.size > 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 34, 36, 40, 48, 41, 47, 35, 39, 38, 44, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)):\n        raise ValueError(\"Invalid input, cannot handle negative values or NaNs.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 45, 37, 35, 40, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted), dtype=float) + 1.0\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.17151618003845215, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 42, 36, 40, 41, 34, 37, 46, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.any(data_sorted)\n        else np.array([0.0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(data_sorted, cumulative_prob, marker='o', linestyle='-')\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 45, 44, 39, 48, 40, 38, 36, 46, 34, 49, 42, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.zeros_like(data)\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if np.count_nonzero(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 45, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6835737228393555, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.20803093910217285, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 36, 49, 37, 42, 34, 47, 38, 41, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, data.shape[0] + 1) * 100.0 / (data.shape[0] + 1.0)\n        if np.any(data_sorted)\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 41, 48, 34, 46, 44, 37, 39, 47, 42, 40, 49, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if (np.nan in data) or (np.isinf(data)).any():\n        raise ValueError(\"Input contains negative numbers or NaNs\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if data_sorted.size\n        else np.array([])\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 45, 36, 40, 44, 49, 35, 37, 38, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input contains negative numbers or NaNs\")\n    if np.any(np.isreal(data) == False):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.20803093910217285, "tests_passed": true, "error": null}}
{"selected_lines": [45, 41, 38, 37, 34, 39, 46, 48, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if any(isinstance(item, str) for item in data.flat):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 37, 46, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2158811092376709, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 40, 37, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(f\"Input array contains non-numeric values of type {data.dtype}.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if len(data_sorted)\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 34, 46, 36, 39, 37, 40, 44, 38, 48, 47, 41, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 49, 36, 47, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 45, 38, 44, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 36, 34, 45, 46, 42, 47, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted)\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 46, 45, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linestyle='-')\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1523442268371582, "tests_passed": true, "error": null}}
{"selected_lines": [42, 38, 37, 34, 40, 35, 49, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if (np.nan in data) or (np.isinf(data)).any():\n        raise ValueError(\"Input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) != 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.zeros_like(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": false, "time": 0.0002758502960205078, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [47, 39, 49, 41, 34, 45, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(len(data_sorted)) + 1\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 44, 39, 42, 41, 37, 49, 40, 35, 38, 46, 47, 45, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 36, 39, 46, 48, 49, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 46, 36, 40, 38, 44, 34, 45, 37, 35, 41, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(data >= 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) > 0\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.3932948112487793, "tests_passed": true, "error": null}}
{"selected_lines": [38, 46, 47, 44, 35, 42, 36, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 45, 44, 38, 47, 46, 39, 49, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 40, 42, 48, 47, 37, 35, 39, 36, 46, 34, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array should only contain non-negative numbers or NaNs.\")\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / len(data_sorted) * np.diff(data_sorted))\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 41, 47, 45, 39, 42, 40, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.arange(data_sorted.size) / data_sorted.size + 1 / data_sorted.size\n        if len(data_sorted) > 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 49, 46, 36, 42, 48, 41, 37, 39, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.isreal(data) == False):\n        raise TypeError(f\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 39, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 47, 39, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 46, 34, 38, 48, 39, 49, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if np.any(np.isreal(data) == False):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from .plot_histogram import plot_histogram", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 45, 37, 48, 36, 35, 49, 38, 46, 39, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if any(isinstance(item, str) for item in data.flat):\n        raise ValueError(\"Invalid input, cannot handle negative values or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(1, len(cumulative_prob) + 1), cumulative_prob)\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 48, 49, 47, 46, 42, 40, 34, 39, 41, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) + 1\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1739189624786377, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) + 1) / (data_sorted.size + 1)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": false, "time": 0.0001780986785888672, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [38, 37, 36, 48, 46, 42, 47, 49, 40, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1597309112548828, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 34, 39, 38, 41, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 37, 38, 48, 34, 42, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.17195820808410645, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.11029291152954102, "tests_passed": true, "error": null}}
{"selected_lines": [42, 38, 41, 48, 34, 45, 39, 44, 35, 49, 37, 40, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)):\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 39, 34, 38, 46, 48, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)):\n        raise ValueError(\"Data cannot contain negative numbers or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 48, 44, 37, 35, 47, 34, 40, 46, 39, 49, 45, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if data.dtype.char not in np.typecodes[\"AllInteger\"] + np.typecodes[\"AllFloat\"] + np.typecodes[\"AllCharacter\"]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(data.size, dtype=data.dtype) + 1\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 38, 47, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 46, 37, 45, 48, 49, 34, 38, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(np.arange(data.size), cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14722394943237305, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 40, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted) + 1) - 1\n        if np.sum(data_sorted) > 0\n        else np.array([0] * data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.17234206199645996, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 34, 47, 35, 48, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.shape)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.4941220283508301, "tests_passed": true, "error": null}}
{"selected_lines": [47, 41, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if (np.nan in data) or (np.isinf(data)).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6514461040496826, "tests_passed": true, "error": null}}
{"selected_lines": [37, 48, 47, 46, 41, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.16570305824279785, "tests_passed": true, "error": null}}
{"selected_lines": [39, 47, 41, 46, 42, 44, 49, 45, 40, 38, 35, 48, 34, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data.size > 0\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 36, 46, 49, 34, 44, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if (np.nan in data) or (np.isinf(data)).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.array(list(data.dtype.type))[1:] != np.dtype(np.number).type):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 42, 45, 36, 34, 48, 37, 46, 35, 40, 49, 47, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from .plot_histogram import plot_histogram", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 49, 38, 35, 41, 39, 45, 48, 40, 36, 34, 42, 44, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(range(data.size), cumulative_prob, marker='o', linewidth=0)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1955568790435791, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 48, 35, 39, 36, 45, 47, 44, 34, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(data >= 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(len(data_sorted) + 1) - 1\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=0.2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 47, 37, 44, 38, 45, 42, 35, 39, 41, 40, 36, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if np.any(np.array(list(data.dtype.type))[1:] != np.dtype(np.number).type):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 38, 37, 35, 46, 49, 42, 39, 36, 45, 40, 48, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.arange(data.size) + 1.0\n        if data_sorted.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 34, 39, 49, 47, 36, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0] * len(data)\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 34, 42, 44, 39, 46, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 46, 38, 40, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) / data_sorted.size + 1 / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.16341924667358398, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 36, 35, 39, 47, 49, 46, 41, 48, 44, 34, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 35, 36, 47, 38, 41, 39, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 46, 47, 45, 42, 49, 44, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=0)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21053409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 48, 40, 34, 41, 46, 38, 44, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.negative(data)):\n        raise ValueError(\"Input array should contain only non-negative numbers\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 36, 39, 40, 48, 35, 42, 47, 46, 34, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if any(isinstance(item, str) for item in data.flat):\n        raise ValueError(\"Data cannot contain negative numbers or NaNs.\")\n    if data.dtype.char not in np.typecodes[\"AllInteger\"] + np.typecodes[\"AllFloat\"] + np.typecodes[\"AllCharacter\"]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / len(data_sorted) * np.diff(data_sorted))\n        np.arange(data.size, dtype=data.dtype) + 1\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 40, 44, 42, 36, 47, 34, 38, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any() or np.issubdtype(data.dtype, np.integer) or data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 48, 34, 37, 40, 41, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.shape[0] + 1) / data_sorted.shape[0]\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.41346192359924316, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 44, 35, 48, 34, 42, 45, 47, 46, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0] * data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(1, len(cumulative_prob) + 1), cumulative_prob)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.20678019523620605, "tests_passed": true, "error": null}}
{"selected_lines": [48, 34, 35, 45, 38, 41, 42, 36, 49, 44, 40, 39, 37, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data.size > 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 39, 47, 48, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 34, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.all(np.issubdtype(data.dtype, np.number)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.46878886222839355, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6311459541320801, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.013424873352050781, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [40, 45, 41, 39, 37, 46, 34, 48, 36, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.array(list(data.dtype.type))[1:] != np.dtype(np.number).type):\n        raise TypeError(f\"Input array contains non-numeric values of type {data.dtype}.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted) / len(data)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=0)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 44, 36, 35, 45, 42, 41, 38, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size != 0\n        else np.array(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 38, 41, 49, 37, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data, cumulative_prob, s=3, marker=\"o\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 45, 44, 49, 35, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14358806610107422, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 48, 49, 40, 46, 36, 42, 41, 45, 35, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) > 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 36, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.type not in [np.int_, np.uint, np.float_, np.float64, np.float32]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 46, 34, 37, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 40, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted), dtype=float) + 1.0\n        if len(data_sorted) > 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14359092712402344, "tests_passed": true, "error": null}}
{"selected_lines": [47, 35, 37, 49, 42, 38, 39, 36, 45, 41, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should only contain non-negative numbers or NaNs.\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(np.arange(data.size), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 49, 36, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1840839385986328, "tests_passed": true, "error": null}}
{"selected_lines": [45, 36, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.type not in [np.int_, np.uint, np.float_, np.float64, np.float32]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.01562786102294922, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [37, 41, 46, 36, 40, 35, 47, 44, 49, 34, 38, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) + 1) / len(data_sorted)\n        if np.count_nonzero(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 49, 34, 39, 36, 35, 48, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any():\n        raise ValueError(\"Input array should only contain non-negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.arange(data_sorted.size) + 1) / (data_sorted.size + 1)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1955568790435791, "tests_passed": true, "error": null}}
{"selected_lines": [44, 35, 41, 49, 39, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 37, 44, 48, 46, 39, 42, 47, 36, 40, 34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from .plot_histogram import plot_histogram", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 46, 41, 38, 40, 37, 42, 39, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.count_nonzero(data_sorted) > 0\n        else np.array([0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 49, 47, 42, 37, 41, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.5772757530212402, "tests_passed": true, "error": null}}
{"selected_lines": [35, 48, 42, 34, 38, 40, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14483118057250977, "tests_passed": true, "error": null}}
{"selected_lines": [36, 44, 48, 37, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 38, 47, 42, 36, 49, 45, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2224140167236328, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 49, 42, 35, 36, 47, 37, 48, 41, 46, 45, 39, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array cannot contain negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.ones_like(data_sorted)) / len(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 45, 49, 42, 47, 48, 38, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if any(isinstance(item, str) for item in data.flat):\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) / data_sorted.size + 1 / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.20348811149597168, "tests_passed": true, "error": null}}
{"selected_lines": [41, 49, 45, 48, 37, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2863891124725342, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 47, 46, 44, 42, 41, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if any(isinstance(item, str) for item in data.flat):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size > 0\n        else np.array(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 45, 42, 47, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [np.sum(data <= i) / data_sorted.size for i in data_sorted]\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 34, 44, 35, 42, 41, 49, 47, 46, 40, 38, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input array should only contain non-negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.arange(len(data_sorted)) + 1\n        if data_sorted.size\n        else np.array([0.0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 37, 46, 41, 47, 42, 34, 40, 35, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Invalid input, cannot handle negative values or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.shape[0] + 1) / data_sorted.shape[0]\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.3072681427001953, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 48, 47, 34, 41, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.18417906761169434, "tests_passed": true, "error": null}}
{"selected_lines": [36, 45, 47, 35, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if data.dtype.type not in [np.int_, np.uint, np.float_, np.float64, np.float32]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(data.size), cumulative_prob, marker='o', linewidth=0)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 48, 44, 37, 38, 45, 35, 34, 36, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError(\"Input array should contain non-negative numbers\")\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.arange(data_sorted.size) + 1) / (data_sorted.size + 1)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 37, 45, 41, 34, 36, 47, 49, 40, 46, 42, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array(data)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 48, 40, 47, 45, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 37, 46, 44, 35, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(f\"Input array contains non-numeric values of type {data.dtype}.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 36, 35, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.5725021362304688, "tests_passed": true, "error": null}}
{"selected_lines": [38, 46, 44, 45, 36, 37, 41, 48, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) + 1) / len(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 42, 47, 41, 36, 39, 37, 45, 34, 35, 38, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if np.sum(data) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(1, len(cumulative_prob) + 1), cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 49, 36, 42, 40, 48, 35, 45, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Invalid input, cannot handle negative values or NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 36, 39, 38, 37, 41, 46, 48, 49, 45, 34, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError('Input array contains negative or NaNs.')\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from .plot_histogram import plot_histogram", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 34, 36, 44, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any() or np.issubdtype(data.dtype, np.integer) or data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted) / len(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 39, 40, 45, 42, 48, 41, 34, 46, 36, 37, 44, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 45, 44, 47, 48, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1955568790435791, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 47, 38, 45, 35, 34, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input array should contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14369726181030273, "tests_passed": true, "error": null}}
{"selected_lines": [45, 39, 47, 38, 44, 41, 40, 49, 37, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.bincount(np.searchsorted(data_sorted, data)) / len(data))\n        np.arange(len(data_sorted)) + 1) / len(data_sorted)\n        if data.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from typing import Callable, Any", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 41, 49, 47, 36, 46, 45, 34, 38, 37, 48, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) + 1\n        if np.any(data_sorted)\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21053409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 49, 39, 46, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 41, 40, 39, 44, 35, 42, 47, 37, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.ones_like(data_sorted)) / len(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.any(data)\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 36, 42, 34, 41, 38, 48, 46, 35, 45, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 49, 41, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(1, len(cumulative_prob) + 1), cumulative_prob)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should contain only non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.5808019638061523, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21053409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [34, 49, 38, 48, 35, 36, 40, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Input array must contain non-negative values.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.5080819129943848, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 45, 47, 35, 48, 46, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) + 1\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.17349505424499512, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 48, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 48, 39, 49, 34, 37, 47, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 44, 39, 36, 45, 47, 40, 35, 41, 34, 37, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 42, 45, 39, 41, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.zeros_like(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 40, 34, 35, 48, 44, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.shape[0] + 1) -\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 40, 41, 36, 46, 38, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must contain non-negative values.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 35, 42, 34, 38, 49, 45, 40, 36, 46, 39, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array must not contain negative numbers or NaNs.\")\n    if data.dtype.type not in [np.int_, np.uint, np.float_, np.float64, np.float32]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 37, 46, 36, 39, 42, 40, 41, 47, 49, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.any(data_sorted)\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 41, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1928398609161377, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 46, 49, 34, 47, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if (np.nan in data) or (np.isinf(data)).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15441513061523438, "tests_passed": true, "error": null}}
{"selected_lines": [34, 47, 39, 44, 46, 48, 45, 40, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.arange(data.size) + 1.0\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 45, 38, 46, 48, 34, 35, 40, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.negative(data)):\n        raise ValueError(\"Input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 37, 49, 38, 35, 34, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:  # In case of an empty array\n        raise ValueError(\"Invalid input, cannot handle negative values or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0] * len(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.06496500968933105, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 46, 40, 38, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14468598365783691, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 44, 46, 40, 39, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, data_sorted.shape[0] + 1) / data_sorted.shape[0]\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=0.2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 49, 48, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.43391895294189453, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 47, 36, 42, 48, 34, 35, 38, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array should only contain non-negative numbers or NaNs.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.3304011821746826, "tests_passed": true, "error": null}}
{"selected_lines": [47, 36, 40, 44, 38, 49, 41, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.shape[0] + 1) * 100.0 / (data.shape[0] + 1.0)\n        if np.count_nonzero(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.29845714569091797, "tests_passed": true, "error": null}}
{"selected_lines": [34, 49, 47, 42, 39, 46, 41, 36, 45, 35, 40, 44, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted) / len(data)\n        np.arange(1, data_sorted.shape[0] + 1) -\n        if np.any(data_sorted)\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6388511657714844, "tests_passed": true, "error": null}}
{"selected_lines": [37, 45, 41, 42, 44, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.array([])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.5679900646209717, "tests_passed": true, "error": null}}
{"selected_lines": [37, 45, 44, 39, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(len(data_sorted), dtype=float) + 1.0\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 39, 36, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(f\"Input array contains non-numeric values of type {data.dtype}.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 41, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14250540733337402, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 39, 42, 49, 48, 38, 47, 36, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should contain non-negative numbers\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [np.sum(data <= i) / data_sorted.size for i in data_sorted]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 39, 37, 42, 35, 46, 41, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data)\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 48, 46, 36, 47, 37, 44, 42, 34, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 39, 47, 48, 34, 49, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 41, 47, 48, 39, 36, 40, 37, 38, 34, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.arange(data_sorted.size) / data_sorted.size + 1 / data_sorted.size\n        if data_sorted.size > 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 36, 45, 35, 38, 34, 46, 49, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)):\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) != 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from typing import Callable, Any", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 48, 44, 49, 39, 35, 45, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 39, 46, 35, 48, 37, 40, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The array cannot contain negative numbers or NaNs.\")\n    if np.any(np.isreal(data) == False):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [np.sum(data <= i) / data_sorted.size for i in data_sorted]\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 47, 41, 37, 46, 44, 35, 38, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted) / len(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data, cumulative_prob, s=3, marker=\"o\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 35, 42, 40, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0]\n        np.arange(data.size) + 1.0\n        if np.sum(data_sorted) != 0\n        else np.array([0.0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 37, 38, 46, 34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.5916399955749512, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 39, 38, 35, 46, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should contain non-negative numbers\")\n    if np.any(np.array(list(data.dtype.type))[1:] != np.dtype(np.number).type):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = np.cumsum(np.bincount(np.searchsorted(data_sorted, data)) / len(data))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 39, 34, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.zeros_like(data)\n        np.arange(data_sorted.size) + 1) / (data_sorted.size + 1)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 34, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 35, 38, 44, 36, 49, 34, 46, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 45, 34, 49, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 49, 46, 44, 47, 41, 39, 34, 35, 37, 48, 38, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 39, 38, 46, 49, 35, 42, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Invalid data!')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.zeros_like(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from typing import Callable, Any", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 34, 42, 48, 49, 41, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size > 0\n        else np.array(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 46, 42, 35, 47, 49, 36, 40, 45, 39, 38, 34, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.arange(len(data_sorted)) + 1\n        if len(data_sorted) != 0\n        else np.zeros(data_sorted.shape)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data) > 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.613853931427002, "tests_passed": true, "error": null}}
{"selected_lines": [38, 47, 45, 35, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1415860652923584, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 45, 40, 44, 46, 38, 39, 41, 36, 34, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.char not in np.typecodes[\"AllInteger\"] + np.typecodes[\"AllFloat\"] + np.typecodes[\"AllCharacter\"]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 48, 38, 34, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.48961400985717773, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 35, 45, 46, 42, 49, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [np.sum(data <= i) / data_sorted.size for i in data_sorted]\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 40, 39, 41, 36, 38, 37, 48, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(len(data_sorted))\n        np.arange(len(data_sorted)) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 49, 45, 35, 41, 34, 42, 39, 38, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 40, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.4496140480041504, "tests_passed": true, "error": null}}
{"selected_lines": [49, 37, 36, 34, 41, 48, 38, 35, 45, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(f\"Input array contains non-numeric values of type {data.dtype}.\")\n    data_sorted = np.sort(np.atleast_1d(data))\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from typing import Callable, Any", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 39, 34, 47, 37, 41, 48, 49, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size > 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14416193962097168, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 35, 39, 38, 47, 42, 49, 34, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.all(np.issubdtype(data.dtype, np.number)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 36, 41, 44, 49, 48, 47, 46, 35, 45, 40, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.arange(data.size) + 1.0\n        if np.count_nonzero(data_sorted) != 0\n        else np.array([0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 49, 48, 39, 41, 35, 45, 42, 34, 46, 36, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError('Invalid data!')\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=0.2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 34, 39, 40, 38, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, data.shape[0] + 1) * 100.0 / (data.shape[0] + 1.0)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 40, 46, 39, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.any(data)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 42, 36, 40, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 34, 47, 42, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.43073177337646484, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 35, 41, 36, 44, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size > 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.5785300731658936, "tests_passed": true, "error": null}}
{"selected_lines": [45, 39, 44, 36, 41, 42, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 36, 44, 47, 39, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should only contain non-negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 47, 41, 34, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.arange(1, data.shape[0] + 1) * 100.0 / (data.shape[0] + 1.0)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 36, 38, 42, 49, 45, 44, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if not np.all(np.issubdtype(data.dtype, np.number)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) > 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.9237549304962158, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 42, 45, 38, 35, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.19207286834716797, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 38, 45, 41, 49, 48, 44, 37, 39, 34, 47, 42, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError('Invalid data!')\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 42, 47, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 48, 36, 40, 34, 47, 39, 35, 42, 44, 45, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Data cannot contain negative numbers or NaNs.\")\n    if not np.all(np.issubdtype(data.dtype, np.number)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.zeros_like(data)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if data_sorted.size\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 41, 47, 40, 46, 35, 37, 38, 45, 48, 36, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input contains negative numbers or NaNs\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if np.sum(data_sorted) > 0\n        else np.array([0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 42, 45, 46, 35, 39, 44, 40, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 45, 47, 48, 36, 49, 37, 40, 38, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.3788590431213379, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 41, 45, 38, 48, 37, 46, 49, 42, 47, 40, 44, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.ones_like(data_sorted)) / len(data_sorted)\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if np.sum(data_sorted) != 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 38, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 38, 35, 39, 46, 48, 41, 49, 36, 44, 34, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"The input array must not contain negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0] * len(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data)\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15268611907958984, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 46, 40, 38, 39, 37, 47, 48, 42, 44, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(data >= 0):\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted) / len(data)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6661350727081299, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 48, 36, 38, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input contains negative numbers or NaNs\")\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.648453950881958, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 36, 41, 39, 42, 45, 34, 44, 47, 40, 48, 46, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if data.dtype.type not in [np.int_, np.uint, np.float_, np.float64, np.float32]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 39, 34, 47, 35, 44, 37, 36, 41, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.arange(len(data_sorted)) + 1\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 38, 35, 39, 40, 36, 42, 46, 49, 41, 44, 48, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError('Invalid data!')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 34, 38, 41, 35, 36, 48, 49, 39, 44, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15621089935302734, "tests_passed": true, "error": null}}
{"selected_lines": [47, 35, 34, 39, 45, 44, 41, 49, 40, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if data_sorted.size\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.shape[0] + 1) -\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": false, "time": 0.00023174285888671875, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [49, 36, 39, 42, 37, 44, 45, 47, 41, 40, 34, 48, 35, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.array(list(data.dtype.type))[1:] != np.dtype(np.number).type):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) > 0\n        else np.array([0] * data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 36, 41, 38, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(f\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.7063679695129395, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [45, 49, 44, 36, 48, 42, 38, 40, 41, 35, 34, 37, 46, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.shape[0] + 1) -\n        if np.count_nonzero(data_sorted) != 0\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 45, 47, 40, 35, 48, 41, 46, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 49, 35, 38, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.34244394302368164, "tests_passed": true, "error": null}}
{"selected_lines": [48, 36, 49, 39, 47, 35, 41, 34, 37, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(data >= 0):\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 46, 37, 49, 34, 40, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(data.size), cumulative_prob, marker='o', linewidth=0)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.20124387741088867, "tests_passed": true, "error": null}}
{"selected_lines": [46, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.314939022064209, "tests_passed": true, "error": null}}
{"selected_lines": [47, 34, 36, 41, 38, 37, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.688140869140625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 42, 44, 40, 45, 48, 34, 49, 36, 46, 39, 47, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"The array cannot contain negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [np.sum(data <= i) / data_sorted.size for i in data_sorted]\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if len(data_sorted)\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21260619163513184, "tests_passed": true, "error": null}}
{"selected_lines": [48, 39, 47, 44, 34, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 38, 36, 40, 35, 49, 42, 34, 45, 41, 47, 48, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array must not contain negative numbers or NaNs.\")\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, data_sorted.shape[0] + 1) -\n        if len(data_sorted) > 0\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 46, 47, 49, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if len(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 46, 42, 44, 36, 37, 48, 49, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any() or np.issubdtype(data.dtype, np.integer) or data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 49, 34, 36, 48, 47, 38, 42, 41, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"The array cannot contain negative numbers or NaNs.\")\n    if not np.all(np.issubdtype(data.dtype, np.number)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(data >= 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1682147979736328, "tests_passed": true, "error": null}}
{"selected_lines": [46, 40, 35, 37, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.18233704566955566, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 47, 39, 36, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.zeros_like(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 49, 42, 36, 34, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.kind not in \"iu\":\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data.size, dtype=data.dtype) + 1\n        if len(data_sorted)\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1711440086364746, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 37, 47, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linestyle='-')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 34, 45, 40, 35, 39, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0]\n        np.arange(data_sorted.size) + 1) / (data_sorted.size + 1)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 40, 41, 36, 48, 45, 42, 39, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any() or np.issubdtype(data.dtype, np.integer) or data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.arange(data_sorted.size) / data_sorted.size + 1 / data_sorted.size\n        if len(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=0.2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 34, 39, 35, 48, 45, 44, 36, 40, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 46, 45, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 45, 35, 37, 34, 41, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.less(data, 0)):\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(data.size), cumulative_prob, marker='o', linewidth=0)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.22251582145690918, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Input array contains negative or NaNs.')\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.9356858730316162, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39, 41, 37, 38, 42, 40, 35, 49, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(len(data_sorted))\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if len(data_sorted) != 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 34, 42, 45, 46, 47, 48, 36, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:  # In case of an empty array\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.type not in [np.int_, np.uint, np.float_, np.float64, np.float32]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 44, 37, 39, 46, 40, 45, 47, 34, 49, 35, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.shape)\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(np.arange(data.size), cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 49, 44, 36, 47, 38, 34, 35, 41, 37, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.340939998626709, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 48, 38, 37, 46, 40, 35, 36, 45, 39, 34, 41, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any():\n        raise ValueError('Invalid data!')\n    if data.dtype.char not in np.typecodes[\"AllInteger\"] + np.typecodes[\"AllFloat\"] + np.typecodes[\"AllCharacter\"]:\n        raise TypeError(f\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 40, 46, 37, 38, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 40, 36, 38, 37, 34, 45, 35, 44, 47, 41, 46, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.arange(data.size, dtype=data.dtype) + 1\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(data.size), cumulative_prob, marker='o', linewidth=0)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 46, 36, 42, 49, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.shape[0] + 1) -\n        if np.sum(data_sorted) != 0\n        else np.array([0.0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 47, 36, 38, 45, 44, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(range(1, len(cumulative_prob) + 1), cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 37, 44, 40, 45, 49, 38, 41, 42, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if len(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.17120790481567383, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1955568790435791, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 38, 44, 47, 34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if any(isinstance(item, str) for item in data.flat):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.32769012451171875, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39, 40, 49, 34, 48, 45, 38, 36, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0]\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=0)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 36, 47, 41, 35, 49, 48, 34, 37, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data.size > 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from typing import Callable, Any", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted), dtype=float) + 1.0\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.06436729431152344, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 37, 44, 40, 41, 46, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.20412993431091309, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted) + 1) - 1\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 42, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0] * len(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 44, 39, 49, 37, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.array(list(data.dtype.type))[1:] != np.dtype(np.number).type):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(len(data_sorted))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 36, 35, 34, 42, 38, 47, 37, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)):\n        raise ValueError(\"Input array should contain only non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.47321414947509766, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6928040981292725, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 39, 49, 41, 47, 46, 44, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.kind not in \"iu\":\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if len(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 47, 49, 36, 48, 44, 45, 37, 41, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.type not in [np.int_, np.uint, np.float_, np.float64, np.float32]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.size + 1) / data.size * 100\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 47, 41, 46, 34, 40, 42, 36, 35, 39, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.negative(data)):\n        raise ValueError(\"Input contains negative numbers or NaNs\")\n    if np.any(np.isreal(data) == False):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 41, 36, 49, 38, 45, 39, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if (np.nan in data) or (np.isinf(data)).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 49, 45, 48, 37, 36, 35, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Input array contains negative or NaNs.')\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 47, 34, 46, 44, 42, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.4698522090911865, "tests_passed": true, "error": null}}
{"selected_lines": [45, 39, 48, 36, 47, 46, 38, 35, 49, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.arange(len(data_sorted) + 1) - 1\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1955568790435791, "tests_passed": true, "error": null}}
{"selected_lines": [47, 40, 49, 38, 37, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1583702564239502, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 41, 45, 37, 35, 42, 39, 36, 38, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must not contain negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data.size > 0\n        else np.array([0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 42, 46, 45, 49, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.013303995132446289, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21053409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 40, 34, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 35, 44, 37, 48, 38, 41, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must contain non-negative values.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.scatter(data, cumulative_prob, s=3, marker=\"o\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.22318077087402344, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 37, 47, 36, 41, 39, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(f\"Input array contains non-numeric values of type {data.dtype}.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.11029291152954102, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 42, 37, 45, 48, 47, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(np.atleast_1d(data))\n    cumulative_prob = (\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if np.sum(data_sorted) != 0\n        else np.array([0.0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 42, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 47, 39, 38, 40, 49, 37, 35, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(len(data_sorted))\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 34, 39, 48, 44, 41, 49, 37, 42, 47, 46, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(f\"Input array contains non-numeric values of type {data.dtype}.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(len(data_sorted)) + 1\n        if data_sorted.size > 0\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 38, 41, 34, 39, 46, 35, 40, 49, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 38, 36, 41, 35, 34, 49, 48, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if len(data_sorted) > 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(1, len(cumulative_prob) + 1), cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 44, 42, 37, 49, 35, 39, 48, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Invalid input, cannot handle negative values or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.zeros_like(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 35, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(data.size), cumulative_prob, marker='o', linewidth=0)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15665483474731445, "tests_passed": true, "error": null}}
{"selected_lines": [41, 45, 35, 46, 49, 38, 37, 36, 34, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input contains negative numbers or NaNs\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted) / len(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 35, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1587541103363037, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 46, 41, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / len(data_sorted) * np.diff(data_sorted))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 36, 46, 37, 38, 49, 40, 34, 47, 44, 35, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Input contains negative numbers or NaNs\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 36, 45, 37, 34, 46, 38, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(f\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 48, 38, 40, 35, 39, 36, 46, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.bincount(np.searchsorted(data_sorted, data)) / len(data))\n        np.arange(data.size) + 1.0\n        if data.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 41, 40, 44, 35, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) + 1\n        if np.count_nonzero(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15683412551879883, "tests_passed": true, "error": null}}
{"selected_lines": [38, 48, 49, 40, 44, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.48403406143188477, "tests_passed": true, "error": null}}
{"selected_lines": [34, 47, 48, 49, 42, 45, 37, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 45, 47, 42, 38, 44, 34, 39, 46, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(f\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 47, 46, 34, 40, 39, 45, 35, 37, 36, 49, 41, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if data.dtype.type not in [np.int_, np.uint, np.float_, np.float64, np.float32]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(len(data_sorted))\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if data_sorted.size != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 46, 48, 38, 40, 47, 44, 41, 39, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0] * len(data)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if data.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.5100631713867188, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 38, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted), dtype=float) + 1.0\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15796184539794922, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21053409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [48, 41, 34, 39, 47, 37, 35, 49, 38, 44, 45, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 42, 46, 47, 36, 49, 37, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 44, 45, 36, 47, 35, 39, 34, 41, 48, 40, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(data.size, dtype=data.dtype) + 1\n        if data_sorted.size\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 47, 38, 40, 49, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.20444893836975098, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 45, 37, 38, 35, 46, 34, 41, 39, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0]\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 40, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15848088264465332, "tests_passed": true, "error": null}}
{"selected_lines": [47, 38, 41, 45, 39, 48, 42, 35, 46, 40, 44, 37, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Invalid data!')\n    if np.any(np.array(list(data.dtype.type))[1:] != np.dtype(np.number).type):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(np.atleast_1d(data))\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 38, 48, 41, 36, 49, 44, 37, 39, 47, 34, 42, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.all(np.issubdtype(data.dtype, np.number)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.sum(data_sorted) > 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21053409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 44, 39, 45, 48, 42, 40, 49, 37, 38, 34, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array must contain non-negative values.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted) / len(data)\n        np.arange(len(data_sorted)) + 1\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from typing import Callable, Any", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 45, 41, 49, 36, 46, 37, 34, 42, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Data cannot contain negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 48, 44, 34, 45, 41, 42, 37, 39, 49, 47, 35, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if any(isinstance(item, str) for item in data.flat):\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.ones_like(data_sorted)) / len(data_sorted)\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if len(data_sorted) > 0\n        else np.array([0] * data.size)\n    )\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 48, 36, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The array cannot contain negative numbers or NaNs.\")\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 42, 37, 41, 34, 45, 40, 48, 39, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) > 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 47, 49, 48, 35, 46, 34, 38, 45, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.bincount(np.searchsorted(data_sorted, data)) / len(data))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from .plot_histogram import plot_histogram", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 34, 37, 38, 42, 35, 45, 39, 36, 46, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size > 0\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 36, 49, 41, 34, 45, 35, 37, 42, 44, 46, 47, 40, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.sum(data_sorted) > 0\n        else np.zeros(data_sorted.shape)\n    )\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21799087524414062, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 39, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 44, 34, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15874981880187988, "tests_passed": true, "error": null}}
{"selected_lines": [38, 45, 39, 42, 49, 46, 47, 37, 40, 44, 34, 48, 35, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)):\n        raise ValueError(\"Input array should only contain non-negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.sum(data_sorted) > 0\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=0.2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 41, 47, 45, 48, 38, 46, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(np.atleast_1d(data))\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15730524063110352, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if any(isinstance(item, str) for item in data.flat):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(np.atleast_1d(data))\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6275026798248291, "tests_passed": true, "error": null}}
{"selected_lines": [47, 39, 41, 40, 37, 48, 38, 44, 49, 42, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.arange(len(data_sorted)) + 1\n        if data.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 41, 38, 37, 36, 42, 40, 39, 44, 46, 45, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if (np.nan in data) or (np.isinf(data)).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.kind not in \"iu\":\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(data.size) + 1.0\n        if data.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 46, 49, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 42, 48, 37, 39, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.bincount(np.searchsorted(data_sorted, data)) / len(data))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 39, 36, 47, 44, 38, 34, 40, 37, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(np.atleast_1d(data))\n    cumulative_prob = np.empty_like(data_sorted)\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data, cumulative_prob, s=3, marker=\"o\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 39, 42, 46, 34, 40, 48, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(data >= 0):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 34, 46, 36, 48, 40, 44, 42, 35, 37, 39, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError(\"Invalid input, cannot handle negative values or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 45, 35, 47, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Invalid data!')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(data.size), cumulative_prob, marker='o', linewidth=0)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 41, 49, 45, 44, 40, 42, 47, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.shape[0] + 1) * 100.0 / (data.shape[0] + 1.0)\n        if len(data_sorted) != 0\n        else np.array([])\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 44, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.plot(\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 34, 41, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15669703483581543, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(f\"Input array contains non-numeric values of type {data.dtype}.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.4743010997772217, "tests_passed": true, "error": null}}
{"selected_lines": [38, 46, 40, 34, 41, 48, 47, 44, 39, 36, 37, 45, 42, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6262431144714355, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 49, 39, 41, 47, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from typing import Callable, Any", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 49, 48, 42, 47, 34, 36, 35, 40, 45, 39, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array should only contain non-negative numbers or NaNs.\")\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(f\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.zeros_like(data)\n        np.arange(len(data_sorted)) + 1\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 39, 35, 38, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(np.atleast_1d(data))\n    cumulative_prob = np.cumsum(np.bincount(np.searchsorted(data_sorted, data)) / len(data))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.shape)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 41, 44, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should contain only non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.9089939594268799, "tests_passed": true, "error": null}}
{"selected_lines": [47, 42, 36, 44, 46, 35, 37, 39, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if np.any(np.array(list(data.dtype.type))[1:] != np.dtype(np.number).type):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": false, "time": 0.00022721290588378906, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [49, 35, 37, 48, 36, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6252648830413818, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 42, 48, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 49, 36, 45, 39, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data cannot contain negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 48, 44, 39, 41, 42, 46, 45, 38, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15584778785705566, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 37, 44, 39, 36, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21053409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [45, 36, 44, 48, 35, 46, 40, 42, 34, 38, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0]\n        np.arange(1, data_sorted.shape[0] + 1) / data_sorted.shape[0]\n        if np.sum(data_sorted) != 0\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(1, len(cumulative_prob) + 1), cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 49, 45, 47, 37, 48, 34, 40, 41, 36, 38, 44, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.array(list(data.dtype.type))[1:] != np.dtype(np.number).type):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0] * len(data)\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.any(data_sorted)\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 46, 42, 40, 39, 36, 35, 34, 47, 49, 48, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)) or np.any(np.less(data, 0)):\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if np.any(np.array(list(data.dtype.type))[1:] != np.dtype(np.number).type):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.ones_like(data_sorted)) / len(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.count_nonzero(data_sorted) > 0\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 37, 45, 49, 44, 36, 35, 34, 38, 42, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 48, 34, 47, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 41, 49, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15379095077514648, "tests_passed": true, "error": null}}
{"selected_lines": [46, 36, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.kind not in \"iu\":\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.3146817684173584, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Invalid input, cannot handle negative values or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(data.size), cumulative_prob, marker='o', linewidth=0)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.8474559783935547, "tests_passed": true, "error": null}}
{"selected_lines": [34, 48, 36, 42, 46, 40, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.type not in [np.int_, np.uint, np.float_, np.float64, np.float32]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.arange(len(data_sorted)) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.shape)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21053409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14049577713012695, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 36, 49, 37, 41, 39, 42, 48, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data cannot contain negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(f\"Input array contains non-numeric values of type {data.dtype}.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.count_nonzero(data_sorted) != 0\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 44, 34, 45, 35, 46, 41, 37, 39, 48, 38, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if data.dtype.char not in np.typecodes[\"AllInteger\"] + np.typecodes[\"AllFloat\"] + np.typecodes[\"AllCharacter\"]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0] * len(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.array(\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=0)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 48, 42, 39, 36, 40, 47, 45, 35, 46, 37, 44, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.any(data_sorted)\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(data.size), cumulative_prob, marker='o', linewidth=0)\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 41, 37, 34, 39, 45, 36, 40, 47, 49, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.type not in [np.int_, np.uint, np.float_, np.float64, np.float32]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted) / len(data)\n        np.arange(data.size, dtype=data.dtype) + 1\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 34, 49, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 41, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.shape[0] + 1) -\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 47, 45, 48, 41, 38, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:  # In case of an empty array\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data.size, dtype=data.dtype) + 1\n        if data.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(1, len(cumulative_prob) + 1), cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.16508197784423828, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": false, "time": 0.00027108192443847656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [45, 35, 42, 37, 46, 40, 44, 41, 39, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(1, data_sorted.shape[0] + 1) / data_sorted.shape[0]\n        if np.any(data_sorted)\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": false, "time": 0.0002548694610595703, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 49, 36, 42, 45, 38, 40, 37, 47, 39, 46, 44, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Invalid data!')\n    if np.any(np.array(list(data.dtype.type))[1:] != np.dtype(np.number).type):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0]\n        np.arange(1, data_sorted.shape[0] + 1) -\n        if len(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from typing import Callable, Any", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 37, 36, 42, 44, 48, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.type not in [np.int_, np.uint, np.float_, np.float64, np.float32]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 41, 39, 48, 38, 35, 46, 37, 40, 34, 49, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(f\"Input array contains non-numeric values of type {data.dtype}.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted) / len(data)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from typing import Callable, Any", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 37, 36, 45, 42, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if data.dtype.type not in [np.int_, np.uint, np.float_, np.float64, np.float32]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 40, 34, 38, 35, 37, 39, 46, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"The input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 49, 37, 46, 41, 39, 47, 38, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 37, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6732261180877686, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 45, 47, 40, 46, 41, 36, 39, 48, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(len(data_sorted))\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if data_sorted.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 39, 47, 42, 40, 45, 41, 37, 49, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if np.any(data)\n        else np.zeros(data_sorted.shape)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1694803237915039, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 35, 49, 46, 41, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted) + 1) - 1\n        if np.any(data_sorted)\n        else np.array(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15581703186035156, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 48, 49, 36, 35, 44, 41, 37, 39, 34, 45, 38, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(range(data.size), cumulative_prob, marker='o', linewidth=0)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 37, 45, 44, 47, 49, 34, 42, 40, 36, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) > 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 38, 35, 49, 39, 45, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any():\n        raise ValueError(\"The input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data.size) + 1.0\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15610218048095703, "tests_passed": true, "error": null}}
{"selected_lines": [41, 46, 38, 35, 47, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.7904572486877441, "tests_passed": true, "error": null}}
{"selected_lines": [49, 41, 36, 34, 47, 40, 37, 46, 39, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 34, 47, 36, 40, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.type not in [np.int_, np.uint, np.float_, np.float64, np.float32]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 34, 35, 40, 47, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.31212592124938965, "tests_passed": true, "error": null}}
{"selected_lines": [45, 37, 41, 34, 35, 46, 48, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linestyle='-')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 38, 48, 47, 36, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.529695987701416, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 47, 35, 40, 37, 34, 48, 42, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError('Input array contains negative or NaNs.')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if np.sum(data_sorted) != 0\n        else np.array(data)\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 41, 38, 37, 40, 44, 45, 46, 39, 35, 34, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any() or np.issubdtype(data.dtype, np.integer) or data.size == 0:\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted) / len(data)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 36, 49, 44, 37, 41, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(f\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=0)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 38, 35, 41, 45, 40, 34, 39, 48, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(len(data_sorted))\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if np.count_nonzero(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 41, 40, 46, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 36, 35, 42, 39, 38, 41, 47, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0] * len(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 48, 34, 44, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.631483793258667, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 44, 45, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any() or np.issubdtype(data.dtype, np.integer) or data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=0.2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6689519882202148, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 40, 42, 37, 46, 49, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.3123598098754883, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2326509952545166, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 40, 38, 41, 35, 44, 34, 49, 47, 45, 46, 48, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.count_nonzero(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 42, 46, 35, 41, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Invalid input, cannot handle negative values or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted)\n        else np.zeros(data_sorted.shape)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15906906127929688, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 46, 39, 49, 44, 35, 36, 48, 37, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=0.2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21053409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 45, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 46, 39, 38, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 36, 34, 49, 44, 35, 39, 45, 38, 47, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.bincount(np.searchsorted(data_sorted, data)) / len(data))\n        np.arange(len(data_sorted)) + 1\n        if np.any(data_sorted)\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 36, 41, 35, 46, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 42, 41, 49, 48, 37, 46, 34, 47, 38, 35, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:  # In case of an empty array\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted)\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from .plot_histogram import plot_histogram", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 47, 46, 42, 44, 35, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:  # In case of an empty array\n        raise ValueError(\"Input array should contain non-negative numbers\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.3126688003540039, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [42, 47, 35, 39, 41, 37, 40, 44, 46, 49, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if len(data_sorted) > 0\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 46, 45, 39, 34, 49, 35, 36, 37, 42, 44, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 40, 49, 42, 41, 36, 46, 48, 37, 39, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if np.any(np.isreal(data) == False):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 45, 40, 49, 34, 35, 44, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data.size) + 1.0\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(data_sorted, cumulative_prob, \"o\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.22254109382629395, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.20181012153625488, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 48, 38, 37, 44, 39, 47, 35, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if data.dtype.char not in np.typecodes[\"AllInteger\"] + np.typecodes[\"AllFloat\"] + np.typecodes[\"AllCharacter\"]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.arange(1, data_sorted.shape[0] + 1) -\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 36, 37, 42, 38, 44, 47, 45, 41, 40, 35, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if not np.all(np.issubdtype(data.dtype, np.number)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0]\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.count_nonzero(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 44, 35, 34, 41, 39, 49, 37, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array should contain non-negative numbers\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, data_sorted.shape[0] + 1) / data_sorted.shape[0]\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 41, 37, 38, 34, 35, 42, 49, 40, 39, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any() or np.issubdtype(data.dtype, np.integer) or data.size == 0:\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [np.sum(data <= i) / data_sorted.size for i in data_sorted]\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size != 0\n        else np.array(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 48, 47, 39, 49, 41, 44, 36, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.array(list(data.dtype.type))[1:] != np.dtype(np.number).type):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 48, 35, 49, 41, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must contain non-negative values.\")\n    if data.dtype.kind not in \"iu\":\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 38, 36, 46, 37, 40, 45, 39, 44, 49, 41, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if data.dtype.kind not in \"iu\":\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.arange(1, data_sorted.shape[0] + 1) -\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 41, 39, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 41, 36, 35, 34, 42, 47, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 42, 39, 35, 41, 46, 49, 47, 40, 44, 48, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"The input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) > 0\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 34, 39, 42, 36, 49, 47, 37, 38, 35, 41, 44, 45, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.less(data, 0)):\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(len(data_sorted))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size > 0\n        else np.array([])\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 42, 49, 36, 35, 38, 41, 39, 37, 48, 46, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should contain only non-negative numbers\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(f\"Input array contains non-numeric values of type {data.dtype}.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 34, 38, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=0)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 47, 34, 46, 49, 42, 45, 35, 44, 40, 41, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if len(data_sorted) > 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data, cumulative_prob, s=3, marker=\"o\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.22312426567077637, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 36, 42, 37, 38, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(np.atleast_1d(data))\n    cumulative_prob = (\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.31556105613708496, "tests_passed": true, "error": null}}
{"selected_lines": [45, 44, 40, 49, 36, 37, 35, 38, 47, 39, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if np.any(np.isreal(data) == False):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted) / len(data)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 47, 38, 35, 46, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15712523460388184, "tests_passed": true, "error": null}}
{"selected_lines": [48, 37, 47, 38, 46, 40, 49, 35, 41, 45, 39, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError('Invalid data!')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, data_sorted.shape[0] + 1) / data_sorted.shape[0]\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 49, 37, 38, 47, 35, 42, 41, 48, 39, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any() or np.issubdtype(data.dtype, np.integer) or data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted)\n        else np.array([0] * data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linestyle='-')\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from typing import Callable, Any", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 39, 34, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 34, 40, 37, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if any(isinstance(item, str) for item in data.flat):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.3081982135772705, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 48, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6260819435119629, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [49, 40, 45, 47, 34, 44, 42, 46, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 37, 40, 48, 39, 42, 49, 45, 35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 42, 45, 41, 48, 35, 40, 49, 38, 44, 36, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.any(data_sorted)\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 48, 35, 41, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1556990146636963, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1955568790435791, "tests_passed": true, "error": null}}
{"selected_lines": [45, 35, 34, 49, 41, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data, cumulative_prob, s=3, marker=\"o\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 44, 49, 34, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(np.atleast_1d(data))\n    cumulative_prob = np.empty_like(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.8254919052124023, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 42, 47, 38, 34, 45, 35, 46, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any() or np.issubdtype(data.dtype, np.integer) or data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 34, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1568300724029541, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 36, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6887271404266357, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 42, 34, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from typing import Callable, Any", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 46, 38, 37, 39, 35, 49, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from typing import Callable, Any", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 41, 37, 42, 36, 48, 49, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should contain only non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) + 1) / (data_sorted.size + 1)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=0)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 41, 49, 45, 37, 39, 36, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any() or np.issubdtype(data.dtype, np.integer) or data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(np.atleast_1d(data))\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 46, 40, 38, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.shape[0] + 1) -\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": false, "time": 0.00029206275939941406, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [37, 49, 45, 38, 42, 47, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 45, 48, 49, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.31185102462768555, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 47, 41, 38, 37, 34, 40, 39, 45, 49, 36, 35, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array cannot contain negative numbers or NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=0.2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 46, 42, 34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.3161318302154541, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 49, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.char not in np.typecodes[\"AllInteger\"] + np.typecodes[\"AllFloat\"] + np.typecodes[\"AllCharacter\"]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6329700946807861, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 45, 38, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 42, 37, 48, 49, 36, 34, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 47, 35, 34, 45, 46, 42, 40, 49, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(data.size), cumulative_prob, marker='o', linewidth=0)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.3137381076812744, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.20189213752746582, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 35, 45, 40, 48, 44, 49, 34, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(range(data.size), cumulative_prob, marker='o', linewidth=0)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15043973922729492, "tests_passed": true, "error": null}}
{"selected_lines": [49, 36, 39, 35, 37, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must contain non-negative values.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 37, 47, 35, 39, 38, 44, 48, 36, 42, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Input array contains negative or NaNs.')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted), dtype=float) + 1.0\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 42, 35, 36, 39, 44, 49, 34, 46, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.array([0] * data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.72389817237854, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 46, 45, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data, cumulative_prob, s=3, marker=\"o\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 49, 40, 42, 45, 46, 41, 39, 34, 36, 47, 37, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.bincount(np.searchsorted(data_sorted, data)) / len(data))\n        np.arange(1, data_sorted.shape[0] + 1) -\n        if np.count_nonzero(data_sorted) != 0\n        else np.array([0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 36, 41, 47, 38, 39, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.all(np.issubdtype(data.dtype, np.number)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 49, 37, 46, 47, 38, 40, 48, 35, 44, 34, 45, 42, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(np.atleast_1d(data))\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.arange(1, data_sorted.shape[0] + 1) / data_sorted.shape[0]\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from typing import Callable, Any", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 41, 49, 38, 46, 44, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15943384170532227, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.8388981819152832, "tests_passed": true, "error": null}}
{"selected_lines": [48, 34, 37, 38, 36, 46, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.31755876541137695, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 47, 38, 49, 42, 44, 35, 36, 48, 39, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array must not contain negative numbers or NaNs.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.ones_like(data_sorted)) / len(data_sorted)\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 48, 49, 40, 44, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.48403406143188477, "tests_passed": true, "error": null}}
{"selected_lines": [35, 49, 39, 36, 48, 45, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array must contain non-negative values.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 45, 36, 39, 34, 41, 38, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0] * len(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6258523464202881, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 34, 42, 41, 46, 40, 35, 36, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 40, 45, 39, 34, 44, 42, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0] * data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 37, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2183527946472168, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 48, 41, 36, 37, 49, 42, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(f\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6328470706939697, "tests_passed": true, "error": null}}
{"selected_lines": [48, 37, 45, 36, 38, 35, 41, 42, 46, 40, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input contains negative numbers or NaNs\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if np.count_nonzero(data_sorted) != 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.16020798683166504, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 37, 44, 40, 34, 48, 38, 49, 47, 36, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.negative(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 48, 36, 49, 39, 47, 41, 35, 42, 45, 46, 34, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 38, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.isreal(data) == False):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.20124077796936035, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 46, 48, 39, 37, 44, 38, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 37, 35, 46, 49, 42, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15812206268310547, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39, 37, 36, 45, 34, 40, 48, 46, 38, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(f\"Input array contains non-numeric values of type {data.dtype}.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(len(data_sorted))\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21053409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [49, 41, 38, 35, 46, 48, 42, 34, 40, 45, 44, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)):\n        raise ValueError(\"Input array should only contain non-negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if data_sorted.size > 0\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 45, 38, 35, 42, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)) or np.any(np.less(data, 0)):\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1572411060333252, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21260619163513184, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 37, 44, 48, 34, 38, 40, 39, 35, 36, 41, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError(\"Data cannot contain negative numbers or NaNs.\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.arange(len(data_sorted)) + 1\n        if np.sum(data) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 49, 35, 37, 41, 48, 40, 36, 38, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 39, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 44, 42, 47, 41, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) + 1\n        if np.any(data_sorted)\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15728211402893066, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 36, 38, 34, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if (np.nan in data) or (np.isinf(data)).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.char not in np.typecodes[\"AllInteger\"] + np.typecodes[\"AllFloat\"] + np.typecodes[\"AllCharacter\"]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(np.atleast_1d(data))\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 46, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.16140508651733398, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 40, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 40, 45, 49, 41, 46, 44, 37, 38, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data.size) + 1.0\n        if np.sum(data_sorted) > 0\n        else np.array([])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 46, 37, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.16175389289855957, "tests_passed": true, "error": null}}
{"selected_lines": [41, 49, 38, 34, 44, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 49, 48, 44, 45, 34, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.784503698348999, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 42, 44, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.ones_like(data_sorted)) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.06496500968933105, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 37, 40, 46, 48, 44, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.3730332851409912, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 49, 42, 41, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size\n        else np.array([])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 45, 40, 42, 44, 47, 46, 35, 37, 34, 48, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError('Invalid data!')\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) / data_sorted.size + 1 / data_sorted.size\n        if np.sum(data) > 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15681099891662598, "tests_passed": true, "error": null}}
{"selected_lines": [37, 48, 46, 42, 38, 44, 34, 47, 35, 40, 39, 41, 36, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(len(data_sorted))\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.count_nonzero(data_sorted) > 0\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 38, 37, 40, 48, 36, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.any(data)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 46, 47, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.16124391555786133, "tests_passed": true, "error": null}}
{"selected_lines": [45, 38, 48, 36, 40, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21053409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 46, 35, 42, 47, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any():\n        raise ValueError(\"Input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(np.atleast_1d(data))\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.4744400978088379, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 36, 48, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 41, 36, 44, 48, 45, 39, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 39, 37, 36, 41, 40, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.all(np.issubdtype(data.dtype, np.number)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 36, 37, 35, 42, 46, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should contain only non-negative numbers\")\n    if data.dtype.char not in np.typecodes[\"AllInteger\"] + np.typecodes[\"AllFloat\"] + np.typecodes[\"AllCharacter\"]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.sum(data_sorted) > 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 38, 35, 48, 49, 40, 44, 46, 42, 37, 45, 41, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any():\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if data.dtype.type not in [np.int_, np.uint, np.float_, np.float64, np.float32]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from .plot_histogram import plot_histogram", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 36, 48, 42, 44, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 36, 38, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.kind not in \"iu\":\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.518125057220459, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 42, 45, 36, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.array([0] * data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linestyle='-')\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6337149143218994, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 46, 45, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linestyle='-')\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15721988677978516, "tests_passed": true, "error": null}}
{"selected_lines": [49, 36, 39, 37, 41, 35, 34, 48, 38, 47, 40, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [np.sum(data <= i) / data_sorted.size for i in data_sorted]\n        np.arange(len(data_sorted), dtype=float) + 1.0\n        if np.sum(data) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(data.size), cumulative_prob, marker='o', linewidth=0)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 47, 49, 37, 39, 44, 34, 45, 48, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.ones_like(data_sorted)) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 37, 39, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 36, 34, 45, 39, 49, 46, 35, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(data >= 0):\n        raise ValueError(\"Input array should only contain non-negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1955568790435791, "tests_passed": true, "error": null}}
{"selected_lines": [37, 46, 35, 45, 41, 36, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6970648765563965, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21053409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 41, 47, 45, 38, 48, 35, 34, 36, 40, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if data.dtype.char not in np.typecodes[\"AllInteger\"] + np.typecodes[\"AllFloat\"] + np.typecodes[\"AllCharacter\"]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.shape[0] + 1) * 100.0 / (data.shape[0] + 1.0)\n        if np.sum(data) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 37, 47, 46, 48, 40, 44, 34, 35, 49, 45, 41, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / len(data_sorted) * np.diff(data_sorted))\n        np.arange(1, data.size + 1) / data.size * 100\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 47, 40, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 35, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(1, len(cumulative_prob) + 1), cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.317457914352417, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 46, 44, 40, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if len(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 36, 46, 35, 44, 45, 40, 49, 47, 42, 34, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = np.cumsum(np.ones_like(data_sorted)) / len(data_sorted)\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linestyle='-')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 46, 41, 40, 42, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if data_sorted.size != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.22012591361999512, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 38, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.isreal(data) == False):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.20004773139953613, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 39, 42, 44, 35, 37, 45, 46, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must contain non-negative values.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size != 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.06496500968933105, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 42, 48, 46, 41, 45, 36, 34, 37, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 49, 48, 39, 40, 35, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 41, 39, 34, 38, 36, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 42, 47, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array(data)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 37, 44, 41, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1581428050994873, "tests_passed": true, "error": null}}
{"selected_lines": [45, 36, 34, 48, 44, 49, 42, 47, 35, 46, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array should only contain non-negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 34, 40, 37, 48, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 47, 46, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 47, 40, 49, 35, 34, 42, 41, 46, 38, 48, 44, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"The input array must not contain negative numbers or NaNs.\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.shape)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 45, 42, 40, 47, 38, 49, 35, 41, 44, 36, 48, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The array cannot contain negative numbers or NaNs.\")\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data.size) + 1.0\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data, cumulative_prob, s=3, marker=\"o\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 49, 39, 42, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 47, 46, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 49, 35, 38, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.31792616844177246, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 47, 49, 42, 34, 40, 48, 36, 38, 46, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if (np.nan in data) or (np.isinf(data)).any():\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) + 1) / (data_sorted.size + 1)\n        if data_sorted.size\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 34, 49, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if any(isinstance(item, str) for item in data.flat):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.4717679023742676, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 42, 34, 37, 40, 49, 48, 35, 47, 44, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype.kind not in \"iu\":\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) / data_sorted.size + 1 / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from .plot_histogram import plot_histogram", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 35, 46, 36, 39, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 40, 38, 42, 46, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [np.sum(data <= i) / data_sorted.size for i in data_sorted]\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.count_nonzero(data_sorted) != 0\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 42, 44, 48, 41, 38, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1622920036315918, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 36, 46, 38, 49, 47, 48, 37, 40, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 35, 34, 42, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"The array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data)\n        else np.zeros(data_sorted.shape)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(1, len(cumulative_prob) + 1), cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.07527780532836914, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1652059555053711, "tests_passed": true, "error": null}}
{"selected_lines": [49, 37, 40, 35, 39, 41, 48, 36, 44, 42, 46, 34, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError(\"The array cannot contain negative numbers or NaNs.\")\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from .plot_histogram import plot_histogram", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.214249849319458, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 40, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(np.atleast_1d(data))\n    cumulative_prob = (\n        np.arange(data.size) + 1.0\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.20220685005187988, "tests_passed": true, "error": null}}
{"selected_lines": [44, 35, 48, 34, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6968917846679688, "tests_passed": true, "error": null}}
{"selected_lines": [46, 36, 45, 38, 35, 39, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array should contain non-negative numbers\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data, cumulative_prob, s=3, marker=\"o\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 34, 46, 49, 41, 48, 42, 36, 38, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros(data_sorted.shape)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linestyle='-')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 49, 35, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6215109825134277, "tests_passed": true, "error": null}}
{"selected_lines": [49, 34, 37, 35, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15601897239685059, "tests_passed": true, "error": null}}
{"selected_lines": [41, 45, 40, 47, 38, 37, 42, 39, 48, 49, 36, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 45, 46, 34, 44, 40, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array must not contain negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted) + 1) - 1\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1649010181427002, "tests_passed": true, "error": null}}
{"selected_lines": [49, 42, 46, 41, 38, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15552186965942383, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted) / len(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": false, "time": 0.00022077560424804688, "tests_passed": false, "error": "IndentationError"}}
{"selected_lines": [41, 49, 40, 42, 36, 45, 48, 44, 38, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if np.any(data_sorted)\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.3160829544067383, "tests_passed": true, "error": null}}
{"selected_lines": [45, 39, 38, 49, 47, 37, 42, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 36, 48, 44, 35, 38, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Invalid input, cannot handle negative values or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size > 0\n        else np.array([0] * data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.7910912036895752, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 37, 40, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 47, 45, 35, 49, 34, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.5507700443267822, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1522810459136963, "tests_passed": true, "error": null}}
{"selected_lines": [46, 37, 48, 41, 38, 34, 45, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) / data_sorted.size + 1 / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.11957788467407227, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 34, 48, 42, 37, 40, 36, 35, 39, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0] * len(data)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size != 0\n        else np.array([0.0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 36, 35, 38, 48, 40, 47, 39, 37, 42, 41, 34, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.all(np.issubdtype(data.dtype, np.number)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if np.sum(data) > 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 36, 39, 38, 44, 42, 34, 46, 47, 49, 45, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array should contain only non-negative numbers\")\n    if data.dtype.char not in np.typecodes[\"AllInteger\"] + np.typecodes[\"AllFloat\"] + np.typecodes[\"AllCharacter\"]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 44, 40, 35, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2888069152832031, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 35, 48, 45, 34, 39, 47, 38, 37, 42, 44, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any() or np.issubdtype(data.dtype, np.integer) or data.size == 0:\n        raise ValueError('Input array contains negative or NaNs.')\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 34, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 44, 47, 49, 38, 41, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(np.atleast_1d(data))\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 39, 48, 42, 46, 40, 36, 34, 47, 37, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, data_sorted.shape[0] + 1) / data_sorted.shape[0]\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data, cumulative_prob, s=3, marker=\"o\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 49, 40, 35, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if len(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 45, 35, 34, 40, 49, 37, 38, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.arange(data_sorted.size) + 1) / (data_sorted.size + 1)\n        if np.sum(data_sorted) != 0\n        else np.array([])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 34, 39, 44, 46, 47, 41, 38, 49, 40, 48, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(len(data_sorted) + 1) - 1\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 35, 36, 34, 47, 42, 46, 45, 40, 37, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.negative(data)):\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.shape[0] + 1) -\n        if data.size > 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 39, 45, 38, 41, 37, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 41, 39, 47, 34, 48, 35, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(f\"Input array contains non-numeric values of type {data.dtype}.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(data.size, dtype=data.dtype) + 1\n        if data_sorted.size\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 48, 47, 45, 35, 46, 38, 40, 44, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 47, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.291384220123291, "tests_passed": true, "error": null}}
{"selected_lines": [34, 46, 38, 37, 44, 36, 49, 35, 48, 42, 41, 40, 47, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if (np.nan in data) or (np.isinf(data)).any():\n        raise ValueError(\"The input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = (\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.sum(data_sorted) > 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 45, 37, 44, 36, 46, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if data.dtype.kind not in \"iu\":\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 36, 34, 37, 35, 42, 48, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size != 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 42, 41, 47, 36, 44, 49, 37, 48, 35, 38, 39, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array cannot contain negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.arange(len(data_sorted) + 1) - 1\n        if data_sorted.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=0.2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 35, 36, 44, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0] * data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 45, 35, 44, 47, 42, 41, 37, 49, 48, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(f\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted), dtype=float) + 1.0\n        if data.size > 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 41, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(data_sorted.size) / data_sorted.size + 1 / data_sorted.size\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 37, 45, 39, 34, 36, 38, 46, 44, 42, 47, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [np.sum(data <= i) / data_sorted.size for i in data_sorted]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 38, 45, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 39, 48, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.bincount(np.searchsorted(data_sorted, data)) / len(data))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 49, 39, 38, 44, 36, 48, 42, 37, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The array cannot contain negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(data.size, dtype=data.dtype) + 1\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 39, 44, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.7512111663818359, "tests_passed": false, "error": "ValueError"}}
{"selected_lines": [36, 42, 35, 44, 39, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 47, 46, 37, 34, 45, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any() or np.issubdtype(data.dtype, np.integer) or data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.shape[0] + 1) * 100.0 / (data.shape[0] + 1.0)\n        if len(data_sorted)\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 39, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 35, 34, 40, 45, 38, 42, 47, 46, 44, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.shape[0] + 1) / data_sorted.shape[0]\n        if np.sum(data_sorted) != 0\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 46, 35, 45, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) + 1\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14977502822875977, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 40, 34, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.29590606689453125, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 45, 41, 38, 34, 37, 40, 48, 49, 44, 35, 46, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from typing import Callable, Any", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21053409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 40, 39, 47, 41, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 37, 44, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=0)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 47, 34, 49, 36, 37, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 46, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2130899429321289, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.22775721549987793, "tests_passed": true, "error": null}}
{"selected_lines": [44, 35, 49, 47, 36, 46, 38, 39, 41, 48, 45, 34, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 44, 38, 39, 45, 40, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 37, 38, 46, 34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.5916399955749512, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 49, 45, 39, 46, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [np.sum(data <= i) / data_sorted.size for i in data_sorted]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linestyle='-')\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 40, 35, 42, 45, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1840839385986328, "tests_passed": true, "error": null}}
{"selected_lines": [45, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should contain only non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.7496891021728516, "tests_passed": true, "error": null}}
{"selected_lines": [35, 48, 41, 38, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should contain only non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6305787563323975, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 38, 47, 34, 39, 49, 37, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:  # In case of an empty array\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 40, 37, 47, 45, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted), dtype=float) + 1.0\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.214249849319458, "tests_passed": true, "error": null}}
{"selected_lines": [36, 45, 34, 38, 47, 42, 39, 40, 41, 35, 48, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 34, 47, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) + 1\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14792299270629883, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 37, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(f\"Input array contains non-numeric values of type {data.dtype}.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2962167263031006, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 34, 46, 40, 48, 42, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any() or np.issubdtype(data.dtype, np.integer) or data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if len(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 39, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 34, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.negative(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 35, 44, 41, 49, 48, 36, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 44, 48, 47, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) + 1) / len(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 38, 36, 42, 49, 48, 44, 39, 41, 47, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must not contain negative numbers or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.plot(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 38, 49, 42, 40, 35, 46, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, data.shape[0] + 1) * 100.0 / (data.shape[0] + 1.0)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 47, 38, 36, 42, 40, 45, 48, 49, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Invalid input, cannot handle negative values or NaNs.\")\n    if not np.all(np.issubdtype(data.dtype, np.number)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size\n        else np.array([0] * data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2941098213195801, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1955568790435791, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 38, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any() or np.issubdtype(data.dtype, np.integer) or data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 46, 41, 48, 44, 47, 40, 38, 39, 49, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if np.any(np.array(list(data.dtype.type))[1:] != np.dtype(np.number).type):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=0)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 40, 45, 37, 47, 34, 41, 36, 48, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input contains negative numbers or NaNs\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.3092830181121826, "tests_passed": true, "error": null}}
{"selected_lines": [35, 44, 40, 45, 41, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.shape[0] + 1) * 100.0 / (data.shape[0] + 1.0)\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 48, 49, 36, 41, 39, 40, 38, 47, 37, 45, 46, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data cannot contain negative numbers or NaNs.\")\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.arange(len(data_sorted) + 1) - 1\n        if data_sorted.size > 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 48, 42, 37, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Input array contains negative or NaNs.')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21897077560424805, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 48, 46, 49, 41, 39, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [np.sum(data <= i) / data_sorted.size for i in data_sorted]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.5029439926147461, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 46, 41, 38, 45, 47, 44, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted) / len(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.array(list(data.dtype.type))[1:] != np.dtype(np.number).type):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 38, 47, 36, 42, 45, 49, 40, 48, 34, 41, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:  # In case of an empty array\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if data_sorted.size > 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 48, 47, 41, 34, 38, 37, 49, 44, 42, 45, 46, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Invalid input, cannot handle negative values or NaNs.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(f\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(1, len(cumulative_prob) + 1), cumulative_prob)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 37, 48, 41, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 47, 49, 42, 39, 40, 44, 45, 41, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data.size > 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linestyle='-')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 36, 46, 40, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Input array contains negative or NaNs.')\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.shape[0] + 1) * 100.0 / (data.shape[0] + 1.0)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.22012591361999512, "tests_passed": true, "error": null}}
{"selected_lines": [41, 49, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 48, 41, 39, 49, 42, 38, 47, 44, 40, 45, 35, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21053409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39, 47, 44, 37, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 46, 41, 40, 47, 48, 38, 49, 45, 35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(len(data_sorted))\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 48, 47, 42, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14771509170532227, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": false, "time": 0.00027108192443847656, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [41, 35, 34, 44, 39, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError(\"Input contains negative numbers or NaNs\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 45, 34, 42, 41, 36, 40, 48, 39, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(data >= 0):\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) > 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 49, 42, 37, 34, 48, 39, 45, 40, 44, 38, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0]\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.scatter(\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 35, 47, 42, 34, 36, 46, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input contains negative numbers or NaNs\")\n    if not np.all(np.issubdtype(data.dtype, np.number)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(data.size) + 1.0\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 47, 41, 36, 39, 34, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if data_sorted.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 46, 41, 48, 42, 44, 35, 40, 38, 49, 34, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(f\"Input array contains non-numeric values of type {data.dtype}.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [np.sum(data <= i) / data_sorted.size for i in data_sorted]\n        np.arange(len(data_sorted)) + 1\n        if np.sum(data_sorted) > 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 40, 39, 37, 38, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0] * len(data)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 38, 39, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [np.sum(data <= i) / data_sorted.size for i in data_sorted]\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.5910501480102539, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 36, 38, 35, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.19274616241455078, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 38, 37, 35, 46, 47, 36, 49, 42, 48, 41, 44, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input contains negative numbers or NaNs\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(f\"Input array contains non-numeric values of type {data.dtype}.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.arange(len(data_sorted), dtype=float) + 1.0\n        if len(data_sorted) > 0\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 44, 35, 38, 39, 45, 36, 48, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.06496500968933105, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 48, 49, 46, 47, 35, 44, 42, 41, 36, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1473252773284912, "tests_passed": true, "error": null}}
{"selected_lines": [45, 34, 39, 40, 49, 44, 41, 48, 47, 36, 35, 46, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:  # In case of an empty array\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 49, 35, 36, 46, 44, 48, 47, 41, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input contains negative numbers or NaNs\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 46, 36, 37, 41, 39, 48, 47, 38, 45, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted) / len(data)\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 49, 34, 35, 40, 46, 41, 47, 42, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError('Invalid data!')\n    if np.any(np.isreal(data) == False):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data.size, dtype=data.dtype) + 1\n        if data_sorted.size\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.3087592124938965, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 39, 42, 41, 36, 34, 38, 35, 40, 47, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(data >= 0):\n        raise ValueError(\"Input array should contain non-negative numbers\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 38, 44, 47, 34, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [np.sum(data <= i) / data_sorted.size for i in data_sorted]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 47, 37, 48, 34, 39, 42, 36, 49, 35, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 48, 46, 35, 42, 45, 44, 40, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Invalid input, cannot handle negative values or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=0)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.negative(data)):\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.15470099449157715, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 37, 45, 47, 41, 38, 39, 49, 36, 34, 35, 48, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0] * len(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data) > 0\n        else np.array([0] * data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 48, 40, 37, 42, 46, 35, 34, 44, 41, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if (np.nan in data) or (np.isinf(data)).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / len(data_sorted) * np.diff(data_sorted))\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.any(data_sorted)\n        else np.zeros(data_sorted.shape)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 38, 48, 44, 37, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if len(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14585590362548828, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 38, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 37, 45, 41, 48, 47, 44, 34, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 34, 47, 36, 46, 48, 49, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 49, 36, 45, 44, 46, 37, 39, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linestyle='-')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 49, 44, 42, 34, 48, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.35530996322631836, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 34, 42, 48, 46, 44, 36, 47, 45, 49, 35, 38, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.array([])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from .plot_histogram import plot_histogram", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 41, 44, 37, 46, 35, 40, 45, 39, 34, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any():\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(len(data_sorted))\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 38, 42, 36, 40, 37, 39, 44, 35, 46, 45, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 35, 48, 38, 36, 40, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any() or np.issubdtype(data.dtype, np.integer) or data.size == 0:\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 47, 49, 37, 42, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 35, 37, 48, 42, 38, 44, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(np.atleast_1d(data))\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.5890052318572998, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 49, 38, 34, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14779996871948242, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1652059555053711, "tests_passed": true, "error": null}}
{"selected_lines": [49, 37, 44, 36, 35, 41, 34, 45, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input contains negative numbers or NaNs\")\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / len(data_sorted) * np.diff(data_sorted))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 34, 48, 37, 42, 47, 35, 38, 41, 49, 36, 44, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)):\n        raise ValueError(\"Input array must contain non-negative values.\")\n    if np.any(np.array(list(data.dtype.type))[1:] != np.dtype(np.number).type):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) > 0\n        else np.array([0] * data.size)\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 41, 40, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, data.size + 1) / data.size * 100\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 35, 48, 37, 42, 44, 38, 34, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.ones_like(data_sorted)) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0] * data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 49, 48, 34, 46, 36, 39, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / len(data_sorted) * np.diff(data_sorted))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=0.2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21472907066345215, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 49, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.7772376537322998, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 34, 45, 39, 49, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 49, 38, 39, 48, 40, 47, 45, 46, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if data_sorted.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 40, 37, 49, 35, 45, 39, 38, 47, 48, 42, 36, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The input array must not contain negative numbers or NaNs.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / data_sorted.shape[0])\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 37, 39, 46, 47, 34, 40, 48, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 35, 38, 39, 44, 45, 34, 48, 47, 46, 49, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 34, 47, 45, 41, 37, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.shape[0] + 1) -\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 42, 49, 47, 48, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data.size, dtype=data.dtype) + 1\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.17612433433532715, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 36, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.16527700424194336, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 38, 46, 41, 49, 34, 40, 48, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if data_sorted.size != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 49, 46, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.16714191436767578, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 37, 49, 41, 36, 45, 46, 34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 37, 40, 47, 35, 38, 39, 45, 42, 34, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 41, 39, 48, 34, 49, 47, 46, 42, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, data.size + 1) / data.size * 100\n        if len(data_sorted)\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 42, 39, 49, 34, 37, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21053409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [41, 45, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=0)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 41, 48, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 35, 38, 34, 44, 48, 45, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if (np.nan in data) or (np.isinf(data)).any():\n        raise ValueError('Invalid data!')\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 48, 40, 36, 38, 39, 46, 44, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError('Invalid data!')\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 39, 42, 41, 34, 36, 35, 49, 47, 48, 40, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted)\n        else np.array([0])\n    )\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.scatter(data, cumulative_prob, s=3, marker=\"o\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 41, 37, 36, 46, 40, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 34, 36, 41, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 34, 42, 46, 36, 44, 37, 35, 47, 39, 48, 40, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.allclose(data, 0):  # case of all zeros\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / len(data_sorted) * np.diff(data_sorted))\n        np.arange(data.size, dtype=data.dtype) + 1\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.shape)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 42, 35, 40, 37, 47, 34, 45, 48, 44, 36, 41, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:  # In case of an empty array\n        raise ValueError(\"Input array cannot contain negative numbers or NaNs.\")\n    if np.any(np.isreal(data) == False):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0] * len(data)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.array(data)\n    )\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 46, 34, 36, 38, 40, 35, 47, 49, 44, 37, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any() or np.issubdtype(data.dtype, np.integer) or data.size == 0:\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.sum(data_sorted) != 0\n        else np.array([0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 48, 39, 35, 44, 36, 46, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 49, 34, 36, 46, 42, 48, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size > 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2039041519165039, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 34, 41, 40, 36, 48, 47, 44, 45, 42, 39, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.any(data)\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 46, 36, 48, 39, 42, 41, 34, 40, 37, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input contains negative numbers or NaNs\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.arange(1, data_sorted.shape[0] + 1) / data_sorted.shape[0]\n        if len(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.17095184326171875, "tests_passed": true, "error": null}}
{"selected_lines": [47, 38, 34, 40, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2196800708770752, "tests_passed": true, "error": null}}
{"selected_lines": [47, 41, 42, 37, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data) > 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.8233001232147217, "tests_passed": true, "error": null}}
{"selected_lines": [37, 47, 34, 46, 45, 39, 42, 36, 40, 35, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.ones_like(data_sorted)) / len(data_sorted)\n        np.arange(data_sorted.size) / data_sorted.size + 1 / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=0)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 35, 41, 36, 42, 48, 39, 45, 34, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array should contain only non-negative numbers\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.bincount(np.searchsorted(data_sorted, data)) / len(data))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.array(data)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 38, 47, 49, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 34, 40, 42, 35, 49, 36, 47, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.negative(data)):\n        raise ValueError(\"The input array must not contain negative numbers or NaNs.\")\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 42, 38, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should contain only non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 37, 35, 44, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.3511369228363037, "tests_passed": true, "error": null}}
{"selected_lines": [41, 47, 40, 35, 46, 44, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(data >= 0):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if data.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.17608404159545898, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 42, 37, 40, 47, 48, 38, 34, 45, 46, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 38, 48, 49, 40, 36, 44, 45, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.shape[0] + 1) / data_sorted.shape[0]\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.11281991004943848, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 47, 45, 46, 36, 48, 41, 49, 44, 39, 42, 35, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.arange(1, data_sorted.shape[0] + 1) / data_sorted.shape[0]\n        if np.count_nonzero(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\")\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import math", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 49, 38, 44, 35, 47, 40, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) > 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.3229799270629883, "tests_passed": true, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21053409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 38, 37, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any() or np.issubdtype(data.dtype, np.integer) or data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 45, 37, 35, 34, 41, 47, 36, 39, 49, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 44, 40, 49, 42, 38, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if len(data_sorted) > 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import matplotlib.pyplot as plt", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 48, 35, 47, 41, 40, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.negative(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(len(data_sorted)) + 1) / len(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 45, 47, 39, 44, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / len(data_sorted) * np.diff(data_sorted))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 35, 44, 45, 42, 38, 47, 37, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 47, 46, 44, 39, 42, 34, 36, 40, 48, 49, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.negative(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(len(data_sorted), dtype=float) + 1.0\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 45, 46, 44, 35, 40, 47, 41, 48, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if data.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.06496500968933105, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 38, 35, 40, 44, 39, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"The array contains negative numbers or NaNs\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 35, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 39, 46, 42, 49, 40, 36, 47, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.bincount(np.searchsorted(data_sorted, data)) / len(data))\n        np.arange(len(data_sorted)) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker='o', linewidth='0.25')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 35, 45, 44, 48, 42, 41, 47, 49, 36, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any():\n        raise ValueError(\"Input array should only contain non-negative numbers or NaNs.\")\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 41, 40, 39, 34, 48, 37, 35, 38, 42, 45, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if (np.nan in data) or (np.isinf(data)).any():\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(data_sorted.size) + 1) / (data_sorted.size + 1)\n        if np.sum(data) > 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 42, 38, 34, 36, 40, 46, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted) + 1) - 1\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.17693185806274414, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 48, 49, 39, 38, 34, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 49, 37, 35, 34, 41, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.any(data_sorted)\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 47, 38, 35, 49, 48, 40, 41, 46, 42, 39, 45, 37, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:  # In case of an empty array\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if data_sorted.size > 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from typing import Callable, Any", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.8138649463653564, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2299959659576416, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 35, 45, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0] * len(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 34, 37, 36, 39, 44, 49, 45, 41, 48, 35, 40, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError('Invalid data!')\n    if np.any(np.isreal(data) == False):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.arange(len(data_sorted)) + 1) / len(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(data.size), cumulative_prob, marker='o', linewidth=0)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 37, 40, 49, 34, 41, 42, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Invalid input, cannot handle negative values or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) == False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(len(data_sorted) + 1) - 1\n        if np.sum(data_sorted) > 0\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21129179000854492, "tests_passed": true, "error": null}}
{"selected_lines": [40, 46, 49, 35, 34, 45, 47, 44, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array must contain non-negative values.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=0.2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.23725175857543945, "tests_passed": true, "error": null}}
{"selected_lines": [49, 39, 35, 36, 42, 38, 46, 37, 40, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Invalid input, cannot handle negative values or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(data.size) + 1.0\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.19936180114746094, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 46, 47, 38, 39, 48, 35, 37, 36, 34, 42, 45, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.arange(data_sorted.size) + 1) / (data_sorted.size + 1)\n        if data_sorted.size\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.07018780708312988, "tests_passed": true, "error": null}}
{"selected_lines": [49, 34, 44, 38, 40, 39, 47, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if any(isinstance(item, str) for item in data.flat):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(len(data_sorted)) + 1\n        if np.any(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 40, 49, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2326509952545166, "tests_passed": true, "error": null}}
{"selected_lines": [42, 38, 48, 39, 49, 46, 47, 35, 45, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0.0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.07475590705871582, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42, 45, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0] * data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 38, 34, 36, 40, 45, 37, 42, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if data.dtype.type not in [np.int_, np.uint, np.float_, np.float64, np.float32]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) + 1\n        if np.sum(data_sorted) != 0\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 48, 37, 40, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.ones_like(data_sorted)) / len(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 45, 49, 36, 34, 37, 48, 38, 46, 42, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 41, 36, 38, 40, 47, 42, 39, 46, 37, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0]\n        np.arange(1, data.shape[0] + 1) * 100.0 / (data.shape[0] + 1.0)\n        if len(data_sorted) > 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6871581077575684, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 48, 34, 44, 42, 49, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.5065872669219971, "tests_passed": true, "error": null}}
{"selected_lines": [49, 35, 41, 36, 47, 37, 40, 42, 38, 34, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 40, 42, 41, 47, 39, 37, 35, 46, 45, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.arange(len(data_sorted) + 1) - 1\n        if len(data_sorted) != 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 34, 38, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if (np.nan in data) or (np.isinf(data)).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted)\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.32958436012268066, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 49, 47, 46, 38, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.isreal(data) == False):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.16460323333740234, "tests_passed": true, "error": null}}
{"selected_lines": [47, 40, 44, 41, 46, 38, 48, 37, 42, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size != 0\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.17152786254882812, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Invalid data!')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0] * data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.20763278007507324, "tests_passed": true, "error": null}}
{"selected_lines": [47, 37, 44, 49, 34, 40, 46, 35, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data, cumulative_prob, s=3, marker=\"o\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(np.isreal(data) == False):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 46, 45, 36, 40, 47, 44, 35, 49, 42, 34, 41, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if np.issubdtype(data.dtype, np.integer):\n        raise TypeError(\"Input array contains non-numeric data types.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(data.size, dtype=data.dtype) + 1\n        if data_sorted.size\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, marker='o', linestyle='-',\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from .plot_histogram import plot_histogram", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 39, 47, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 45, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 42, 37, 47, 36, 40, 39, 41, 44, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)) or np.any(np.less(data, 0)):\n        raise ValueError('Invalid data!')\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted) / len(data)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted) * 100\n        if len(data_sorted) > 0\n        else [0] * len(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(data_sorted, cumulative_prob, marker='o', linestyle='-')\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 49, 41, 46, 42, 34, 47, 45, 39, 44, 35, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.less(data, 0)):\n        raise ValueError('Invalid data!')\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size > 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 35, 37, 34, 48, 41, 39, 45, 38, 44, 36, 47, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array must contain non-negative values.\")\n    if np.any(np.isinf(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 46, 41, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.16793394088745117, "tests_passed": true, "error": null}}
{"selected_lines": [48, 40, 49, 45, 37, 46, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.shape[0] + 1) * 100.0 / (data.shape[0] + 1.0)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data, cumulative_prob, s=3, marker=\"o\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 45, 46, 41, 37, 42, 35, 36, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if np.any(np.isreal(data) == False):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0] * len(data)\n        np.arange(len(data_sorted) + 1) - 1\n        if np.any(data_sorted)\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 47, 39, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains either negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.7255587577819824, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 36, 46, 44, 47, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 40, 46, 34, 39, 35, 44, 47, 45, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)) or np.any(np.less(data, 0)):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.bincount(np.searchsorted(data_sorted, data)) / len(data))\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if len(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 47, 40, 35, 49, 44, 37, 41, 42, 34, 48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array must not contain negative numbers or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted))\n        if len(data_sorted) > 0\n        else np.array(\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2326509952545166, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.8135941028594971, "tests_passed": true, "error": null}}
{"selected_lines": [44, 35, 46, 41, 39, 48, 37, 49, 42, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 40, 34, 36, 37, 39, 47, 42, 45, 38, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data, cumulative_prob, s=3, marker=\"o\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 46, 35, 34, 38, 41, 40, 48, 37, 42, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if data_sorted.size != 0\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 44, 48, 38, 45, 36, 46, 40, 34, 39, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0]\n        np.arange(1, data.size + 1) / data.size * 100\n        if data_sorted.size > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># *************************************************************************************", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 37, 35, 36, 39, 42, 47, 41, 44, 48, 46, 38, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should contain only non-negative numbers\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 42, 49, 35, 39, 38, 45, 48, 36, 47, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Input array contains negative or NaNs.')\n    if data.dtype.type not in [np.int_, np.uint, np.float_, np.float64, np.float32]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.21053409576416016, "tests_passed": true, "error": null}}
{"selected_lines": [37, 47, 42, 41, 38, 39, 40, 48, 35, 44, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Data must contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 49, 46, 35, 48, 34, 36, 39, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 46, 36, 49, 47, 37, 38, 45, 42, 40, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / len(data_sorted))\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 46, 49, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6033542156219482, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1955568790435791, "tests_passed": true, "error": null}}
{"selected_lines": [47, 34, 36, 37, 39, 38, 48, 42, 44, 45, 46, 49, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:  # In case of an empty array\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from .plot_histogram import plot_histogram", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 38, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.number) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)) + 1, cumulative_prob, \"o-\", label=\"Cumulative Probability\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.44254088401794434, "tests_passed": true, "error": null}}
{"selected_lines": [47, 37, 45, 42, 46, 49, 41, 48, 34, 40, 35, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.isnan(data).any():\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(f\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data.size) + 1.0\n        if np.sum(data_sorted) > 0\n        else np.zeros(data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14847207069396973, "tests_passed": true, "error": null}}
{"selected_lines": [37, 46, 38, 40, 35, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2170109748840332, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 36, 45, 41, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(np.ones_like(data_sorted)) / len(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 35, 36, 48, 49, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should contain non-negative numbers\")\n    if np.any(np.isreal(data) == False):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 42, 47, 48, 40, 39, 44, 34, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(len(data_sorted), dtype=float) + 1.0\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.shape)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42, 39], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [np.sum(data <= i) / data_sorted.size for i in data_sorted]\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.16197586059570312, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 49, 39, 35, 45, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('Input array contains negative or NaNs.')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = data[np.argsort(data)]\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(len(data_sorted)) + 1\n        if np.sum(data_sorted) != 0\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=1, label=\"Index\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from .plot_histogram import plot_histogram", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 39, 35, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should contain non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1955568790435791, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.dtype(np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.013424873352050781, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [41, 39, 47, 40, 34, 38, 45, 42, 48, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(len(data_sorted)) + 1\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 47, 45, 35, 46, 41, 44, 42, 49, 40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.arange(len(data_sorted) + 1) - 1\n        if np.any(data_sorted)\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 40, 48, 45, 38, 34, 42, 44, 37, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.sum(data_sorted) != 0\n        else np.array([0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.14683079719543457, "tests_passed": true, "error": null}}
{"selected_lines": [45, 37, 48, 34, 39, 47, 40, 38, 46, 36, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(np.atleast_1d(data))\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.arange(len(data_sorted)) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(data.size), cumulative_prob, marker='o', linewidth=0)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 44, 45, 34, 46, 38, 37, 48, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array must be non-negative and contain no NaNs.\")\n    if data.dtype.kind not in \"iu\":\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"b\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 46, 47, 34, 41, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.3100240230560303, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 47, 41, 39, 48, 35, 34, 38, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0):\n        raise ValueError(\"Input array must contain non-negative numbers and no NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(data.size), cumulative_prob, marker='o', linewidth=0)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 46, 34, 42, 44, 35, 38, 49, 47, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError(\"Input array should contain only non-negative numbers\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if data_sorted.size\n        else np.array(data)\n    )\n    fig, ax = plt.subplots(figsize=(4, 4))\n    ax.plot(np.arange(len(data_sorted)), cumulative_prob, \"o-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1480257511138916, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 46, 47, 40, 44, 36, 37, 41, 45, 42, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input data cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.any(data)\n        else np.zeros(data_sorted.shape)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=0)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 47, 42, 34, 48, 45, 37, 41, 35, 36, 49, 39, 40, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The input array cannot contain negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.floating):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(range(1, len(cumulative_prob) + 1), cumulative_prob)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import numpy as np", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 47, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.44466304779052734, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.6368279457092285, "tests_passed": true, "error": null}}
{"selected_lines": [47, 35, 40, 34, 42, 38, 44, 41, 36, 45, 37, 49, 39, 46], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.all(data >= 0):\n        raise ValueError(\"Data cannot contain negative numbers or NaNs.\")\n    if (data.dtype != np.float64) and (data.dtype != np.int64) and (data.dtype != np.uint64) and (data.dtype != np.int32) and (data.dtype != np.uint32) and (data.dtype != np.int16) and (data.dtype != np.uint16) and (data.dtype != np.int8) and (data.dtype != np.uint8):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(len(data_sorted), dtype=float) + 1.0\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linewidth=0.2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 40, 49, 42, 41, 47, 35, 39, 48, 46, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(1, data.shape[0] + 1) * 100.0 / (data.shape[0] + 1.0)\n        if data_sorted.size\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(data, cumulative_prob, s=3, marker=\"o\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 35, 40, 47, 41, 37, 48, 36, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Invalid input, cannot handle negative values or NaNs.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 47, 39, 44, 40, 49, 45, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [sum(data_sorted[:i])/len(data_sorted) for i in range(1, len(data_sorted)+1)]\n        np.arange(1, data_sorted.size + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.array([0])\n    )\n    fig, ax = plt.subplots(figsize=(7, 4))\n    ax.plot(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=0)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.07402515411376953, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [35, 47, 48, 49, 34, 40, 46, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if len(data) == 0:\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data.size + 1) / data.size * 100\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 44, 46, 49, 38, 39, 47, 45, 35, 48, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError('The input contains either negative numbers or NaNs')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(len(data_sorted), dtype=float) + 1.0\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(np.arange(len(data)), cumulative_prob, marker=\"o\", s=10, c=\"b\", linewidths=0.5, zorder=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 42, 39, 36, 46, 45], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = [0] * len(data)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if data_sorted.size\n        else np.zeros(data_sorted.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 40, 35, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.2993619441986084, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 36, 46, 47, 41, 45, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.any(data_sorted)\n        else np.zeros(len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted) + 1) - 1\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.06931376457214355, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 45, 40, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(len(data_sorted)) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\", linewidth=2)\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.31664323806762695, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 42, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.iscomplex(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1.0 / len(data_sorted) * np.diff(data_sorted))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array([0] * data.size)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 34, 46, 35, 42, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)):\n        raise ValueError(\"The input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.1491682529449463, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 40, 36, 35, 44], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(data != data) or data.dtype.char not in 'inuf':\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.count_nonzero(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 35, 45, 42, 40, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array must contain non-negative values.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, marker='o', linestyle='-')\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.36069607734680176, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.shape[0] + 1) -\n        if len(data_sorted) > 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 38, 34, 37, 49, 39, 41, 44, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(1, data_sorted.size + 1) / data_sorted.size\n        np.arange(len(data_sorted), dtype=float) + 1.0\n        if np.sum(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|># Copyright 2020-2021 Huawei Technologies Co., Ltd", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 47, 40, 46, 45, 37], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.isinf(data).any() or np.isnan(data).any():\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(data_sorted, cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 47, 46, 45, 44, 37, 49, 40, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should only contain non-negative numbers or NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) + 1) / (data_sorted.size + 1)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", linewidth=1)\n    ax.grid()\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 39, 42, 49, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.issubdtype(data.dtype, np.integer) and not np.issubdtype(data.dtype, np.floating):\n        raise ValueError(\"Input array contains negative or NaN values.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty_like(data_sorted)\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 37, 36, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.any(~np.isreal(data)):\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data)\n    )\n    fig, ax = plt.subplots()\n    ax.scatter(data_sorted, cumulative_prob, marker=\"o\", color=\"tab:orange\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 38, 42, 47, 37, 40, 44, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype not in [int, float]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(data_sorted.size) + 1) / data_sorted.size\n        if np.sum(data_sorted) != 0\n        else np.zeros(data_sorted.shape)\n    )\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.plot(data_sorted, cumulative_prob, \"o\", markerfacecolor=\"w\", markeredgecolor=\"k\", markersize=\"3\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 47, 36, 39, 37, 48, 34, 49, 35, 38, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.floating):\n        raise TypeError(f\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(len(data_sorted))\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>import pytest", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 49, 44, 48, 41, 47], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.empty(data.shape, dtype=float)\n        np.arange(len(data_sorted)) + 1) / len(data_sorted)\n        if data_sorted.size\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 47, 39, 34, 41, 40, 44, 48, 46, 45, 35, 49, 36, 42], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(np.isnan(data)) or np.any(np.isinf(data)):\n        raise ValueError(\"Input array must contain non-negative values.\")\n    if np.issubdtype(data.dtype, np.number) is False:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) > 0\n        else np.array([0] * len(data_sorted))\n    )\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(data.size), cumulative_prob, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 39, 42, 40, 47, 49, 46, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if not np.array(data).dtype.kind.lower() in {'f', 'i', 'u', 'b', 'c', 'S'}:\n        raise ValueError('Input data contains negative numbers or NaNs')\n    if data.dtype != np.number:\n        raise TypeError(f\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data_sorted)\n        np.arange(1, len(data_sorted) + 1) / len(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array(\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 48, 37, 38, 34, 36, 39, 47, 40, 49, 44, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if data.size == 0:  # In case of an empty array\n        raise ValueError(\"Input array cannot contain negative numbers or NaNs.\")\n    if data.dtype.type not in [np.int_, np.uint, np.float_, np.float64, np.float32]:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = []\n        np.arange(1, data.shape[0] + 1) * 100.0 / (data.shape[0] + 1.0)\n        if np.sum(data_sorted) != 0\n        else np.array(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 47, 34, 45, 49, 41, 46, 37, 48, 39, 40, 38], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if data.dtype != np.number:\n        raise TypeError(\"Input array contains non-numeric inputs.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.arange(len(data_sorted) + 1) / len(data_sorted)\n        np.cumsum(np.ones_like(data_sorted) / len(data_sorted)) - np.concatenate(([0], np.diff(data_sorted)))\n        if np.sum(data_sorted) != 0\n        else [0.0 for _ in data_sorted]\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, label=\"Cumulative Prob\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 35, 47, 49, 41], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array cannot contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.arange(1, data_sorted.shape[0] + 1) -\n        if len(data_sorted) > 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 39, 47, 38, 40, 49], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n    if np.issubdtype(data.dtype, np.integer) or np.issubdtype(data.dtype, np.bool_):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = np.cumsum(1 / data.size) * 100\n        np.arange(len(data_sorted)) + 1\n        if np.sum(data_sorted) != 0\n        else np.zeros_like(data_sorted)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax<|endoftext|>from .plot_histogram import plot_histogram", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 48, 35, 38, 46, 42, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data: np.ndarray) -> plt.Axes:\n    \"\"\"\n    Plots the cumulative probability distribution of a given NumPy array of numbers,\n    representing how the cumulative probability increases with the sorted data indexes.\n\n    Parameters:\n    - data (numpy.ndarray): The input NumPy array of non-negative numbers.\n\n    Returns:\n    - matplotlib.pyplot.Axes: The plot of cumulative probabilities.\n\n    Requirements:\n    - numpy\n    - matplotlib\n\n    Raises:\n    - ValueError: If the input array contains negative numbers or NaNs.\n    - TypeError: If the input array contains non-numeric inputs.\n\n    Note:\n    - In case of an all-zeros input, the cumulative probability remains at 0 across all indexes.\n    - The plot uses marker ('o') and a solid line ('-') for the cumulative probability curve.\n    - The plot is titled \"Cumulative Probability Plot\", with \"Index\" on the x-axis and\n      \"Cumulative Probability\" on the y-axis.\n\n    Example:\n    >>> ax = task_func(np.array([1, 2, 3, 4, 5]))\n    >>> ax.get_title()\n    'Cumulative Probability Plot'\n    \"\"\"\n    if np.any(data <= 0):\n        raise ValueError(\"The input array must not contain negative numbers or NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array contains non-numeric values.\")\n    data_sorted = np.sort(data)\n    cumulative_prob = (\n        np.cumsum(data_sorted) / np.sum(data_sorted)\n        if np.sum(data_sorted) != 0\n        else np.array(data)\n    )\n    fig, ax = plt.subplots()\n    ax.plot(cumulative_prob, marker=\"o\", linestyle=\"-\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    return ax", "compilation_passed": true, "time": 0.5112969875335693, "tests_passed": true, "error": null}}
