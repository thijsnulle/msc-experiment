{"selected_lines": [37, 28, 34, 31, 33, 29, 36, 32, 38, 39, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(f\"{directory_path}/{filename}\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()[1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 30, 31, 33, 40, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 39, 41, 36, 31, 28, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 38, 37, 32, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 36, 30, 37, 29, 38, 28, 31, 33, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 38, 37, 31, 41, 32, 30, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": false, "time": 9.298324584960938e-05, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002115011215209961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [30, 29, 36, 41, 31, 38, 33, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 36, 33, 29, 31, 38, 30, 28, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 41, 33, 38, 36, 40, 30, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007175922393798828, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30, 37, 31, 40, 29, 34, 39, 28, 41, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(os.path.join(directory_path, filename)):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002235889434814453, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 32, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 29, 31, 40, 28, 34, 39, 37, 36, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 30, 29, 37, 33, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 37, 38, 41, 30, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filesize, file_type in file_scanner(directory_path):\n        if not os.path.isdir(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 37, 31, 30, 32, 38, 36, 29, 28, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isdir(os.path.join(directory_path, filename)):\n            if filename[-4:].lower() == '.txt':\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 41, 40, 28, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002160310745239258, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 28, 39, 33, 30, 32, 29, 37, 36, 41, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007242918014526367, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 40, 31, 38, 33, 37, 41, 34, 29, 30, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filepath in get_filepaths(directory_path):\n        if filename.endswith(\".txt\"):\n            if filename in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007125139236450195, "tests_passed": true, "error": null}}
{"selected_lines": [41, 31, 32, 39, 38, 33, 29, 36, 40, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 28, 36, 34, 33, 41, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 29, 32, 40, 30, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023412704467773438, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33, 36, 40, 38, 29, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.startswith('.'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for filename in os.listdir(os.path.join(directory_path, 'Invalid')) if not filename.startswith('.'))\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024170875549316406, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 37, 28, 41, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension or not extension.lower() in ['txt', 'jpg']:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0018932819366455078, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 32, 40, 37, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith(\".txt\") or filename.lower().endswith(\".jpg\"):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 37, 33, 41, 34, 39, 28, 29, 31, 38, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 37, 33, 32, 34, 39, 38, 41, 36, 28, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 39, 34, 40, 31, 28, 30, 33, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 32, 30, 36, 31, 38, 39, 28, 41, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023238658905029297, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 39, 32, 28, 34, 33, 36, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002107858657836914, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 32, 30, 36, 41, 31, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 41, 36, 28, 30, 32, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 41, 39, 33, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007008075714111328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 37, 39, 28, 30, 40, 41, 32, 34, 29, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = sum(1 for _ in os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 31, 28, 34, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 39, 30, 36, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0070841312408447266, "tests_passed": true, "error": null}}
{"selected_lines": [39, 28, 36, 37, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 30, 29, 31, 34, 38, 36, 37, 33, 39, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 29, 31, 39, 28, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 34, 30, 38, 28, 36, 40, 29, 39, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(os.path.join(directory_path, filename)):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 37, 30, 41, 32, 29, 31, 38, 36, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if \"Invalid\" not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0028238296508789062, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 39, 32, 38, 31, 29, 28, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_type in get_all_files(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary.keys():\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 28, 33, 41, 34, 31, 39, 32, 36, 40, 30, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 41, 39, 29, 37, 36, 32, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_info in os.walk(directory_path):\n        if not filename.startswith(\".\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 36, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = filename.split('.')[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002501964569091797, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002582073211669922, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 38, 36, 29, 30, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002012014389038086, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 41, 28, 32, 30, 29, 36, 31, 33, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if not os.path.isdir(filename):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 33, 39, 40, 38, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 41, 38, 29, 36, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\"txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.jpg'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 38, 33, 39, 37, 40, 30, 34, 36, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 38, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 29, 31, 32, 41, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007125139236450195, "tests_passed": true, "error": null}}
{"selected_lines": [31, 41, 38, 36, 40, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for file in os.listdir(os.path.join(directory_path, 'Invalid')) if file not in ['', '.DS_Store'])\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006987094879150391, "tests_passed": true, "error": null}}
{"selected_lines": [40, 29, 32, 34, 31, 28, 33, 39, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 28, 33, 36, 39, 29, 30, 37, 32, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 34, 38, 32, 36, 30, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007264137268066406, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 39, 38, 41, 33, 31, 40, 30, 37, 36, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 34, 36, 29, 38, 30, 37, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 37, 40, 41, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for filename in os.listdir(os.path.join(directory_path, 'Invalid')) if not filename.startswith('.'))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006926774978637695, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 41, 29, 38, 30, 37, 39, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.jpg'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 30, 28, 29, 34, 39, 32, 38, 37, 31, 33, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 36, 28, 31, 29, 34, 37, 38, 33, 39, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\"txt\"):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0018849372863769531, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 32, 34, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith(\".txt\") or filename.lower().endswith(\".jpg\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023488998413085938, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 33, 36, 29, 28, 34, 39, 30, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 41, 31, 34, 30, 37, 36, 29, 39, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 31, 40, 33, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 37, 30, 28, 33, 32, 41, 29, 34, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007214069366455078, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002103090286254883, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [32, 38, 37, 34, 28, 29, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002373218536376953, "tests_passed": true, "error": null}}
{"selected_lines": [38, 28, 33, 29, 41, 37, 30, 34, 36, 39, 31, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_info in os.walk(directory_path):\n        if os.path.isfile(filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.003000020980834961, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007269144058227539, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 32, 31, 39, 30, 28, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 37, 40, 39, 38, 31, 29, 34, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filesize, file_type in file_scanner(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 28, 40, 32, 36, 33, 29, 34, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0021550655364990234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30, 39, 34, 36, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = filename.split('.')[-1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002763032913208008, "tests_passed": true, "error": null}}
{"selected_lines": [38, 28, 37, 40, 30, 34, 33, 32, 41, 31, 36, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 28, 39, 40, 38, 29, 32, 36, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 31, 38, 39, 29, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007124185562133789, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 37, 30, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0071680545806884766, "tests_passed": true, "error": null}}
{"selected_lines": [38, 28, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023729801177978516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31, 29, 39, 33, 41, 36, 38, 37, 40, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006866931915283203, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024929046630859375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 32, 30, 38, 29, 40, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 34, 28, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for filename in os.listdir(os.path.join(directory_path, 'Invalid')) if not filename.startswith('.'))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 39, 31, 29, 41, 37, 38, 32, 28, 36, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 29, 31, 34, 36, 40, 32, 33, 28, 39, 38, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 30, 38, 39, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 34, 39, 31, 36, 38, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = filename.split('.')[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0018699169158935547, "tests_passed": true, "error": null}}
{"selected_lines": [29, 40, 33, 39, 30, 32, 37, 34, 38, 31, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.isdir(filename):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = sum(1 for file in os.listdir(os.path.join(directory_path, 'Invalid')) if file not in ['', '.DS_Store'])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 37, 34, 40, 30, 32, 39, 33, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 39, 30, 38, 29, 36, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.startswith(\".\"):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 30, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith(\".txt\") or filename.lower().endswith(\".jpg\"):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 36, 28, 41, 29, 37, 30, 40, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006822347640991211, "tests_passed": true, "error": null}}
{"selected_lines": [29, 41, 34, 38, 31, 37, 32, 39, 36, 28, 30, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007221698760986328, "tests_passed": true, "error": null}}
{"selected_lines": [38, 31, 32, 28, 30, 40, 34, 36, 37, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.startswith(\".\"):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023729801177978516, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 33, 31, 29, 41, 39, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 34, 40, 33, 41, 29, 30, 32, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename, file_type in get_all_files(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if filename.lower().startswith(\"invalid\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 38, 37, 29, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 41, 33, 36, 28, 39, 31, 37, 38, 29, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002173900604248047, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007252931594848633, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 28, 33, 29, 36, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 30, 33, 39, 31, 40, 32, 29, 34, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' in summary.keys():\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 28, 29, 31, 32, 34, 37, 30, 36, 40, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if filename in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = sum(1 for filename in os.listdir(os.path.join(directory_path, 'Invalid')) if not filename.startswith('.'))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 40, 29, 41, 36, 28, 33, 37, 30, 34, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if filename.lower().startswith(\"invalid\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0069580078125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 31, 28, 38, 36, 37, 29, 30, 34, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for file in os.listdir(os.path.join(directory_path, 'Invalid')) if file not in ['', '.DS_Store'])\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 36, 37, 33, 38, 40, 39, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 33, 28, 40, 41, 37, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006754159927368164, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 29, 34, 31, 36, 38, 32, 40, 37, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007194995880126953, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 32, 38, 34, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002619028091430664, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 31, 37, 41, 39, 40, 38, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 28, 32, 37, 40, 39, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00708460807800293, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 33, 31, 28, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if 'Invalid' not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022530555725097656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 40, 34, 38, 36, 37, 28, 29, 31, 41, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023729801177978516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 41, 36, 40, 29, 32, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[-1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 29, 39, 36, 40, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_type in get_all_files(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 31, 28, 29, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(os.path.join(directory_path, filename)):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": false, "time": 9.298324584960938e-05, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [33, 28, 38, 40, 37, 31, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007058858871459961, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 34, 28, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith(('.txt', '.jpg')):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0020558834075927734, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 28, 38, 30, 40, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith(\".txt\") or filename.lower().endswith(\".jpg\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023179054260253906, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 32, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007221698760986328, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.004337310791015625, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [34, 31, 28, 32, 40, 33, 30, 41, 37, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38, 39, 29, 31, 40, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 34, 36, 40, 37, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith(\".txt\") or filename.lower().endswith(\".jpg\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()[1:]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 30, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0017900466918945312, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [39, 41, 30, 40, 38, 29, 34, 32, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0020449161529541016, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0018298625946044922, "tests_passed": true, "error": null}}
{"selected_lines": [30, 39, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 28, 40, 31, 33, 41, 32, 30, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 32, 33, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023717880249023438, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 28, 31, 29, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007214069366455078, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 34, 36, 40, 41, 29, 32, 30, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0018892288208007812, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 36, 33, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022089481353759766, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 31, 29, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_type in get_all_files(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [28, 41, 33, 36, 37, 39, 29, 31, 40, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename, file_type in get_all_files(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if filename.lower().startswith(\"invalid\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 33, 34, 41, 32, 28, 39, 30, 38, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for _ in os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 30, 40, 41, 29, 31, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 32, 40, 39, 30, 41, 29, 34, 28, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002370119094848633, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 28, 41, 29, 37, 39, 32, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 34, 28, 39, 41, 29, 32, 33, 30, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filepath in get_filepaths(directory_path):\n        if not filename.startswith(\".\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 33, 31, 30, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022270679473876953, "tests_passed": true, "error": null}}
{"selected_lines": [41, 30, 38, 36, 39, 28, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023119449615478516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 34, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename.lower().startswith(\"invalid\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023260116577148438, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 40, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith(\".txt\") or filename.lower().endswith(\".jpg\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 37, 39, 32, 30, 38, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0026891231536865234, "tests_passed": true, "error": null}}
{"selected_lines": [39, 28, 33, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 30, 38, 36, 39, 37, 41, 29, 28, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002079010009765625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 28, 40, 31, 36, 41, 34, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename.lower().startswith(\"invalid\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007315874099731445, "tests_passed": true, "error": null}}
{"selected_lines": [40, 29, 34, 28, 36, 32, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 36, 37, 30, 33, 29, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 30, 29, 41, 34, 28, 31, 38, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 32, 38, 34, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 41, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024077892303466797, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 37, 33, 38, 41, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024290084838867188, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.004282951354980469, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [41, 32, 31, 33, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002191781997680664, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 31, 39, 29, 33, 40, 37, 30, 28, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith(('.txt', '.jpg')):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 30, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith(('.txt', '.jpg')):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 32, 31, 38, 30, 29, 39, 34, 33, 28, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if 'Invalid' in summary.keys():\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 28, 33, 40, 31, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.jpg'):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0064160823822021484, "tests_passed": true, "error": null}}
{"selected_lines": [40, 30, 32, 33, 29, 34, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": false, "time": 9.298324584960938e-05, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 39, 36, 32, 30, 31, 38, 33, 34, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002228975296020508, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 36, 38, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002274751663208008, "tests_passed": true, "error": null}}
{"selected_lines": [28, 41, 34, 32, 39, 30, 37, 29, 36, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename, file_info in os.walk(directory_path):\n        if filename.endswith(\".txt\"):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 28, 41, 29, 31, 40, 34, 39, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_info in os.walk(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007139921188354492, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 36, 37, 38, 40, 39, 32, 31, 33, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 33, 29, 41, 39, 28, 37, 34, 32, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filepath in get_filepaths(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary.keys():\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 39, 28, 38, 41, 36, 31, 33, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in os.listdir(directory_path):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 40, 36, 39, 32, 41, 38, 37, 31, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.startswith(\".\"):\n            if not os.path.isdir(f\"{directory_path}/{filename}\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 32, 30, 29, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023241043090820312, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 41, 30, 28, 31, 34, 38, 32, 40, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension or not extension.lower() in ['txt', 'jpg']:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007859945297241211, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.003000020980834961, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [36, 29, 38, 41, 37, 33, 32, 39, 28, 40, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename, file_type in get_all_files(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 41, 31, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(os.path.join(directory_path, filename)):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 38, 30, 40, 31, 28, 37, 39, 41, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary.keys():\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for filename in os.listdir(os.path.join(directory_path, 'Invalid')) if not filename.startswith('.'))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 28, 34, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 31, 40, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0021119117736816406, "tests_passed": true, "error": null}}
{"selected_lines": [31, 41, 32, 30, 37, 34, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0071468353271484375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 39, 34, 28, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith(('.txt', '.jpg')):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022242069244384766, "tests_passed": true, "error": null}}
{"selected_lines": [39, 29, 32, 38, 34, 31, 41, 30, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filepath in get_filepaths(directory_path):\n        if os.path.isfile(filename):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 41, 34, 40, 37, 36, 28, 31, 29, 32, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002657175064086914, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 41, 30, 40, 34, 33, 31, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 28, 34, 40, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 38, 28, 33, 39, 36, 34, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002131938934326172, "tests_passed": true, "error": null}}
{"selected_lines": [41, 30, 39, 33, 37, 31, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 33, 41, 28, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006762027740478516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 32, 34, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 34, 31, 30, 28, 38, 41, 39, 36, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 41, 40, 31, 39, 36, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 29, 31, 28, 39, 32, 40, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 41, 40, 36, 39, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[-1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007124185562133789, "tests_passed": true, "error": null}}
{"selected_lines": [39, 28, 36, 40, 37, 31, 34, 41, 29, 38, 33, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 37, 32, 33, 39, 34, 36, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 30, 41, 31, 28, 32, 36, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0021538734436035156, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 29, 28, 30, 34, 32, 31, 41, 40, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 37, 39, 38, 30, 29, 28, 34, 40, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith(\".txt\") or filename.lower().endswith(\".jpg\"):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002063751220703125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 36, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006826162338256836, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 33, 37, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0019240379333496094, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 32, 34, 33, 38, 40, 39, 29, 41, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('txt'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002293825149536133, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 28, 40, 29, 31, 41, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007416248321533203, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 33, 30, 40, 34, 39, 41, 31, 29, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if not os.path.isfile(filename):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 41, 30, 31, 32, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 36, 29, 40, 38, 33, 28, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00780797004699707, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 36, 41, 31, 37, 30, 38, 40, 32, 29, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 28, 34, 31, 32, 33, 36, 41, 29, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary.keys():\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 36, 34, 30, 38, 40, 32, 33, 39, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if 'Invalid' in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 33, 37, 38, 40, 30, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\"txt\"):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022869110107421875, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 32, 36, 28, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002389669418334961, "tests_passed": true, "error": null}}
{"selected_lines": [28, 30, 29, 39, 36, 37, 34, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002174854278564453, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 36, 29, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 29, 31, 36, 33, 38, 41, 37, 30, 28, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022029876708984375, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith(('.txt', '.jpg')):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0025222301483154297, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 37, 30, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006756782531738281, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 36, 33, 28, 29, 37, 30, 39, 32, 40, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_type in get_all_files(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if filename.lower().startswith(\"invalid\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": false, "time": 9.298324584960938e-05, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40, 36, 30, 29, 28, 38, 37, 41, 39, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\"txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023241043090820312, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 34, 29, 39, 36, 38, 28, 30, 40, 41, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if not filename.startswith(\".\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [28, 37, 33, 34, 41, 36, 38, 39, 40, 31, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filesize, file_type in file_scanner(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].lower()[1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 30, 41, 28, 39, 38, 36, 32, 31, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 37, 38, 40, 30, 36, 29, 31, 32, 39, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 34, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002135038375854492, "tests_passed": true, "error": null}}
{"selected_lines": [41, 29, 36, 30, 39, 31, 34, 40, 28, 33, 32, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0019638538360595703, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 34, 38, 31, 30, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 38, 30, 33, 29, 40, 28, 41, 39, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023450851440429688, "tests_passed": true, "error": null}}
{"selected_lines": [41, 32, 36, 34, 29, 31, 30, 33, 37, 28, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.startswith(\".\"):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022971630096435547, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [39, 30, 34, 33, 41, 36, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002580881118774414, "tests_passed": true, "error": null}}
{"selected_lines": [31, 41, 40, 34, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 36, 29, 37, 32, 28, 38, 40, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\"txt\"):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00708460807800293, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31, 32, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007668972015380859, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary.keys():\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0019450187683105469, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [41, 31, 29, 28, 34, 33, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for _ in os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0072209835052490234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 32, 33, 29, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00705409049987793, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 34, 39, 28, 29, 31, 41, 40, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 40, 39, 36, 31, 32, 38, 28, 41, 34, 33, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for _ in os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006786823272705078, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 41, 39, 30, 38, 37, 34, 29, 33, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = filename.split('.')[-1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 38, 31, 33, 41, 32, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 33, 31, 39, 34, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 30, 32, 38, 31, 34, 40, 33, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023641586303710938, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 34, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002135038375854492, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 40, 36, 31, 29, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isdir(os.path.join(directory_path, filename)):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 29, 34, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = filename.split('.')[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002064228057861328, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_type in get_all_files(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0018711090087890625, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [41, 36, 34, 32, 29, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00714111328125, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 28, 34, 37, 39, 32, 38, 40, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\"txt\"):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [41, 32, 31, 33, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002191781997680664, "tests_passed": true, "error": null}}
{"selected_lines": [28, 37, 34, 38, 30, 41, 33, 31, 39, 29, 36, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if not filename.endswith(('.txt', '.jpg')):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 31, 41, 38, 30, 33, 40, 36, 37, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isdir(os.path.join(directory_path, filename)):\n            if 'Invalid' not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024840831756591797, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022089481353759766, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 34, 28, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022161006927490234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 41, 38, 31, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38, 33, 41, 34, 28, 36, 40, 37, 31, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0018842220306396484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 40, 39, 33, 41, 38, 29, 31, 32, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 28, 40, 31, 41, 36, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007709980010986328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 36, 30, 34, 39, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007125139236450195, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 39, 30, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 30, 29, 31, 40, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 29, 36, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[-1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00693202018737793, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 40, 30, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isdir(os.path.join(directory_path, filename)):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 41, 37, 32, 30, 39, 38, 31, 34, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002249002456665039, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 33, 31, 36, 41, 30, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023031234741210938, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 39, 41, 33, 37, 29, 31, 34, 38, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith('.'):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 37, 41, 32, 36, 33, 28, 38, 29, 30, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(f\"{directory_path}/{filename}\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 37, 28, 34, 40, 39, 38, 32, 31, 41, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filesize, file_type in file_scanner(directory_path):\n        if filename.lower().endswith('.txt'):\n            if 'Invalid' in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [31, 39, 33, 28, 30, 36, 34, 40, 29, 41, 38, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(os.path.join(directory_path, filename)):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 37, 34, 41, 36, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 40, 37, 31, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": false, "time": 0.0001430511474609375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39, 30, 36, 37, 29, 34, 33, 38, 32, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002067089080810547, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 34, 36, 29, 39, 30, 28, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('txt'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023429393768310547, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 30, 41, 31, 33, 39, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('txt'):\n            if filename not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [29, 40, 39, 31, 28, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 29, 32, 40, 31, 39, 38, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002010822296142578, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [30, 34, 41, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002357959747314453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 38, 29, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_type in get_all_files(directory_path):\n        if not os.path.isdir(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 28, 30, 40, 29, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[-1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 33, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0019392967224121094, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [28, 39, 31, 30, 34, 37, 29, 32, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 40, 37, 31, 38, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filesize, file_type in file_scanner(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": false, "time": 0.000148773193359375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [29, 33, 30, 36, 41, 38, 31, 37, 28, 32, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007050037384033203, "tests_passed": true, "error": null}}
{"selected_lines": [39, 29, 31, 34, 33, 36, 30, 37, 28, 41, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filepath in get_filepaths(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.isdir(f\"{directory_path}/{filename}\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for filename in os.listdir(os.path.join(directory_path, 'Invalid')) if not filename.startswith('.'))\n        else:\n            extension = filename.split('.')[-1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 30, 38, 32, 41, 29, 40, 33, 39, 37, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002225160598754883, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 37, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 39, 37, 31, 41, 38, 28, 32, 40, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007998943328857422, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 34, 41, 40, 30, 38, 29, 28, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007124185562133789, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 38, 28, 37, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002201080322265625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 41, 39, 34, 40, 38, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 29, 31, 33, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(f\"{directory_path}/{filename}\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 38, 41, 31, 36, 39, 28, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0018939971923828125, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [30, 39, 38, 34, 40, 36, 29, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023550987243652344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 29, 38, 40, 31, 36, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006719112396240234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 33, 37, 30, 29, 32, 39, 36, 28, 38, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0016481876373291016, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[-1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006994962692260742, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 34, 40, 31, 32, 29, 41, 37, 36, 39, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = filename.split('.')[-1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0018222332000732422, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 41, 33, 40, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 39, 34, 40, 31, 30, 41, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024929046630859375, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002501964569091797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006854057312011719, "tests_passed": true, "error": null}}
{"selected_lines": [32, 28, 41, 36, 40, 33, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002434968948364258, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 41, 29, 28, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 28, 40, 39, 37, 31, 38, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007433891296386719, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006901979446411133, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 33, 31, 28, 30, 38, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 28, 34, 30, 33, 38, 40, 39, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 40, 41, 29, 31, 38, 39, 32, 28, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 30, 39, 40, 28, 38, 36, 29, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 41, 34, 36, 32, 31, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_type in get_all_files(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename[-4:].lower() == '.txt':\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 30, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.startswith(\".\"):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 31, 39, 30, 32, 36, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": false, "time": 9.298324584960938e-05, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0026769638061523438, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 32, 41, 31, 30, 37, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if \"Invalid\" not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00249481201171875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 31, 41, 29, 30, 36, 32, 28, 37, 34, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 30, 32, 29, 31, 39, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for file in os.listdir(os.path.join(directory_path, 'Invalid')) if file not in ['', '.DS_Store'])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002554178237915039, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 30, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002103090286254883, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 32, 40, 39, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0019447803497314453, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 29, 28, 41, 36, 33, 38, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith(('.txt', '.jpg')):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 40, 41, 31, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 28, 40, 29, 33, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0019307136535644531, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 39, 38, 40, 33, 28, 29, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isdir(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006790876388549805, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 29, 28, 41, 37, 40, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00254058837890625, "tests_passed": true, "error": null}}
{"selected_lines": [28, 39, 31, 38, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isdir(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007025241851806641, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 39, 29, 31, 33, 28, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 28, 37, 36, 41, 30, 38, 34, 32, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\"txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 28, 41, 33, 34, 37, 31, 40, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for file in os.listdir(os.path.join(directory_path, 'Invalid')) if file not in ['', '.DS_Store'])\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023310184478759766, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 40, 38, 32, 41, 28, 36, 29, 33, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if \"Invalid\" not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 36, 37, 40, 39, 41, 31, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 28, 32, 39, 38, 30, 40, 36, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022802352905273438, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 29, 41, 36, 39, 31, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 36, 37, 29, 30, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_type in get_all_files(directory_path):\n        if filename.startswith('.'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 30, 39, 38, 34, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024421215057373047, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": false, "time": 0.000148773193359375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [40, 34, 30, 39, 36, 32, 33, 41, 38, 31, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 36, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isdir(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007513999938964844, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007125139236450195, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 32, 41, 31, 28, 40, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename[-4:].lower() == '.txt':\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 32, 36, 37, 30, 38, 29, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 36, 40, 30, 41, 34, 29, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022292137145996094, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for file in os.listdir(os.path.join(directory_path, 'Invalid')) if file not in ['', '.DS_Store'])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007323741912841797, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 32, 31, 39, 40, 30, 38, 36, 37, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007048130035400391, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 33, 29, 34, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022459030151367188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [28, 36, 39, 31, 30, 33, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 41, 31, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 40, 33, 34, 37, 28, 29, 30, 39, 38, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_info in os.walk(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[-1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [29, 40, 38, 30, 34, 41, 33, 36, 31, 28, 37, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename, file_info in os.walk(directory_path):\n        if not filename.startswith(\".\"):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0069580078125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 41, 36, 32, 39, 31, 38, 37, 40, 33, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if \"Invalid\" not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024449825286865234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 38, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for filename in os.listdir(os.path.join(directory_path, 'Invalid')) if not filename.startswith('.'))\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002501964569091797, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 34, 33, 30, 32, 41, 29, 40, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 34, 37, 28, 40, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006877899169921875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0071637630462646484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 37, 33, 32, 29, 40, 34, 28, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\"txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 41, 36, 33, 31, 29, 40, 30, 34, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0077860355377197266, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 33, 30, 31, 28, 38, 39, 37, 41, 34, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith(\".txt\") or filename.lower().endswith(\".jpg\"):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0025742053985595703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 29, 33, 38, 41, 31, 28, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(f\"{directory_path}/{filename}\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": false, "time": 0.000148773193359375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [29, 40, 41, 38, 30, 31, 39, 28, 36, 34, 33, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002538919448852539, "tests_passed": true, "error": null}}
{"selected_lines": [37, 28, 31, 29, 36, 41, 38, 32, 30, 40, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename, file_info in os.walk(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if \"Invalid\" not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 30, 28, 33, 40, 39, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension or not extension.lower() in ['txt', 'jpg']:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 33, 38, 29, 31, 37, 30, 28, 41, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith('.'):\n            if \"Invalid\" not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.001968860626220703, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007214069366455078, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 37, 32, 38, 29, 36, 41, 40, 34, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 31, 38, 33, 30, 37, 36, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = sum(1 for file in os.listdir(os.path.join(directory_path, 'Invalid')) if file not in ['', '.DS_Store'])\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 29, 39, 30, 31, 33, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 37, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 29, 33, 31, 38, 41, 39, 28, 37, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename, file_info in os.walk(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension or not extension.lower() in ['txt', 'jpg']:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007158994674682617, "tests_passed": true, "error": null}}
{"selected_lines": [29, 39, 37, 31, 38, 36, 40, 34, 30, 32, 33, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 40, 38, 32, 29, 31, 28, 41, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 40, 33, 41, 32, 29, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_type in get_all_files(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00708460807800293, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 29, 31, 34, 28, 32, 40, 37, 41, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if filename in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 39, 40, 29, 36, 32, 31, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isdir(os.path.join(directory_path, filename)):\n            if filename[-4:].lower() == '.txt':\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[-1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0069580078125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 36, 41, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()[1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00708460807800293, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 28, 30, 34, 40, 38, 36, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith(\".txt\") or filename.lower().endswith(\".jpg\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023238658905029297, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007125139236450195, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 31, 39, 32, 29, 40, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_type in get_all_files(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 29, 28, 39, 33, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002115964889526367, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007122993469238281, "tests_passed": true, "error": null}}
{"selected_lines": [30, 40, 36, 34, 39, 32, 28, 37, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith(('.txt', '.jpg')):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00226593017578125, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 28, 31, 37, 30, 34, 39, 41, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 31, 34, 36, 29, 39, 30, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 34, 28, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 37, 36, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022001266479492188, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0071680545806884766, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 33, 28, 40, 41, 37, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006754159927368164, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 33, 34, 29, 28, 37, 32, 40, 39, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[-1]\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 40, 37, 30, 29, 32, 36, 28, 38, 39, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 28, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024352073669433594, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00708460807800293, "tests_passed": true, "error": null}}
{"selected_lines": [34, 28, 30, 38, 40, 31, 37, 41, 39, 29, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0019519329071044922, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 39, 29, 40, 41, 34, 37, 33, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002315998077392578, "tests_passed": true, "error": null}}
{"selected_lines": [31, 40, 34, 32, 41, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 39, 40, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 28, 40, 39, 37, 31, 38, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007433891296386719, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007148027420043945, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002543926239013672, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34, 37, 31, 38, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0072040557861328125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 32, 28, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for filename in os.listdir(os.path.join(directory_path, 'Invalid')) if not filename.startswith('.'))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002536773681640625, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 31, 30, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 38, 41, 36, 34, 33, 30, 37, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = sum(1 for _ in os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007754802703857422, "tests_passed": true, "error": null}}
{"selected_lines": [29, 39, 40, 30, 31, 33, 41, 36, 32, 37, 34, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 29, 39, 36, 31, 40, 38, 41, 28, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 37, 29, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022170543670654297, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 41, 34, 31, 37, 32, 28, 40, 29, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('txt'):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002457857131958008, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 29, 30, 28, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023229122161865234, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 31, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0070667266845703125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 28, 40, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002390146255493164, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 32, 41, 28, 36, 31, 38, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 39, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filesize, file_type in file_scanner(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 36, 28, 40, 37, 29, 38, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 28, 31, 36, 33, 30, 38, 41, 39, 37, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002353191375732422, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": false, "time": 9.298324584960938e-05, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [36, 34, 31, 40, 30, 29, 41, 37, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 32, 40, 29, 36, 30, 37, 34, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith(\".txt\") or filename.lower().endswith(\".jpg\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 31, 28, 33, 36, 38, 34, 39, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 28, 36, 33, 40, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022389888763427734, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 41, 38, 36, 30, 40, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('txt'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024518966674804688, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 40, 37, 30, 31, 28, 32, 39, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023529529571533203, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 38, 28, 30, 34, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.startswith(\".\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0020520687103271484, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007125139236450195, "tests_passed": true, "error": null}}
{"selected_lines": [40, 30, 29, 38, 37, 31, 28, 32, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0070841312408447266, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 39, 30, 28, 31, 37, 34, 33, 40, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filepath in get_filepaths(directory_path):\n        if filename.lower().endswith('.txt'):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not extension or not extension.lower() in ['txt', 'jpg']:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [38, 30, 34, 37, 29, 33, 31, 36, 28, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\"txt\"):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 31, 34, 36, 38, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for filename in os.listdir(os.path.join(directory_path, 'Invalid')) if not filename.startswith('.'))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.008185863494873047, "tests_passed": true, "error": null}}
{"selected_lines": [40, 30, 33, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.jpg'):\n            if 'Invalid' in summary.keys():\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 28, 33, 39, 38, 29, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007252931594848633, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 41, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002393960952758789, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 30, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007877826690673828, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 30, 34, 32, 31, 40, 38, 37, 36, 39, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith(('.txt', '.jpg')):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 40, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith(('.txt', '.jpg')):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023560523986816406, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 38, 30, 29, 34, 41, 39, 28, 40, 33, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith('.'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023627281188964844, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 37, 40, 30, 28, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002143383026123047, "tests_passed": true, "error": null}}
{"selected_lines": [41, 28, 38, 37, 40, 39, 36, 32, 30, 31, 34, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\"txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002660036087036133, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 29, 33, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[-1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023589134216308594, "tests_passed": true, "error": null}}
{"selected_lines": [29, 40, 38, 37, 30, 32, 28, 39, 34, 36, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 36, 38, 30, 32, 39, 40, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0020639896392822266, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 33, 32, 29, 41, 31, 37, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0070078372955322266, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 33, 29, 41, 34, 28, 38, 39, 40, 37, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if 'Invalid' not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0018622875213623047, "tests_passed": true, "error": null}}
{"selected_lines": [41, 32, 38, 39, 30, 37, 34, 31, 28, 40, 36, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for _ in os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = filename.split('.')[-1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 39, 40, 34, 33, 37, 36, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 37, 38, 36, 40, 31, 28, 39, 34, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 37, 29, 36, 40, 28, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for _ in os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 34, 31, 40, 30, 32, 37, 38, 28, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for filename in os.listdir(os.path.join(directory_path, 'Invalid')) if not filename.startswith('.'))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007252931594848633, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 41, 30, 34, 28, 38, 31, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024080276489257812, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 29, 36, 40, 41, 33, 37, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()[1:]\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(f\"{directory_path}/{filename}\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00213623046875, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [37, 28, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0021810531616210938, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00249481201171875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 28, 36, 29, 30, 41, 34, 40, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary.keys():\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00249481201171875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 41, 29, 28, 38, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.isdir(f\"{directory_path}/{filename}\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 34, 38, 37, 40, 31, 33, 32, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filesize, file_type in file_scanner(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 37, 31, 30, 40, 36, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 37, 30, 32, 31, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 31, 32, 30, 38, 28, 40, 41, 29, 39, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if 'Invalid' not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002471923828125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 41, 33, 32, 37, 29, 30, 40, 38, 28, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 40, 32, 28, 33, 38, 41, 31, 36, 34, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002382040023803711, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 32, 36, 30, 33, 38, 41, 28, 34, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002357006072998047, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00708460807800293, "tests_passed": true, "error": null}}
{"selected_lines": [28, 39, 36, 31, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename.lower().startswith(\"invalid\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002439260482788086, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 38, 39, 31, 33, 28, 37, 36, 40, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 30, 31, 39, 37, 33, 32, 34, 28, 29, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 33, 30, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 32, 37, 30, 38, 31, 36, 39, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isdir(os.path.join(directory_path, filename)):\n            if 'Invalid' in os.listdir(directory_path):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension or not extension.lower() in ['txt', 'jpg']:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 31, 34, 29, 36, 39, 40, 32, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0018210411071777344, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [30, 39, 32, 38, 40, 28, 36, 33, 31, 34, 37, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 28, 39, 40, 32, 33, 29, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = sum(1 for file in os.listdir(os.path.join(directory_path, 'Invalid')) if file not in ['', '.DS_Store'])\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0021948814392089844, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 32, 34, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 39, 37, 33, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 29, 30, 37, 41, 32, 40, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if 'Invalid' not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023522377014160156, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 39, 33, 34, 29, 32, 28, 41, 31, 37, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002307891845703125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 34, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002135038375854492, "tests_passed": true, "error": null}}
{"selected_lines": [30, 38, 33, 37, 31, 29, 41, 39, 40, 36, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith('.'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 41, 39, 34, 29, 33, 32, 38, 30, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith(\".txt\") or filename.lower().endswith(\".jpg\"):\n            if not os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 29, 33, 38, 30, 36, 40, 32, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.jpg'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024061203002929688, "tests_passed": true, "error": null}}
{"selected_lines": [37, 30, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.001967906951904297, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002103090286254883, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [31, 32, 37, 39, 41, 30, 33, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007081031799316406, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00708460807800293, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 40, 38, 28, 37, 33, 39, 34, 36, 41, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 32, 33, 28, 36, 30, 31, 41, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 28, 39, 34, 30, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007178783416748047, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 28, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007021188735961914, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 28, 31, 41, 34, 37, 33, 32, 38, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 28, 38, 29, 31, 30, 41, 39, 36, 40, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for filename in os.listdir(os.path.join(directory_path, 'Invalid')) if not filename.startswith('.'))\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 28, 38, 41, 34, 31, 37, 29, 36, 39, 32, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = filename.split('.')[-1]\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024492740631103516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 33, 29, 37, 39, 28, 40, 38, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 30, 32, 41, 28, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0027780532836914062, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 40, 37, 41, 39, 30, 32, 33, 38, 36, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if not os.path.isdir(f\"{directory_path}/{filename}\"):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 40, 38, 37, 39, 29, 28, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith(\".txt\") or filename.lower().endswith(\".jpg\"):\n            if not os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 29, 40, 37, 39, 33, 36, 34, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023450851440429688, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 41, 39, 33, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007008075714111328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": false, "time": 9.298324584960938e-05, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 28, 37, 40, 30, 41, 34, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002359151840209961, "tests_passed": true, "error": null}}
{"selected_lines": [31, 39, 38, 36, 37, 32, 28, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 29, 33, 39, 40, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00694584846496582, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 32, 36, 39, 29, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_type in get_all_files(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 36, 37, 29, 41, 40, 38, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 29, 32, 31, 33, 39, 28, 37, 30, 38, 40, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('txt'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 33, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 30, 31, 29, 38, 34, 28, 37, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension or not extension.lower() in ['txt', 'jpg']:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 28, 41, 39, 29, 37, 36, 30, 34, 33, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename, file_type in get_all_files(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename.lower().startswith(\"invalid\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 34, 30, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith('.'):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 28, 37, 40, 29, 34, 30, 32, 36, 39, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 30, 39, 31, 32, 34, 41, 40, 37, 33, 29, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if 'Invalid' in os.listdir(directory_path):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 41, 31, 33, 36, 38, 37, 30, 40, 34, 39, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith(('.txt', '.jpg')):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.startswith(\".\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006840229034423828, "tests_passed": true, "error": null}}
{"selected_lines": [28, 38, 30, 29, 32, 41, 33, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if filename.startswith('.'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0019807815551757812, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0026340484619140625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 28, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 29, 28, 40, 30, 31, 33, 37, 38, 34, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_type in get_all_files(directory_path):\n        if filename.endswith(\".txt\"):\n            if os.path.isfile(filename):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 30, 32, 41, 37, 33, 39, 40, 38, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0027108192443847656, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00705409049987793, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 37, 30, 28, 36, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007010221481323242, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 34, 36, 38, 33, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 31, 28, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 40, 28, 38, 39, 36, 33, 32, 30, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 40, 41, 34, 36, 31, 28, 32, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 29, 31, 36, 32, 40, 41, 30, 33, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('txt'):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 33, 30, 31, 34, 28, 37, 38, 32, 40, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filepath in get_filepaths(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for file in os.listdir(os.path.join(directory_path, 'Invalid')) if file not in ['', '.DS_Store'])\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 39, 38, 36, 37, 40, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007899999618530273, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 29, 34, 32, 41, 28, 30, 38, 40, 36, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(os.path.join(directory_path, filename)):\n            if not os.path.isdir(filename):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 37, 41, 31, 38, 33, 32, 39, 34, 40, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 30, 37, 32, 29, 41, 40, 39, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if \"Invalid\" not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007269144058227539, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith(('.txt', '.jpg')):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0025222301483154297, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 34, 30, 39, 32, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002373218536376953, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [41, 32, 30, 31, 36, 28, 34, 39, 37, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0019299983978271484, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [39, 28, 34, 30, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023050308227539062, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 31, 40, 30, 38, 29, 28, 36, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 39, 28, 41, 36, 34, 29, 38, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 38, 29, 32, 40, 28, 31, 39, 36, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if filename.lower().startswith(\"invalid\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension or not extension.lower() in ['txt', 'jpg']:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 28, 38, 32, 30, 31, 40, 29, 36, 41, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if os.path.isfile(filename):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 36, 29, 28, 37, 34, 38, 33, 40, 30, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 39, 31, 38, 29, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 31, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(os.path.join(directory_path, filename)):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 32, 33, 31, 30, 37, 40, 29, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 41, 37, 36, 34, 29, 40, 39, 30, 31, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 41, 36, 37, 33, 34, 28, 39, 38, 40, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for _ in os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007642984390258789, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 36, 37, 34, 31, 32, 30, 39, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 33, 32, 29, 39, 31, 28, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007810831069946289, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 29, 41, 39, 37, 32, 36, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 32, 37, 31, 40, 29, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 28, 30, 33, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = sum(1 for file in os.listdir(os.path.join(directory_path, 'Invalid')) if file not in ['', '.DS_Store'])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 30, 39, 31, 36, 29, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isdir(os.path.join(directory_path, filename)):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006915092468261719, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 28, 41, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002537965774536133, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31, 41, 37, 33, 36, 29, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 28, 41, 34, 29, 40, 37, 33, 32, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 30, 41, 38, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 37, 41, 29, 40, 31, 30, 32, 33, 39, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not filename.startswith(\".\"):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 29, 34, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 40, 39, 28, 36, 31, 37, 38, 29, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filesize, file_type in file_scanner(directory_path):\n        if filename.endswith('.jpg'):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 28, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007021188735961914, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 39, 33, 28, 31, 40, 38, 36, 29, 30, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007269144058227539, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 36, 32, 41, 28, 39, 38, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(os.path.join(directory_path, filename)):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 32, 39, 36, 30, 41, 37, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\"txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007221698760986328, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 41, 33, 37, 39, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 34, 41, 38, 39, 31, 28, 37, 30, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('txt'):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 38, 33, 28, 40, 32, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00717616081237793, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 29, 37, 31, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 28, 38, 37, 41, 29, 36, 31, 32, 34, 33, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 28, 32, 39, 29, 30, 31, 40, 33, 38, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023810863494873047, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 29, 31, 28, 41, 40, 33, 34, 38, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 30, 28, 33, 39, 38, 34, 36, 29, 32, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024671554565429688, "tests_passed": true, "error": null}}
{"selected_lines": [39, 30, 33, 38, 31, 37, 36, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if 'Invalid' not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 30, 29, 40, 41, 38, 37, 34, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0019690990447998047, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007044792175292969, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006922006607055664, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 40, 32, 34, 37, 39, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_info in os.walk(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007124185562133789, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 33, 38, 34, 31, 30, 32, 40, 36, 41, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('txt'):\n            if 'Invalid' not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.001837015151977539, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 34, 32, 30, 29, 31, 38, 33, 28, 37, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 33, 28, 36, 31, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 31, 36, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 33, 28, 40, 34, 41, 32, 37, 31, 29, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 37, 32, 34, 28, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for file in os.listdir(os.path.join(directory_path, 'Invalid')) if file not in ['', '.DS_Store'])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007323741912841797, "tests_passed": true, "error": null}}
{"selected_lines": [41, 31, 34, 33, 32, 36, 37, 39, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 41, 34, 38, 36, 29, 33, 40, 28, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 39, 30, 33, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 37, 29, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_info in os.walk(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\"txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002660036087036133, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.003000020980834961, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [41, 28, 31, 29, 36, 37, 40, 38, 30, 34, 33, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002356290817260742, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007124185562133789, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 28, 39, 33, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 28, 32, 33, 41, 39, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith('.'):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 34, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002207040786743164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 36, 28, 39, 33, 31, 37, 38, 29, 41, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith(\".txt\") or filename.lower().endswith(\".jpg\"):\n            if 'Invalid' in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 40, 36, 30, 31, 38, 29, 28, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if not os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()[1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 33, 37, 38, 40, 41, 39, 31, 28, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('txt'):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002115011215209961, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [41, 39, 37, 29, 32, 36, 38, 40, 31, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for file in os.listdir(os.path.join(directory_path, 'Invalid')) if file not in ['', '.DS_Store'])\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 40, 29, 28, 30, 41, 39, 32, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(os.path.join(directory_path, filename)):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 41, 40, 37, 31, 36, 39, 28, 38, 30, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 39, 41, 38, 34, 28, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024497509002685547, "tests_passed": true, "error": null}}
{"selected_lines": [30, 37, 38, 32, 36, 41, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 28, 34, 31, 36, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 40, 41, 37, 31, 38, 39, 32, 36, 30, 34, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0018830299377441406, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [34, 33, 28, 37, 32, 29, 31, 36, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007214784622192383, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 39, 40, 29, 38, 37, 34, 41, 33, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 40, 30, 32, 29, 41, 28, 36, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('txt'):\n            if not os.path.isdir(f\"{directory_path}/{filename}\"):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 28, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 36, 41, 38, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isdir(os.path.join(directory_path, filename)):\n            if 'Invalid' not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007948637008666992, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 30, 37, 39, 28, 29, 33, 41, 34, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0021567344665527344, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 30, 31, 33, 39, 37, 29, 34, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002131938934326172, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 32, 30, 29, 28, 41, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002488851547241211, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 31, 39, 32, 38, 29, 30, 40, 37, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022771358489990234, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 38, 39, 28, 32, 41, 37, 34, 31, 29, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith(\".txt\") or filename.lower().endswith(\".jpg\"):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024530887603759766, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.004385948181152344, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [41, 32, 28, 38, 31, 37, 33, 34, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002390146255493164, "tests_passed": true, "error": null}}
{"selected_lines": [28, 34, 41, 29, 30, 31, 39, 36, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002351045608520508, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 33, 39, 29, 31, 37, 28, 34, 30, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename[-4:].lower() == '.txt':\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 31, 39, 32, 28, 33, 29, 30, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.isdir(f\"{directory_path}/{filename}\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 34, 29, 39, 31, 33, 36, 40, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007822751998901367, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 37, 38, 30, 33, 39, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if filename[-4:].lower() == '.txt':\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 38, 33, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 28, 30, 36, 38, 40, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0021932125091552734, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022089481353759766, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [36, 34, 40, 29, 41, 30, 32, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002095937728881836, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": false, "time": 0.000148773193359375, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [39, 30, 31, 32, 37, 41, 33, 28, 34, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 30, 36, 31, 40, 38, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022089481353759766, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [40, 28, 34, 29, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename, filesize, file_type in file_scanner(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007269144058227539, "tests_passed": true, "error": null}}
{"selected_lines": [29, 41, 33, 39, 38, 34, 31, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0026340484619140625, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 38, 37, 30, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isdir(os.path.join(directory_path, filename)):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 38, 37, 40, 30, 32, 31, 41, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filesize, file_type in file_scanner(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 32, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002218008041381836, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 37, 36, 38, 32, 39, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006928920745849609, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 34, 41, 32, 33, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 36, 32, 28, 39, 31, 34, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0019850730895996094, "tests_passed": true, "error": null}}
{"selected_lines": [30, 39, 38, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith(('.txt', '.jpg')):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022809505462646484, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.004385948181152344, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.004355907440185547, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [37, 34, 38, 28, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022547245025634766, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0071468353271484375, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007003068923950195, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 34, 39, 30, 33, 28, 41, 40, 37, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 32, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 28, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename, file_info in os.walk(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 28, 34, 30, 38, 33, 31, 39, 40, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(os.path.join(directory_path, filename)):\n            if os.path.isfile(filename):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 41, 30, 38, 33, 29, 40, 31, 28, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if os.path.isfile(filename):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 28, 39, 37, 29, 32, 33, 34, 40, 31, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_type in get_all_files(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00249481201171875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 38, 30, 31, 28, 36, 40, 33, 37, 39, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if 'Invalid' in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 33, 38, 39, 36, 31, 29, 30, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 37, 30, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006756782531738281, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007125139236450195, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 37, 41, 38, 34, 29, 39, 36, 30, 33, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_type in get_all_files(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 41, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002393960952758789, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 40, 30, 33, 41, 32, 34, 36, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 38, 39, 34, 31, 36, 37, 30, 41, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.jpg'):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 41, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension or not extension.lower() in ['txt', 'jpg']:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007330179214477539, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 39, 36, 38, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 40, 41, 36, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0027010440826416016, "tests_passed": true, "error": null}}
{"selected_lines": [30, 40, 32, 33, 37, 41, 31, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 28, 38, 33, 39, 34, 40, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename, file_type in get_all_files(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 41, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isfile(filename):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 28, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002512693405151367, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 31, 37, 40, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 38, 31, 39, 41, 32, 29, 40, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007260799407958984, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 41, 39, 33, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007008075714111328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 34, 31, 30, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 37, 34, 28, 29, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002373218536376953, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.startswith(\".\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0070269107818603516, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 41, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith('.'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024750232696533203, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 34, 41, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 31, 38, 28, 37, 41, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('txt'):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 30, 37, 31, 41, 40, 38, 36, 28, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 39, 31, 30, 28, 40, 38, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 34, 30, 29, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0074198246002197266, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 39, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023517608642578125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 30, 36, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not filename.startswith(\".\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0021250247955322266, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.004385948181152344, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [41, 38, 34, 32, 31, 39, 28, 36, 30, 40, 29, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for _ in os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0019190311431884766, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [33, 34, 28, 36, 29, 38, 30, 37, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\"txt\"):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = sum(1 for filename in os.listdir(os.path.join(directory_path, 'Invalid')) if not filename.startswith('.'))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 39, 31, 28, 29, 30, 33, 37, 36, 38, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith(\".txt\") or filename.lower().endswith(\".jpg\"):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 28, 41, 30, 36, 38, 40, 33, 34, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename, file_info in os.walk(directory_path):\n        if filename.endswith('txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 37, 40, 33, 34, 41, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 40, 36, 32, 30, 33, 39, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()[1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 40, 39, 29, 30, 33, 37, 36, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\"txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = filename.split('.')[-1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0025169849395751953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 39, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023517608642578125, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007252931594848633, "tests_passed": true, "error": null}}
{"selected_lines": [28, 32, 30, 37, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.008079290390014648, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0024929046630859375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [41, 32, 36, 37, 29, 31, 38, 30, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.jpg'):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()[1:]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0021309852600097656, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0070841312408447266, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 28, 29, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 39, 31, 30, 40, 32, 34, 37, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if filename.lower().startswith(\"invalid\"):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006978034973144531, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002390146255493164, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 38, 30, 39, 32, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 39, 32, 38, 41, 30, 29, 34, 37, 28, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid'))\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 41, 38, 39, 40, 37, 34, 36, 33, 30, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename, filepath in get_filepaths(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0069580078125, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [41, 32, 39, 36, 34, 38, 29, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002269744873046875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 28, 30, 37, 29, 38, 41, 32, 36, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 31, 28, 32, 29, 38, 34, 41, 39, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename.lower().startswith(\"invalid\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002293109893798828, "tests_passed": true, "error": null}}
{"selected_lines": [29, 38, 34, 33, 36, 40, 41, 32, 30, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = sum(1 for filename in os.listdir(os.path.join(directory_path, 'Invalid')) if not filename.startswith('.'))\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 40, 37, 38, 36, 32, 30, 28, 33, 34, 41, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith(('.txt', '.jpg')):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 36, 34, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for filename in os.listdir(os.path.join(directory_path, 'Invalid')) if not filename.startswith('.'))\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0077860355377197266, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 41, 40, 29, 30, 33, 28, 34, 31, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002608060836791992, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 29, 30, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.jpg'):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 38, 41, 39, 36, 28, 30, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if 'Invalid' in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 33, 31, 30, 29, 37, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary.keys():\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 32, 29, 34, 31, 33, 28, 36, 38, 41, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 32, 40, 41, 33, 30, 34, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 32, 39, 41, 31, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 29, 33, 34, 41, 31, 37, 28, 38, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007122993469238281, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 32, 28, 37, 31, 30, 38, 36, 29, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename, filesize, file_type in file_scanner(directory_path):\n        if filename.lower().endswith(\".txt\") or filename.lower().endswith(\".jpg\"):\n            if 'Invalid' in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 31, 30, 37, 36, 32, 28, 40, 38, 34, 29, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if 'Invalid' not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 34, 30, 37, 40, 28, 38, 39, 41, 32, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_info in os.walk(directory_path):\n        if not filename.endswith(('.txt', '.jpg')):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for file in os.listdir(os.path.join(directory_path, 'Invalid')) if file not in ['', '.DS_Store'])\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 39, 40, 38, 34, 33, 28, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = sum(1 for _ in os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006928920745849609, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022089481353759766, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [28, 30, 41, 31, 38, 34, 33, 32, 40, 36, 29, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename, file_info in os.walk(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 38, 31, 37, 39, 29, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not extension or not extension.lower() in ['txt', 'jpg']:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 41, 40, 33, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 37, 31, 34, 30, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('txt'):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 40, 34, 38, 41, 36, 37, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002229928970336914, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 41, 39, 33, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007008075714111328, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 32, 37, 31, 41, 34, 33, 29, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 38, 33, 41, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.jpg'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0026378631591796875, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 28, 39, 31, 41, 29, 40, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not os.path.isdir(os.path.join(directory_path, filename)):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [41, 31, 34, 32, 29, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for file in os.listdir(os.path.join(directory_path, 'Invalid')) if file not in ['', '.DS_Store'])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007584810256958008, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00708460807800293, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002390146255493164, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 41, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 40, 28, 34, 29, 41, 31, 32, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for filename in os.listdir(os.path.join(directory_path, 'Invalid')) if not filename.startswith('.'))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 38, 39, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0025839805603027344, "tests_passed": true, "error": null}}
{"selected_lines": [29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filepath in get_filepaths(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0019757747650146484, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [30, 40, 31, 38, 36, 28, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023267269134521484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 40, 30, 31, 36, 38, 37, 39, 29, 28, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00710606575012207, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.004385948181152344, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007044792175292969, "tests_passed": true, "error": null}}
{"selected_lines": [29, 40, 36, 28, 37, 34, 38, 39, 31, 33, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not filename.startswith(\".\"):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 39, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023517608642578125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 31, 33, 36, 40, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 32, 31, 30, 40, 37, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007191181182861328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 30, 29, 36, 41, 32, 39, 28, 38, 31, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 41, 33, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0074770450592041016, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 28, 40, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 28, 31, 33, 40, 39, 36, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_type in get_all_files(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 28, 37, 30, 38, 36, 29, 32, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\"txt\"):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for file in os.listdir(os.path.join(directory_path, 'Invalid')) if file not in ['', '.DS_Store'])\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38, 31, 41, 34, 29, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023789405822753906, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 41, 31, 28, 30, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0018761157989501953, "tests_passed": true, "error": null}}
{"selected_lines": [29, 37, 36, 30, 31, 40, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith('.'):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002657175064086914, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00696110725402832, "tests_passed": true, "error": null}}
{"selected_lines": [38, 33, 28, 40, 32, 31, 41, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 33, 36, 40, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007595062255859375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 30, 29, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00249481201171875, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 31, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 38, 31, 30, 37, 40, 39, 36, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if not os.path.isdir(filename):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary.keys():\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for file in os.listdir(os.path.join(directory_path, 'Invalid')) if file not in ['', '.DS_Store'])\n        else:\n            extension = filename.split('.')[-1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 38, 34, 30, 31, 33, 39, 36, 41, 40, 29, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002192258834838867, "tests_passed": true, "error": null}}
{"selected_lines": [28, 33, 37, 32, 34, 38, 31, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0019392967224121094, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 39, 28, 30, 34, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename, file_info in os.walk(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for filename in os.listdir(os.path.join(directory_path, 'Invalid')) if not filename.startswith('.'))\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.004355907440185547, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [32, 33, 34, 30, 37, 41, 40, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 41, 38, 37, 30, 36, 29, 34, 28, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007012844085693359, "tests_passed": true, "error": null}}
{"selected_lines": [37, 29, 38, 39, 28, 33, 32, 40, 34, 41, 30, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('txt'):\n            if filename not in summary:\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 32, 30, 31, 28, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension or not extension.lower() in ['txt', 'jpg']:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 30, 38, 28, 29, 32, 37, 41, 40, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 30, 39, 40, 37, 29, 38, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.isdir(f\"{directory_path}/{filename}\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 34, 38, 36, 32, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(os.path.join(directory_path, 'Invalid')).count(filename)\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002268075942993164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006928920745849609, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 40, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007536888122558594, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 28, 40, 31, 41, 36, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007709980010986328, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 33, 32, 28, 40, 38, 31, 30, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 28, 34, 29, 39, 37, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007125139236450195, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.003000020980834961, "tests_passed": false, "error": "FileNotFoundError"}}
{"selected_lines": [41, 28, 37, 39, 40, 33, 29, 32, 34, 38, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(summary.get(key, 0) for key in summary) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007099151611328125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 31, 38, 39, 28, 33, 32, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 37, 40, 36, 29, 30, 38, 34, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002407073974609375, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 40, 31, 41, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_info in os.walk(directory_path):\n        if os.path.isdir(os.path.join(directory_path, filename)):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 39, 29, 31, 36, 37, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(os.path.join(directory_path, 'Invalid')))\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 28, 41, 37, 39, 36, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 39, 40, 41, 28, 32, 30, 34, 29, 36, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.startswith(\".\") or filename.endswith(\"~\"):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002407073974609375, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007044792175292969, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' in os.listdir(directory_path):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum([1 for f in os.listdir(os.path.join(directory_path, 'Invalid')) if os.path.isfile(f)])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 33, 31, 34, 41, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(f\"{directory_path}/{filename}\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 32, 29, 30, 28, 40, 31, 37, 39, 36, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if \"Invalid\" not in os.listdir(directory_path):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip(\".\")\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022058486938476562, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [37, 31, 38, 36, 29, 32, 40, 41, 39, 33, 28, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(filename):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 30, 31, 29, 38, 39, 36, 37, 33, 28, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('txt'):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 29, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 39, 30, 29, 31, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0026700496673583984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 37, 29, 39, 34, 40, 41, 32, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 32, 41, 33, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 39, 34, 38, 41, 29, 40, 33, 37, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 34, 39, 30, 31, 29, 28, 41, 40, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not filename.startswith(\".\"):\n            if not os.path.isfile(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00708460807800293, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename[-4:].lower() == '.txt':\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.004337310791015625, "tests_passed": false, "error": "NotADirectoryError"}}
{"selected_lines": [41, 38, 37, 39, 30, 32, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for file in os.listdir(os.path.join(directory_path, 'Invalid')) if file not in ['', '.DS_Store'])\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007323741912841797, "tests_passed": true, "error": null}}
{"selected_lines": [38, 28, 40, 36, 32, 31, 34, 37, 39, 41, 29, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    for filename, file_type in get_all_files(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 37, 28, 36, 31, 29, 38, 33, 40, 32, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, filepath in get_filepaths(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 31, 32, 36, 30, 38, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007065296173095703, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 33, 30, 38, 32, 41, 36, 28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith(('.txt', '.jpg')):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 29, 37, 32, 28, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 38, 37, 41, 36, 34, 30, 32, 29, 33, 40, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022089481353759766, "tests_passed": false, "error": "FileExistsError"}}
{"selected_lines": [31, 39, 29, 33, 34, 38, 36, 41, 37, 40, 32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if os.path.isfile(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = sum(1 for filename in os.listdir(os.path.join(directory_path, 'Invalid')) if not filename.startswith('.'))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 31, 33], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith(\".txt\") or filename.lower().endswith(\".jpg\"):\n            if filename.lower().startswith(\"invalid\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002501249313354492, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 41, 40, 28, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002160310745239258, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 28, 32, 33, 34, 40, 37, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 41, 28, 34, 40, 37, 39, 32, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt') and not filename.endswith('.jpg'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension or extension.lower() in string.digits:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0020983219146728516, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 33, 32, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = os.listdir(directory_path).count('Invalid')\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022220611572265625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 33, 34, 32, 38, 29, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(f\"{directory_path}/{filename}\"):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 39, 28, 32, 30, 38, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".txt\"):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 38, 28, 33, 41, 32, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if filename.lower().endswith('.txt'):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.makedirs(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 38, 28, 39, 34, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid', filename))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension or not extension.lower() in ['txt', 'jpg']:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0022957324981689453, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 28, 31, 38, 39, 34, 30, 33, 32, 37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.txt'):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00708460807800293, "tests_passed": true, "error": null}}
{"selected_lines": [28, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 30, 31, 38, 33, 36, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename.lower().startswith(\"invalid\"):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 39, 41, 29, 36, 34, 38], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = len(os.listdir(directory_path))\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 41, 34, 37, 36, 31, 30, 28, 29, 39], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if filename not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if extension in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 37, 34, 28, 29, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002373218536376953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 38, 36, 32, 33, 29, 41, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if filename in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()[1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 31, 29, 37, 28, 32, 40, 39, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_type in get_all_files(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 28, 34, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[-1].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.002207040786743164, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 33, 31, 37, 28, 30, 41, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = 1\n        else:\n            extension = os.path.splitext(filename)[1][1:].lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 38, 28, 34, 30, 40, 41, 36, 31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            if 'Invalid' in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 34, 29, 31, 39, 37, 36, 40, 41], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if \"Invalid\" not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if not extension or not extension.lower() in ['txt', 'jpg']:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 34, 28, 36, 41, 38, 40, 31, 37, 32, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.isdir(filename):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename),\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [28, 40, 37, 29, 38, 39, 34, 41, 33, 36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0068988800048828125, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 39, 40], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0023517608642578125, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if extension not in summary:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0069580078125, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00708460807800293, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 31, 34], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isdir(filename):\n            if not os.path.isdir(os.path.join(directory_path, filename)):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [31, 38, 36, 29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if 'Invalid' not in summary:\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1]\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.006826162338256836, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00718998908996582, "tests_passed": true, "error": null}}
{"selected_lines": [29, 28, 40, 37, 39, 32, 38, 33, 30], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, filename)):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(filename, os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not extension:\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename, file_type in get_all_files(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.0018711090087890625, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[1].strip('.').lower()\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.007122993469238281, "tests_passed": true, "error": null}}
{"selected_lines": [28], "result": {"code": "import os\nimport shutil\nimport string\n\n# Constants\nINVALID_CHARACTERS = string.punctuation + string.whitespace\n\ndef task_func(directory_path):\n    \"\"\"\n    Scan a directory and organize the files according to their endings. Files with invalid characters in the name will be moved to a new directory called \"Invalid.\"\n    \n    The invalid characters are defined by the constant INVALID_CHARACTERS, which includes all punctuation and whitespace characters.\n\n    Parameters:\n    - directory_path (str): The path to the directory.\n\n    Returns:\n    - summary (dict): A summary dictionary containing the count of files moved to each directory.\n\n    Requirements:\n    - os\n    - shutil\n    - string\n\n    Example:\n    >>> task_func('path_to_directory')\n    {'txt': 2, 'jpg': 1, 'Invalid': 1}\n    \"\"\"\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    for filename in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.exists(os.path.join(directory_path, 'Invalid')):\n                os.mkdir(os.path.join(directory_path, 'Invalid'))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n        else:\n            extension = os.path.splitext(filename)[-1].strip('.')\n            if not os.path.exists(os.path.join(directory_path, extension)):\n                os.mkdir(os.path.join(directory_path, extension))\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension))\n            summary[extension] = summary.get(extension, 0) + 1\n    return summary", "compilation_passed": true, "time": 0.00249481201171875, "tests_passed": true, "error": null}}
