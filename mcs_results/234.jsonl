{"selected_lines": [33, 42, 34, 43, 41, 44, 39, 40, 45, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f'The input should be pandas DataFrame.')\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'], df['Age_up'], label='Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.007835865020751953, "tests_passed": true, "error": null}}
{"selected_lines": [36, 45, 33, 43, 44, 35, 37, 40, 39, 41, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot()\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0055658817291259766, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.1588430404663086, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 38, 33, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = (df['Age'] + slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021384000778198242, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 43, 35, 38, 39, 33, 37, 36, 42, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.sort_values(\"Name\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.age, df.score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = plt.subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], df['Score'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 41, 43, 38, 36, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 42, 43, 38, 34, 37, 39, 41, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0054280757904052734, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 36, 46, 45, 34, 33, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 43, 41, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input is not a DataFrame')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 34, 44, 45, 43, 41, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', linewidth=3, label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022151947021484375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 38, 37, 34, 44, 42, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 38, 34, 42, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 33, 37, 38, 45, 36, 39, 46, 42, 40, 41, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame) is False:\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter('Age', 'Score', data=df, color='red', label='Scores')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021950960159301758, "tests_passed": true, "error": null}}
{"selected_lines": [43, 38, 35, 42, 34, 46, 37, 41, 36, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input is not a DataFrame')\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * df['Score'] - intercept\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022114038467407227, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 33, 35, 42, 44, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Name\"}).sort_values(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 42, 39, 37, 38, 34, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend()\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.15776515007019043, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 37, 40, 34, 35, 42, 41, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.xlabel('Age')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005470991134643555, "tests_passed": true, "error": null}}
{"selected_lines": [45, 39, 46, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 40, 43, 34, 44, 36, 46, 33, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 44, 40, 34, 43, 36, 37, 41, 46, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression', color='orange')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 34, 37, 38, 43, 36, 41, 33, 42, 46, 44, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.DataFrame:\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.rename(columns={'Name': 'name'}).drop_duplicates()\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 35, 42, 45, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='upper left')\n    return plt, ax", "compilation_passed": true, "time": 0.021999835968017578, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 37, 44, 40, 38, 35, 34, 33, 41, 36, 39, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'bo', label='Original Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title('Linear Regression: Age vs Score')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 40, 43, 33, 45, 37, 35, 46, 36, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = (df['Age'] + slope)\n    fig = plt.figure(figsize=(8, 6), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 46, 45, 39, 33, 38, 41, 42, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021544933319091797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 34, 39, 40, 38, 43, 44, 35, 45, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.drop_duplicates(subset=[\"Name\"], keep='first')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.xlabel('Age')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.005483150482177734, "tests_passed": true, "error": null}}
{"selected_lines": [38, 45, 39, 44, 40, 43, 36, 41, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0053937435150146484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 38, 33, 45, 36, 37, 40, 43, 39, 42, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f\"Input is not a DataFrame, instead is {type(df)}\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 45, 37, 44, 36, 38, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f\"Input is not a DataFrame, instead is {type(df)}\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02222585678100586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 39, 41, 46, 40, 45, 35, 37, 33, 38, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame.\")\n    df = df.drop_duplicates(subset=[\"Name\"])\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 38, 36, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 37, 40, 38, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0058710575103759766, "tests_passed": true, "error": null}}
{"selected_lines": [40, 44, 46, 33, 39, 45, 41, 36, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 34, 39, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('The input df should be a pandas DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot()\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005697965621948242, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 46, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 34, 41, 37, 43, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02457904815673828, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 45, 36, 33, 34, 41, 40, 38, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 33, 34, 39, 37, 44, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 37, 43, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 1\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022571802139282227, "tests_passed": true, "error": null}}
{"selected_lines": [35, 46, 33, 41, 43, 38, 42, 37, 40, 44, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(bottom=0.2)\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005858182907104492, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 44, 36, 43, 35, 46, 39, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], marker='o')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 33, 41, 42, 38, 40, 44, 35, 45, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.reset_index().drop_duplicates(subset=\"Name\", keep=\"first\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression: Age vs Score')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 39, 36, 38, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure()\n    ax = plt.subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023251056671142578, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 40, 43, 46, 37, 45, 44, 34, 35, 33, 39, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = (df['Age'] + slope)\n    fig = plt.figure()\n    ax = plt.subplot(111)\n    plt.xlabel('Age')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 33, 46, 39, 35, 36, 40, 42, 45, 41, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + 10\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 44, 43, 40, 33, 34, 36, 39, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError('Input is not a DataFrame')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.title('Linear Regression: Age vs Score')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.005674123764038086, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 43, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', linewidth=3, label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022871971130371094, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 43, 40, 35, 33, 37, 45, 38, 36, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005858898162841797, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 35, 39, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02243804931640625, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 46, 40, 33, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.size'] = 10\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 34, 46, 38, 40, 33, 41, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('df is not a DataFrame')\n    df = df.sort_values(by='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'ro')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 36, 41, 46, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 36, 42, 43, 41, 38, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0202639102935791, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.14697003364562988, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 43, 45, 46, 40, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.xlabel('Age')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005823850631713867, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005449056625366211, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.03827095031738281, "tests_passed": true, "error": null}}
{"selected_lines": [45, 37, 44, 42, 36, 34, 39, 35, 41, 46, 38, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.DataFrame:\n        raise ValueError('Input is not a DataFrame')\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + 1\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021023988723754883, "tests_passed": true, "error": null}}
{"selected_lines": [37, 46, 45, 33, 39, 44, 41, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = plt.subplot()\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 33, 41, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.020954132080078125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 40, 33, 41, 46, 36, 43, 35, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age_up'], df['Score'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 35, 39, 34, 40, 46, 38, 43, 41, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame) is False:\n        raise ValueError(\"Input should be a DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.size'] = 10\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 38, 42, 44, 34, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 46, 44, 39, 33, 40, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame) is False:\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], color='green', marker='o', linestyle='-')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006025075912475586, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 42, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 41, 40, 33, 38, 42, 35, 36, 46, 39, 37, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f'The input should be pandas DataFrame.')\n    df = df.sort_values('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.xlabel(\"Age\")\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 45, 33, 41, 46, 39, 34, 35, 37, 42, 36, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df[df.index != df.duplicated()]\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 40, 41, 46, 33, 42, 38, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0053250789642333984, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 40, 41, 35, 38, 46, 45, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=[\"Name\"])\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age'], df['Age_up'], label='Regression')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0210878849029541, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39, 41, 38, 34, 35, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 8))\n    ax = plt.subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 39, 43, 45, 37, 44, 42, 41, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 42, 40, 39, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = plt.subplot()\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005911827087402344, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02105998992919922, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend()\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.15776515007019043, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 40, 45, 34, 33, 39, 43, 35, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('The input df should be a pandas DataFrame.')\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], marker='o')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005518198013305664, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 46, 39, 38, 35, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 36, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 33, 36, 46, 37, 38, 34, 45, 35, 40, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.sort_values(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 39, 35, 45, 46, 41, 44, 42, 37, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 33, 39, 44, 42, 38, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f\"Input is not a DataFrame, instead is {type(df)}\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = plt.subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression: Age vs Score')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021522045135498047, "tests_passed": true, "error": null}}
{"selected_lines": [43, 38, 34, 39, 46, 36, 40, 41, 44, 42, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend(loc='best')\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 42, 44, 40, 36, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + 1\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005944967269897461, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02116990089416504, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 45, 34, 40, 42, 35, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input should be a DataFrame.')\n    df = df.rename(columns={'Name': 'name'}).drop_duplicates()\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'ro')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend()\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.005728960037231445, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 45, 35, 44, 40, 33, 46, 43, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.15261411666870117, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 35, 44, 34, 45, 43, 33, 46, 37, 41, 42, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame.\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend(loc='best')\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 33, 41, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 37, 46, 38, 34, 39, 45, 42, 35, 40, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression: Age vs Score')\n    plt.grid()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 40, 41, 37, 45, 43, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.xlabel('Age')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005304098129272461, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 44, 43, 36, 46, 45, 35, 38, 37, 40, 42, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], marker='o')\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 37, 43, 40, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={'Name': 'name'}).drop_duplicates()\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression: Age vs Score')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 43, 46, 41, 39, 36, 40, 38, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df[df.index != df.duplicated()]\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot()\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.20231008529663086, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 36, 41, 40, 33, 42, 37, 43, 35, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values('Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.00575709342956543, "tests_passed": true, "error": null}}
{"selected_lines": [46, 35, 40, 34, 43, 44, 39, 37, 36, 41, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('The input df should be a pandas DataFrame.')\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 33, 43, 35, 42, 41, 36, 45, 39, 40, 37, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.005420207977294922, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.1508340835571289, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 33, 40, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005401134490966797, "tests_passed": true, "error": null}}
{"selected_lines": [36, 44, 38, 39, 35, 46, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021644115447998047, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 34, 39, 38, 41, 40, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005426168441772461, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 44, 37, 34, 40, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005298137664794922, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a pandas DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005379199981689453, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 45, 36, 39, 41, 37, 43, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], color='green', marker='o', linestyle='-')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006310224533081055, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 46, 39, 34, 37, 36, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 46, 39, 41, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.019609689712524414, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 40, 36, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input is not a DataFrame')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0054111480712890625, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 33, 39, 36, 43, 44, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005270719528198242, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 35, 42, 41, 34, 37, 33, 38, 39, 44, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend()\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 46, 34, 45, 44, 40, 42, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 34, 42, 41, 38, 36, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * df['Score'] - intercept\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression: Age and Score\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005888700485229492, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 39, 40, 36, 44, 42, 35, 43, 38, 34, 46, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Name\"}).sort_values(\"Name\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.age, df.score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 45, 34, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.01953411102294922, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.03701305389404297, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.1457688808441162, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 45, 42, 43, 39, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 33, 36, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='upper left')\n    return plt, ax", "compilation_passed": true, "time": 0.005376100540161133, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 45, 44, 35, 46, 40, 39, 38, 37, 34, 42, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.DataFrame:\n        raise ValueError\n    df = df.sort_values(by='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 41, 45, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.005064964294433594, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36, 46, 45, 39, 40, 38, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(10, 5))\n    ax = plt.subplot(111)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0054798126220703125, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 39, 41, 36, 33, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(bottom=0.2)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005402088165283203, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 38, 37, 34, 33, 36, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError('Input is not a DataFrame')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 40, 37, 36, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], color='green', marker='o', linestyle='-')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005490303039550781, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 33, 35, 38, 40, 45, 46, 36, 42, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 44, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 38, 37, 44, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('The input df should be a pandas DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023190021514892578, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 35, 40, 45, 37, 38, 34, 44, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame!\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.00551295280456543, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=[\"Name\"])\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021430015563964844, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 41, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset=[\"Name\"], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021679162979125977, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 40, 38, 35, 37, 43, 41, 34, 45, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.xlabel('Age')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 38, 33, 34, 43, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('df is not a DataFrame')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0217740535736084, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 34, 39, 41, 42, 43, 33, 45, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError('Input should be a DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005798816680908203, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.20231008529663086, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 38, 44, 41, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02237391471862793, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 37, 42, 33, 39, 46, 45, 44, 34, 40, 38, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.006220102310180664, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 37, 44, 35, 41, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 45, 39, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.01963186264038086, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 38, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 46, 41, 37, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021030187606811523, "tests_passed": true, "error": null}}
{"selected_lines": [44, 35, 36, 41, 45, 42, 46, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.03827095031738281, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 35, 45, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = plt.subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression', color='orange')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='upper left')\n    return plt, ax", "compilation_passed": true, "time": 0.02126288414001465, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 46, 41, 33, 44, 42, 38, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame) is False:\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 35, 42, 36, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.sort_values(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02110600471496582, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 43, 41, 37, 33, 46, 40, 38, 39, 45, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(subset=[\"Name\"])\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005441904067993164, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 38, 40, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.00594019889831543, "tests_passed": true, "error": null}}
{"selected_lines": [38, 46, 43, 42, 39, 44, 41, 45, 37, 35, 34, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df.sort_values(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 40, 38, 37, 39, 42, 36, 45, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 10\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title('Linear Regression: Age vs Score')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 33, 36, 35, 42, 38, 45, 41, 44, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.sort_values('Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 45, 34, 42, 39, 43, 46, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f'The input should be pandas DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 35, 44, 40, 43, 39, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={'Name': 'name'}).drop_duplicates()\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 45, 44, 35, 41, 34, 36, 42, 38, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.reset_index().drop_duplicates(subset=\"Name\", keep=\"first\")\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 34, 40, 35, 44, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 35, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02278923988342285, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021342039108276367, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 44, 34, 39, 46, 41, 42, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError('The input df should be a pandas DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 1\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021532773971557617, "tests_passed": true, "error": null}}
{"selected_lines": [33, 45, 35, 34, 39, 42, 40, 46, 44, 43, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame!\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.15239500999450684, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 45, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', linewidth=3, label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021184921264648438, "tests_passed": true, "error": null}}
{"selected_lines": [33, 44, 40, 41, 35, 43, 42, 38, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0053558349609375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43, 46, 41, 34, 44, 37, 42, 39, 40, 38, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot(df['Age'], df['Age_up'], label='Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 40, 38, 44, 42, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression: Age and Score\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 46, 34, 36, 35, 45, 40, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame.\")\n    df = df.rename(columns={\"Name\": \"Name\"}).sort_values(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 1\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 46, 41, 37, 42, 38, 40, 39, 36, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame!\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression: Age and Score\")\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 44, 39, 38, 43, 41, 46, 34, 37, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], color='green', marker='o', linestyle='-')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 42, 38, 45, 43, 35, 40, 39, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.DataFrame:\n        raise ValueError(\"Input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6), dpi=100)\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.005145072937011719, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 44, 38, 35, 33, 45, 37, 46, 34, 36, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a pandas DataFrame\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.age, df.score)\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 40, 38, 45, 43, 39, 37, 41, 34, 36, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame!\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * df['Score'] - intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006066799163818359, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 42, 38, 44, 35, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005547046661376953, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 42, 34, 40, 45, 36, 38, 43, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005365848541259766, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 41, 36, 38, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 35, 41, 40, 34, 37, 44, 38, 36, 39, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.size'] = 10\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.00557708740234375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.DataFrame:\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021090030670166016, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 37, 46, 39, 45, 38, 34, 43, 33, 44, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression', color='orange')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 46, 34, 37, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 46, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 42, 36, 45, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021519184112548828, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021052122116088867, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 36, 42, 33, 38, 40, 41, 34, 45, 43, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title('Linear Regression: Age vs Score')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005796909332275391, "tests_passed": true, "error": null}}
{"selected_lines": [46, 36, 44, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 33, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005504131317138672, "tests_passed": true, "error": null}}
{"selected_lines": [38, 43, 40, 36, 37, 45, 34, 35, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.xlabel(\"Age\")\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005115985870361328, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.drop_duplicates(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021457910537719727, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02136397361755371, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 37, 41, 36, 46, 34, 43, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.reset_index().drop_duplicates(subset=\"Name\", keep=\"first\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02155590057373047, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 35, 45, 42, 44, 33, 43, 37, 36, 38, 40, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input should be a DataFrame.')\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 8))\n    ax = plt.subplot()\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.xlabel(\"Age\")\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005034923553466797, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.1305849552154541, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46, 34, 41, 36, 43, 42, 44, 40, 33, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], 'ro')\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression', color='orange')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression: Age vs Score')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005415916442871094, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 46, 43, 37, 40, 33, 35, 44, 34, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = plt.subplot()\n    plt.subplots_adjust(bottom=0.2)\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 37, 43, 44, 39, 38, 40, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006088972091674805, "tests_passed": true, "error": null}}
{"selected_lines": [46, 40, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0054111480712890625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.xlabel('Age')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005316257476806641, "tests_passed": true, "error": null}}
{"selected_lines": [38, 44, 43, 35, 34, 41, 46, 45, 40, 33, 39, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f\"Input is not a DataFrame, instead is {type(df)}\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age_up'], df['Score'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 43, 44, 35, 41, 36, 39, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Name\"}).sort_values(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.019654035568237305, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35, 44, 40, 41, 39, 45, 33, 43, 46, 37, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], marker='o')\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 34, 40, 37, 46, 39, 44, 43, 33, 38, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005810737609863281, "tests_passed": true, "error": null}}
{"selected_lines": [46, 43, 35, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02378988265991211, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 42, 40, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame!\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.00529789924621582, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 45, 37, 39, 42, 46, 35, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 38, 33, 37, 39, 35, 44, 45, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 45, 43, 37, 44, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.01951313018798828, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43, 37, 41, 42, 39, 40, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = plt.subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005743980407714844, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 36, 40, 43, 45, 39, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = (df['Age'] + slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = plt.subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 45, 34, 33, 39, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 36, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 38, 39, 45, 42, 44, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.021456003189086914, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 40, 36, 46, 34, 42, 33, 38, 35, 41, 45, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 36, 45, 38, 42, 40, 37, 41, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], marker='o')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 46, 37, 45, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f'The input should be pandas DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression: Age and Score\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0053560733795166016, "tests_passed": true, "error": null}}
{"selected_lines": [46, 44, 35, 40, 42, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], marker='o')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.14031100273132324, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 43, 42, 41, 44, 38, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 46, 40, 43, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'o', df['Age_up'], df['Score'], '-')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (plt, ax)", "compilation_passed": true, "time": 0.006121158599853516, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 43, 33, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02049398422241211, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34, 40, 41, 35, 46, 39, 43, 37, 42, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"Input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0054018497467041016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 40, 35, 45, 41, 39, 37, 43, 42, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 39, 40, 41, 46, 34, 33, 44, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + 1\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot()\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age_up'], df['Score'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.005252838134765625, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 33, 43, 46, 37, 40, 34, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.size'] = 10\n    plt.plot(df['Age'], df['Age_up'], label='Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 37, 40, 41, 38, 46, 36, 43, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression: Age and Score\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022255897521972656, "tests_passed": true, "error": null}}
{"selected_lines": [34, 45, 46, 35, 42, 33, 36, 38, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 40, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], 'o', df['Age_up'], df['Score'], '-')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006457090377807617, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 46, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('The input df should be a pandas DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 33, 42, 46, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (plt, ax)", "compilation_passed": true, "time": 0.022951841354370117, "tests_passed": true, "error": null}}
{"selected_lines": [46, 37, 36, 40, 45, 41, 44, 43, 33, 39, 38, 42, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={'Name': 'name'}).drop_duplicates()\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot(111)\n    plt.scatter('Age', 'Score', data=df, color='red', label='Scores')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 34, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.xlabel('Age')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005511045455932617, "tests_passed": true, "error": null}}
{"selected_lines": [45, 34, 46, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 34, 40, 39, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005907297134399414, "tests_passed": true, "error": null}}
{"selected_lines": [44, 35, 41, 34, 45, 38, 39, 37, 43, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset=[\"Name\"])\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021206140518188477, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 46, 45, 42, 43, 39, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={'Name': 'name'}).drop_duplicates()\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022317886352539062, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 38, 41, 46, 33, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 34, 40, 43, 45, 37, 41, 44, 33, 38, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression', color='orange')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005438089370727539, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 43, 34, 42, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 33, 43, 45, 36, 39, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 44, 37, 34, 38, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('df is not a DataFrame')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02146005630493164, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 38, 41, 34, 46, 40, 42, 45, 44, 33, 39, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError('df is not a DataFrame')\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 41, 46, 33, 44, 43, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 33, 39, 46, 35, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 46, 43, 39, 33, 36, 37, 38, 40, 42, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot()\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 35, 42, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.sort_values('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 10\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0227200984954834, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 41, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02096104621887207, "tests_passed": true, "error": null}}
{"selected_lines": [40, 46, 34, 37, 42, 38, 43, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 46, 36, 39, 37, 43, 33, 40, 44, 42, 45, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = (df['Age'] + slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = plt.subplot(111)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression: Age vs Score')\n    plt.legend(loc='upper left')\n    return plt, ax", "compilation_passed": true, "time": 0.005424976348876953, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41, 44, 46, 42, 35, 33, 37, 45, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.sort_values('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter('Age', 'Score', data=df, color='red', label='Scores')\n    plt.plot(df['Age'], df['Age_up'], color='red', linewidth=3, label='Linear Regression')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02313995361328125, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 46, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df[df.index != df.duplicated()]\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021625041961669922, "tests_passed": true, "error": null}}
{"selected_lines": [38, 44, 41, 36, 33, 46, 37, 43, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.xlabel('Age')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 36, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02109813690185547, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 35, 43, 40, 44, 37, 45, 46, 38, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend()\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006047964096069336, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.1511399745941162, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.20231008529663086, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 34, 39, 37, 40, 46, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 36, 37, 34, 35, 40, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a pandas DataFrame\")\n    df = df.reset_index().drop_duplicates(subset=\"Name\", keep=\"first\")\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 38, 36, 40, 46, 34, 37, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'o', df['Age_up'], df['Score'], '-')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005670785903930664, "tests_passed": true, "error": null}}
{"selected_lines": [38, 43, 44, 34, 45, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend()\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.02151203155517578, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.11961126327514648, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [35, 46, 41, 45, 40, 36, 34, 38, 37, 43, 33, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression: Age and Score\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f'The input should be pandas DataFrame.')\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02174997329711914, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021353960037231445, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 35, 41, 40, 46, 38, 42, 34, 36, 44, 33, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.00545191764831543, "tests_passed": true, "error": null}}
{"selected_lines": [46, 34, 38, 41, 39, 37, 40, 42, 33, 45, 35, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.size'] = 10\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0051310062408447266, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 35, 36, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f'The input should be pandas DataFrame.')\n    df = df.reset_index().drop_duplicates(subset=\"Name\", keep=\"first\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021633148193359375, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 40, 41, 37, 46, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 34, 37, 40, 35, 45, 33, 36, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f'The input should be pandas DataFrame.')\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression', color='orange')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression: Age vs Score')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005877971649169922, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 38, 36, 44, 40, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.0051920413970947266, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 41, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021699905395507812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021011829376220703, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 41, 42, 38, 46, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02142786979675293, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.03701305389404297, "tests_passed": true, "error": null}}
{"selected_lines": [45, 36, 34, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021098852157592773, "tests_passed": true, "error": null}}
{"selected_lines": [45, 37, 46, 40, 38, 41, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.00532984733581543, "tests_passed": true, "error": null}}
{"selected_lines": [45, 41, 38, 39, 44, 43, 37, 42, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021123170852661133, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 35, 46, 40, 36, 45, 37, 34, 33, 42, 41, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.sort_values('Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.13451004028320312, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.03583216667175293, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [35, 42, 36, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02170276641845703, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 38, 42, 41, 36, 43, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0054721832275390625, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 46, 43, 38, 35, 40, 44, 45, 33, 41, 36, 39, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6), dpi=100)\n    ax = fig.add_subplot(1, 1, 1)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.legend()\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 37, 36, 39, 33, 38, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 10\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = plt.subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005650043487548828, "tests_passed": true, "error": null}}
{"selected_lines": [46, 35, 44, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.reset_index().drop_duplicates(subset=\"Name\", keep=\"first\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 34, 39, 37, 40, 42, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 42, 35, 40, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.xlabel('Age')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005645036697387695, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02092599868774414, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 41, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005461931228637695, "tests_passed": true, "error": null}}
{"selected_lines": [45, 35, 39, 38, 46, 41, 43, 37, 34, 33, 44, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates(subset=[\"Name\"], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021867990493774414, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 42, 46, 40, 41, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.size'] = 10\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 33, 41, 42, 39, 38, 34, 37, 35, 45, 46, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame) is False:\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.rename(columns={\"Name\": \"Name\"}).sort_values(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 39, 33, 34, 45, 44, 36, 43, 38, 46, 41, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input is not a DataFrame.\")\n    df = df.reset_index().drop_duplicates(subset=\"Name\", keep=\"first\")\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 46, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 33, 40, 34, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input should be a DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(bottom=0.2)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 37, 42, 43, 34, 35, 40, 44, 33, 39, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame!\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006308078765869141, "tests_passed": true, "error": null}}
{"selected_lines": [37, 45, 38, 34, 46, 35, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('The input df should be a pandas DataFrame.')\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 36, 45, 42, 40, 37, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005795955657958984, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.20231008529663086, "tests_passed": true, "error": null}}
{"selected_lines": [39, 46, 42, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02301311492919922, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.20231008529663086, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39, 33, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 45, 38, 42, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.02000117301940918, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 38, 40, 35, 45, 41, 46, 34, 39, 42, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError(f\"Input is not a DataFrame, instead is {type(df)}\")\n    df = df.rename(columns={\"Name\": \"Name\"}).sort_values(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.03834080696105957, "tests_passed": true, "error": null}}
{"selected_lines": [39, 45, 46, 35, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 42, 41, 36, 44, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression: Age vs Score')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021589994430541992, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 33, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022286176681518555, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 35, 41, 39, 37, 33, 46, 44, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f\"Input is not a DataFrame, instead is {type(df)}\")\n    df = df.drop_duplicates(subset=[\"Name\"], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.12022924423217773, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [38, 43, 34, 37, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.00561213493347168, "tests_passed": true, "error": null}}
{"selected_lines": [34, 38, 37, 36, 45, 43, 41, 39, 46, 42, 40, 33, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.021276235580444336, "tests_passed": true, "error": null}}
{"selected_lines": [34, 46, 41, 39, 44, 38, 35, 45, 33, 40, 37, 42, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 37, 46, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021313190460205078, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 34, 40, 39, 43, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age'], df['Age_up'], label='Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02125096321105957, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 34, 40, 42, 35, 46, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 41, 33, 46, 43, 39, 38, 36, 45, 35, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Name\"}).sort_values(\"Name\")\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 36, 39, 35, 42, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'o', df['Age_up'], df['Score'], '-')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0058171749114990234, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023056983947753906, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 34, 43, 40, 45, 42, 35, 39, 37, 33, 36, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], color='green', marker='o', linestyle='-')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 40, 35, 33, 45, 46, 38, 43, 39, 37, 41, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.legend()\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 43, 42, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02202892303466797, "tests_passed": true, "error": null}}
{"selected_lines": [46, 34, 38, 33, 39, 35, 45, 42, 40, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.sort_values(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = plt.subplot()\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 36, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.01977396011352539, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 37, 33, 34, 40, 46, 38, 36, 42, 41, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005486726760864258, "tests_passed": true, "error": null}}
{"selected_lines": [45, 33, 43, 36, 44, 40, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0054111480712890625, "tests_passed": true, "error": null}}
{"selected_lines": [43, 45, 44, 40, 42, 41, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(bottom=0.2)\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.005178213119506836, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Regression')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021943092346191406, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 39, 40, 43, 44, 33, 38, 37, 41, 35, 36, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 37, 41, 44, 34, 38, 42, 40, 35, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('The input df should be a pandas DataFrame.')\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.00549769401550293, "tests_passed": true, "error": null}}
{"selected_lines": [46, 38, 44, 33, 34, 45, 42, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.1511399745941162, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 40, 36, 37, 41, 42, 39, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005464792251586914, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 46, 37, 34, 38, 44, 40, 36, 41, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.sort_values('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 37, 45, 34, 42, 35, 44, 33, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'bo', label='Original Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.legend()\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006668806076049805, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 45, 37, 38, 43, 42, 46, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 46, 40, 33, 43, 35, 34, 41, 39, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.12939190864562988, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 44, 35, 40, 34, 39, 46, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError('df is not a DataFrame')\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + 10\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005606889724731445, "tests_passed": true, "error": null}}
{"selected_lines": [37, 45, 34, 38, 40, 43, 46, 35, 44, 33, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.reset_index().drop_duplicates(subset=\"Name\", keep=\"first\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.0059070587158203125, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 34, 41, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02267289161682129, "tests_passed": true, "error": null}}
{"selected_lines": [45, 44, 36, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression: Age vs Score')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022346019744873047, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'bo', label='Original Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005795717239379883, "tests_passed": true, "error": null}}
{"selected_lines": [38, 43, 37, 36, 39, 33, 41, 42, 46, 40, 34, 35, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure(figsize=(8, 6), dpi=100)\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], 'ro')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0053980350494384766, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 39, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022535085678100586, "tests_passed": true, "error": null}}
{"selected_lines": [45, 33, 36, 42, 46, 38, 41, 35, 43, 37, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 46, 41, 34, 38, 45, 37, 40, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input should be a DataFrame.')\n    df = df[df.index != df.duplicated()]\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], marker='o')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend()\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 35, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.021641969680786133, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 38, 35, 39, 36, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02173900604248047, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 33, 38, 35, 46, 40, 45, 37, 41, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=[\"Name\"], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 45, 46, 39, 43, 41, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'o', df['Age_up'], df['Score'], '-')\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005838871002197266, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 42, 39, 36, 45, 37, 33, 44, 41, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006028890609741211, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 38, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021615028381347656, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 46, 42, 39, 35, 37, 38, 43, 40, 34, 45, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35, 33, 42, 39, 43, 38, 46, 34, 41, 36, 40, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 44, 45, 39, 36, 41, 37, 38, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.019893884658813477, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 42, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022171974182128906, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 46, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 37, 38, 42, 41, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02413797378540039, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 42, 40, 38, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('df is not a DataFrame')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006695270538330078, "tests_passed": true, "error": null}}
{"selected_lines": [38, 44, 35, 33, 43, 45, 39, 40, 41, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.reset_index().drop_duplicates(subset=\"Name\", keep=\"first\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.00562596321105957, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 34, 45, 42, 46, 36, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.14546990394592285, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 34, 39, 36, 38, 46, 33, 41, 40, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset=[\"Name\"], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.xlabel(\"Age\")\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 37, 39, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.age, df.score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 38, 37, 41, 36, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022393226623535156, "tests_passed": true, "error": null}}
{"selected_lines": [38, 46, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 37, 42, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = (df['Age'] + slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02166008949279785, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 46, 45, 33, 42, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 38, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a pandas DataFrame\")\n    df = df.drop_duplicates(subset=[\"Name\"], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 1\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023628950119018555, "tests_passed": true, "error": null}}
{"selected_lines": [37, 45, 40, 36, 44, 35, 43, 39, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 36, 42, 38, 37, 33, 35, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 33, 42, 43, 41, 46, 44, 40, 36, 37, 35, 34, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.xlabel(\"Age\")\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.14800572395324707, "tests_passed": true, "error": null}}
{"selected_lines": [45, 43, 34, 42, 33, 41, 44, 39, 37, 38, 46, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame) is False:\n        raise ValueError(f\"Input is not a DataFrame, instead is {type(df)}\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 42, 37, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005568027496337891, "tests_passed": true, "error": null}}
{"selected_lines": [46, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 17.586058139801025, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 36, 44, 45, 35, 39, 46, 38, 43, 37, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression: Age vs Score')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 35, 33, 37, 39, 40, 38, 36, 46, 41, 34, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 45, 46, 38, 42, 36, 43, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023855924606323242, "tests_passed": true, "error": null}}
{"selected_lines": [46, 36, 37, 41, 38, 39, 34, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 39, 44, 36, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 45, 44, 46, 33, 37, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.reset_index().drop_duplicates(subset=\"Name\", keep=\"first\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02572917938232422, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 37, 40, 36, 34, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * df['Score'] - intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.xlabel('Age')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005997896194458008, "tests_passed": true, "error": null}}
{"selected_lines": [37, 46, 44, 41, 33, 39, 40, 43, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend(loc='best')\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 46, 33, 40, 41, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression: Age and Score\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 41, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], df['Score'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023247957229614258, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 39, 38, 37, 36, 33, 35, 43, 44, 40, 42, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame) is False:\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = (df['Age'] + slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.title('Linear Regression: Age vs Score')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.0061681270599365234, "tests_passed": true, "error": null}}
{"selected_lines": [46, 35, 39, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.1333940029144287, "tests_passed": true, "error": null}}
{"selected_lines": [45, 38, 37, 40, 42, 44, 41, 43, 35, 46, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f\"Input is not a DataFrame, instead is {type(df)}\")\n    df = df.sort_values('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], marker='o')\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 38, 43, 45, 46, 33, 41, 40, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005539894104003906, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 40, 43, 35, 39, 42, 36, 37, 33, 45, 46, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(\"Name\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 46, 44, 33, 36, 40, 38, 39, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(bottom=0.2)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression: Age vs Score')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 41, 38, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021364927291870117, "tests_passed": true, "error": null}}
{"selected_lines": [46, 36, 40, 37, 33, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title('Linear Regression: Age vs Score')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 38, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02181410789489746, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 42, 35, 34, 45, 36, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.sort_values(\"Name\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 36, 42, 43, 33, 40, 39, 34, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 33, 35, 42, 37, 41, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021624088287353516, "tests_passed": true, "error": null}}
{"selected_lines": [45, 44, 38, 34, 40, 46, 36, 37, 39, 33, 41, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter('Age', 'Score', data=df, color='red', label='Scores')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 36, 40, 44, 43, 45, 37, 46, 34, 41, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 38, 40, 46, 36, 43, 44, 41, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter('Age', 'Score', data=df, color='red', label='Scores')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.020426034927368164, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 46, 37, 44, 41, 38, 36, 43, 33, 35, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 43, 42, 36, 35, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.rename(columns={'Name': 'name'}).drop_duplicates()\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='upper left')\n    return plt, ax", "compilation_passed": true, "time": 0.023223876953125, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 43, 41, 40, 46, 42, 35, 34, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 39, 40, 42, 36, 46, 35, 45, 43, 41, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.sort_values('Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = plt.subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (plt, ax)", "compilation_passed": true, "time": 0.005548954010009766, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 43, 33, 44, 40, 45, 35, 34, 42, 37, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.age, df.score)\n    df['Age_up'] = df['Age'] + 10\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005724191665649414, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02202320098876953, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 36, 46, 42, 44, 37, 40, 34, 38, 39, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input is not a DataFrame')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 33, 39, 41, 44, 37, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021657943725585938, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.1305849552154541, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 44, 45, 46, 37, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a pandas DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * df['Score'] - intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 46, 43, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='upper left')\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 34, 39, 37, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure()\n    ax = plt.subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0218503475189209, "tests_passed": true, "error": null}}
{"selected_lines": [36, 46, 34, 39, 38, 41, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression: Age vs Score')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021798133850097656, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.xlabel(\"Age\")\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0063092708587646484, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.1457688808441162, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 40, 41, 34, 44, 45, 35, 37, 39, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f'The input should be pandas DataFrame.')\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure(figsize=(8, 6), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title('Linear Regression: Age vs Score')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.005391120910644531, "tests_passed": true, "error": null}}
{"selected_lines": [45, 43, 44, 34, 38, 39, 41, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.xlabel(\"Age\")\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005621910095214844, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 44, 43, 36, 42, 34, 39, 46, 40, 45, 33, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02173614501953125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 37, 44, 45, 46, 35, 36, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 44, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.reset_index().drop_duplicates(subset=\"Name\", keep=\"first\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023213863372802734, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 44, 37, 38, 33, 45, 42, 46, 43, 40, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * df['Score'] - intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.size'] = 10\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 33, 37, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02983880043029785, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39, 41, 35, 40, 42, 38, 33, 46, 45, 37, 34, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n    df = df.drop_duplicates(subset=[\"Name\"])\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(14, 5))\n    ax = plt.subplot(111)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.007341146469116211, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 37, 45, 39, 33, 41, 44, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023611068725585938, "tests_passed": true, "error": null}}
{"selected_lines": [45, 33, 41, 40, 43, 39, 37, 44, 38, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0065767765045166016, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 46, 33, 40, 42, 41, 35, 36, 34, 45, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='upper left')\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 38, 36, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023967981338500977, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.024290800094604492, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39, 35, 43, 45, 41, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df[df.index != df.duplicated()]\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 39, 38, 44, 37, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = plt.subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 45, 44, 39, 38, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = plt.subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0240631103515625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 42, 39, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 33, 35, 45, 34, 44, 43, 36, 39, 46, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.rename(columns={'Name': 'name'}).drop_duplicates()\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.xlabel('Age')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend()\n    plt.legend()\n    return (plt, ax)", "compilation_passed": true, "time": 0.006870746612548828, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 38, 40, 43, 39, 35, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0056340694427490234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 40, 45, 46, 43, 44, 35, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={'Name': 'name'}).drop_duplicates()\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0058176517486572266, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 42, 39, 38, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006587982177734375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 41, 38, 46, 43, 42, 37, 36, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='upper left')\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 36, 43, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.xlabel(\"Age\")\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006150960922241211, "tests_passed": true, "error": null}}
{"selected_lines": [38, 46, 33, 40, 35, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 40, 45, 42, 41, 36, 35, 34, 38, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005815982818603516, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 34, 39, 36, 42, 41, 43, 40, 44, 46, 45, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(bottom=0.2)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 46, 40, 39, 45, 36, 38, 42, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 46, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.00627589225769043, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 43, 45, 34, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df[df.index != df.duplicated()]\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023298978805541992, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 38, 39, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02399611473083496, "tests_passed": true, "error": null}}
{"selected_lines": [45, 41, 44, 42, 40, 33, 36, 37, 43, 46, 38, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], marker='o')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression: Age vs Score')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 43, 44, 42, 37, 46, 39, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], marker='o')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.legend()\n    return (plt, ax)", "compilation_passed": true, "time": 0.006421089172363281, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('The input df should be a pandas DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02365732192993164, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 46, 41, 35, 42, 34, 38, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.sort_values('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 46, 39, 44, 36, 34, 43, 41, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame!\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 38, 41, 40, 34, 46, 39, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.size'] = 10\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 38, 40, 36, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.reset_index().drop_duplicates(subset=\"Name\", keep=\"first\")\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005817890167236328, "tests_passed": true, "error": null}}
{"selected_lines": [38, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 39, 42, 43, 38, 44, 46, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'o', df['Age_up'], df['Score'], '-')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.00610041618347168, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input is not a DataFrame')\n    df = df.sort_values('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022368192672729492, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.14244484901428223, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02249765396118164, "tests_passed": true, "error": null}}
{"selected_lines": [46, 38, 41, 36, 40, 33, 34, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02567601203918457, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 43, 45, 42, 36, 38, 46, 34, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.sort_values('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 33, 42, 35, 44, 37, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Name\"}).sort_values(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006834983825683594, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 36, 33, 42, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005638837814331055, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 44, 38, 40, 39, 46, 37, 33, 42, 41, 35, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 10\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression: Age and Score\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 41, 37, 33, 39, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022912979125976562, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 33, 45, 36, 38, 43, 37, 42, 35, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError('Input should be a DataFrame.')\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005805253982543945, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 44, 34, 38, 45, 43, 42, 46, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 46, 33, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError('The input df should be a pandas DataFrame.')\n    df = df[df.index != df.duplicated()]\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02277398109436035, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 45, 36, 42, 41, 43, 44, 39, 40, 38, 37, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 46, 39, 38, 41, 36, 43, 42, 34, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f'The input should be pandas DataFrame.')\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02188277244567871, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 38, 36, 44, 35, 46, 45, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.DataFrame:\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 42, 41, 35, 36, 33, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title('Linear Regression: Age vs Score')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022676944732666016, "tests_passed": true, "error": null}}
{"selected_lines": [33, 44, 42, 38, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02229619026184082, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('df is not a DataFrame')\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02239704132080078, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 45, 46, 36, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('The input df should be a pandas DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 41, 43, 42, 46, 39, 35, 37, 45, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = plt.subplot()\n    plt.plot(df['Age'], df['Score'], 'bo', label='Original Data')\n    plt.plot(df['Age'], df['Age_up'], label='Regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 41, 36, 37, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df[df.index != df.duplicated()]\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.021259069442749023, "tests_passed": true, "error": null}}
{"selected_lines": [33, 46, 42, 35, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.009878158569335938, "tests_passed": true, "error": null}}
{"selected_lines": [44, 38, 37, 43, 39, 41, 34, 46, 36, 40, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006458282470703125, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 41, 46, 43, 39, 40, 33, 45, 44, 36, 42, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 39, 36, 41, 40, 38, 33, 46, 34, 43, 37, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure()\n    ax = plt.subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression: Age vs Score')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.005518198013305664, "tests_passed": true, "error": null}}
{"selected_lines": [43, 38, 41, 34, 46, 40, 37, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 1\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='upper left')\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 40, 35, 41, 36, 33, 45, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'ro')\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005817890167236328, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 35, 42, 46, 40, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression: Age and Score\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 43, 38, 37, 35, 42, 33, 45, 46, 41, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError(\"Input should be a DataFrame.\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 46, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 33, 43, 39, 37, 42, 44, 35, 46, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 42, 46, 37, 45, 41, 43, 36, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 36, 46, 35, 41, 40, 37, 42, 39, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 38, 43, 46, 40, 35, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(bottom=0.2)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022512197494506836, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.03701305389404297, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.12992000579833984, "tests_passed": true, "error": null}}
{"selected_lines": [33, 46, 42, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02377009391784668, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022076845169067383, "tests_passed": true, "error": null}}
{"selected_lines": [46, 39, 34, 45, 43, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = plt.subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (plt, ax)", "compilation_passed": true, "time": 0.020511865615844727, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 40, 39, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006325960159301758, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 37, 40, 42, 46, 35, 39, 43, 45, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 34, 35, 43, 37, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.sort_values(by='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005682945251464844, "tests_passed": true, "error": null}}
{"selected_lines": [43, 41, 36, 44, 42, 33, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.025493144989013672, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 41, 39, 37, 46, 34, 42, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('df is not a DataFrame')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'], df['Age_up'], color='red', linewidth=3, label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.15267109870910645, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 40, 46, 41, 44, 43, 45, 34, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset=[\"Name\"], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46, 34, 37, 39, 44, 40, 43, 45, 35, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.drop_duplicates(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend(loc='upper left')\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 41, 45, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022060155868530273, "tests_passed": true, "error": null}}
{"selected_lines": [33, 45, 36, 37, 38, 39, 42, 46, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 37, 46, 36, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 40, 39, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 43, 45, 37, 46, 44, 41, 40, 34, 33, 35, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"Input df is not a DataFrame!\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * df['Score'] - intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter('Age', 'Score', data=df, color='red', label='Scores')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.title('Linear Regression: Age vs Score')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.020856857299804688, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 43, 46, 39, 34, 36, 42, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age_up'], df['Score'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title('Linear Regression: Age vs Score')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022411108016967773, "tests_passed": true, "error": null}}
{"selected_lines": [36, 46, 43, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 35, 44, 33, 36, 34, 37, 42, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 39, 34, 38, 42, 44, 43, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot()\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006023883819580078, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 33, 35, 34, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022717952728271484, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 36, 34, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame!\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02442193031311035, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 46, 35, 33, 34, 42, 36, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"Input should be a DataFrame.\")\n    df = df.drop_duplicates(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 39, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02664494514465332, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression: Age vs Score')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022927045822143555, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 42, 38, 40, 46, 33, 45, 44, 36, 34, 43, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError('Input is not a DataFrame')\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(bottom=0.2)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005402088165283203, "tests_passed": true, "error": null}}
{"selected_lines": [38, 44, 35, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression: Age vs Score')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 35, 37, 34, 44, 33, 41, 40, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.drop_duplicates(subset=[\"Name\"])\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.xlabel('Age')\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0057108402252197266, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 40, 34, 36, 41, 45, 39, 43, 38, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0053141117095947266, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 38, 34, 35, 43, 46, 36, 41, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 42, 41, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022701025009155273, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 34, 45, 43, 36, 44, 38, 35, 37, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.005517244338989258, "tests_passed": true, "error": null}}
{"selected_lines": [36, 44, 46, 38, 39, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 37, 46, 45, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021824121475219727, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 38, 41, 40, 39, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0058231353759765625, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 42, 44, 39, 37, 34, 38, 45, 35, 46, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 46, 42, 33, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = plt.subplot()\n    plt.subplots_adjust(bottom=0.2)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006092071533203125, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.15332818031311035, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 44, 38, 45, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02216196060180664, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.14385581016540527, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02207207679748535, "tests_passed": true, "error": null}}
{"selected_lines": [38, 46, 35, 45, 43, 34, 37, 44, 42, 39, 40, 33, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.005530834197998047, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 33, 44, 36, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.reset_index().drop_duplicates(subset=\"Name\", keep=\"first\")\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022943973541259766, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 35, 40, 36, 42, 38, 46, 39, 44, 41, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005671024322509766, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 41, 42, 46, 44, 35, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame\")\n    df = df[df.index != df.duplicated()]\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', linewidth=3, label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02337193489074707, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 38, 35, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.026499032974243164, "tests_passed": true, "error": null}}
{"selected_lines": [44, 34, 43, 45, 41, 36, 35, 42, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.020955801010131836, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 43, 42, 45, 38, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0055921077728271484, "tests_passed": true, "error": null}}
{"selected_lines": [46, 34, 39, 43, 40, 45, 33, 36, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f\"Input is not a DataFrame, instead is {type(df)}\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.xlabel('Age')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005508899688720703, "tests_passed": true, "error": null}}
{"selected_lines": [46, 38, 44, 39, 41, 37, 40, 36, 43, 35, 42, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0056781768798828125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 35, 44, 39, 45, 38, 34, 40, 43, 42, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.sort_values('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.xlabel(\"Age\")\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (plt, ax)", "compilation_passed": true, "time": 0.005709171295166016, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.20231008529663086, "tests_passed": true, "error": null}}
{"selected_lines": [45, 37, 35, 42, 36, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 37, 38, 41, 46, 39, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame.\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 33, 34, 46, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 37, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0056650638580322266, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 38, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021962881088256836, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 40, 39, 36, 35, 44, 41, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.xlabel('Age')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02204608917236328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 42, 43, 40, 39, 34, 44, 35, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.set_index(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.20231008529663086, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022480010986328125, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 36, 41, 43, 45, 40, 44, 34, 33, 46, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], color='green', marker='o', linestyle='-')\n    plt.plot(df['Age'], df['Age_up'], color='red', linewidth=3, label='Linear Regression')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 38, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 39, 46, 44, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 33, 43, 42, 46, 44, 35, 39, 38, 36, 37, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame!\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.00609588623046875, "tests_passed": true, "error": null}}
{"selected_lines": [44, 36, 43, 34, 46, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('df is not a DataFrame')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.0236968994140625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 46, 44, 35, 36, 34, 39, 41, 38, 37, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 40, 35, 44, 38, 46, 34, 33, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], color='green', marker='o', linestyle='-')\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 39, 33, 41, 43, 36, 37, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope * df['Score'] - intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022954940795898438, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 38, 36, 34, 45, 43, 44, 42, 41, 40, 46, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('The input df should be a pandas DataFrame.')\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope * df['Score'] - intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.title('Linear Regression: Age vs Score')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36, 39, 43, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022706985473632812, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 38, 43, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022221803665161133, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 36, 40, 35, 46, 42, 45, 34, 43, 44, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError('Input is not a DataFrame')\n    df = df.sort_values('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 46, 39, 35, 44, 36, 38, 37, 40, 34, 43, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.DataFrame:\n        raise ValueError\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005550861358642578, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006066083908081055, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 38, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.legend()\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006315946578979492, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 44, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023407697677612305, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 40, 41, 39, 43, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006453037261962891, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005798816680908203, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 41, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = (df['Age'] + slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02184605598449707, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.137009859085083, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 37, 33, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.DataFrame:\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023559093475341797, "tests_passed": true, "error": null}}
{"selected_lines": [41, 46, 44, 43, 38, 34, 42, 39, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.set_index(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 35, 36, 44, 41, 46, 39, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'o', df['Age_up'], df['Score'], '-')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 36, 35, 46, 37, 40, 44, 45, 33, 42, 41, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 10\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 43, 44, 39, 37, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022569894790649414, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 44, 40, 36, 33, 41, 35, 39, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.024539947509765625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 39, 46, 42, 43, 33, 38, 45, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 44, 45, 41, 46, 37, 33, 43, 34, 35, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.age, df.score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 39, 44, 37, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend()\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023759841918945312, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 46, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(bottom=0.2)\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0056018829345703125, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 33, 46, 45, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.020257949829101562, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 37, 33, 46, 38, 44, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure(figsize=(8, 6), dpi=100)\n    ax = plt.subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (plt, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 40, 43, 44, 37, 35, 45, 33, 34, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 34, 44, 36, 43, 46, 45, 41, 38, 40, 33, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression', color='orange')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title('Linear Regression: Age vs Score')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 42, 38, 33, 37, 35, 45, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title('Linear Regression: Age vs Score')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023036956787109375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 42, 36, 39, 35, 45, 44, 37, 40, 34, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + 10\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'o', df['Age_up'], df['Score'], '-')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.005615949630737305, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 33, 34, 42, 44, 38, 39, 45, 36, 46, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 1\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 42, 46, 35, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 38, 42, 35, 46, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('df is not a DataFrame')\n    df = df.sort_values('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005549907684326172, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 35, 39, 36, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.006941795349121094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 46, 41, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005629777908325195, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 35, 34, 38, 39, 40, 45, 37, 42, 41, 46, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df[df.index != df.duplicated()]\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'ro')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005739927291870117, "tests_passed": true, "error": null}}
{"selected_lines": [44, 38, 42, 46, 36, 41, 39, 35, 34, 37, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame!\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0218508243560791, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 40, 34, 35, 44, 41, 36, 43, 46, 37, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 40, 36, 46, 45, 39, 42, 38, 34, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('df is not a DataFrame')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression', color='orange')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006089925765991211, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02225208282470703, "tests_passed": true, "error": null}}
{"selected_lines": [46, 40, 45, 42, 41, 38, 44, 36, 37, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 10\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 43, 41, 35, 44, 39, 36, 34, 37, 33, 46, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 35, 39, 43, 40, 41, 44, 38, 45, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.005277872085571289, "tests_passed": true, "error": null}}
{"selected_lines": [45, 38, 44, 41, 39, 35, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(bottom=0.2)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005990028381347656, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.12566423416137695, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 43, 45, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 38, 44, 43, 34, 37, 33, 45, 39, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.xlabel('Age')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend()\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 42, 46, 36, 33, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='upper left')\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 41, 33, 40, 37, 45, 35, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 39, 43, 44, 38, 46, 40, 41, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.sort_values('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 38, 35, 40, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a pandas DataFrame\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 36, 42, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 39, 42, 38, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(bottom=0.2)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005553722381591797, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 38, 46, 42, 44, 39, 45, 40, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.00594782829284668, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 44, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005568027496337891, "tests_passed": true, "error": null}}
{"selected_lines": [46, 44, 40, 36, 34, 35, 41, 38, 45, 39, 42, 33, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression: Age and Score\")\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006073713302612305, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 34, 46, 40, 37, 36, 33, 42, 35, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame!\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005580902099609375, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 42, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(bottom=0.2)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.009348869323730469, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 35, 37, 46, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = (df['Age'] + slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], color='green', marker='o', linestyle='-')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.024756908416748047, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 36, 37, 33, 38, 42, 41, 46, 35, 45, 40, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Name\"}).sort_values(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.0056209564208984375, "tests_passed": true, "error": null}}
{"selected_lines": [45, 41, 36, 44, 46, 39, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={'Name': 'name'}).drop_duplicates()\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame) is False:\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0055119991302490234, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 46, 42, 44, 36, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 34, 46, 36, 45, 43, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression', color='orange')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 39, 46, 41, 36, 38, 35, 37, 43, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame!\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = plt.subplot(111)\n    plt.scatter('Age', 'Score', data=df, color='red', label='Scores')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 33, 45, 38, 35, 34, 36, 42, 37, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(\"Name\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='upper left')\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02201700210571289, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 38, 44, 33, 35, 45, 42, 37, 41, 34, 36, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a pandas DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression: Age and Score\")\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005992889404296875, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 33, 43, 46, 36, 34, 40, 44, 37, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return (plt, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.005341053009033203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.13929390907287598, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 43, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02237391471862793, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.DataFrame:\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=[\"Name\"], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.xlabel(\"Age\")\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.007186174392700195, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 41, 43, 40, 33, 42, 37, 36, 35, 45, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 34, 43, 39, 35, 44, 41, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df[df.index != df.duplicated()]\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], df['Score'], label='Linear Regression')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02285003662109375, "tests_passed": true, "error": null}}
{"selected_lines": [45, 39, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.020470142364501953, "tests_passed": true, "error": null}}
{"selected_lines": [33, 45, 41, 40, 37, 39, 43, 38, 36, 35, 44, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005543947219848633, "tests_passed": true, "error": null}}
{"selected_lines": [37, 46, 35, 33, 36, 44, 40, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError\n    df = df.rename(columns={'Name': 'name'}).drop_duplicates()\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 40, 33, 46, 34, 36, 37, 42, 39, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'ro')\n    plt.plot(df['Age'], df['Age_up'], color='red', linewidth=3, label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 37, 42, 46, 40, 44, 35, 34, 39, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.drop_duplicates(subset=[\"Name\"])\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 37, 45, 33, 41, 34, 43, 35, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.00892186164855957, "tests_passed": true, "error": null}}
{"selected_lines": [45, 37, 46, 41, 44, 38, 42, 33, 43, 39, 35, 36, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0069429874420166016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 39, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02273416519165039, "tests_passed": true, "error": null}}
{"selected_lines": [45, 36, 37, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.age, df.score)\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 41, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.reset_index().drop_duplicates(subset=\"Name\", keep=\"first\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 40, 34, 44, 37, 45, 46, 39, 33, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('The input df should be a pandas DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression: Age and Score\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 40, 43, 39, 46, 33, 34, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0233001708984375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 46, 41, 38, 34, 43, 45, 42, 36, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * df['Score'] - intercept\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 36, 38, 33, 42, 40, 45, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.size'] = 10\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006169795989990234, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 46, 40, 45, 35, 42, 34, 44, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 40, 45, 36, 46, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02141284942626953, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 37, 33, 36, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02343010902404785, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 33, 38, 45, 42, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError('df is not a DataFrame')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'ro')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006089925765991211, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 37, 44, 45, 34, 42, 36, 39, 43, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + 1\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return (plt, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 37, 34, 35, 41, 45, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.sort_values('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.xlabel(\"Age\")\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.005400180816650391, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 37, 33, 38, 43, 46, 40, 34, 35, 42, 39, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'o', df['Age_up'], df['Score'], '-')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 35, 42, 40, 45, 46, 43, 44, 34, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = (df['Age'] + slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'ro')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.006291389465332031, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 39, 45, 37, 44, 42, 35, 36, 40, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=[\"Name\"])\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 33, 39, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = plt.subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023812294006347656, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 36, 46, 41, 43, 33, 42, 45, 34, 44, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022124052047729492, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 39, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0060961246490478516, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.rename(columns={'Name': 'name'}).drop_duplicates()\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02296590805053711, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.15109014511108398, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 35, 38, 46, 33, 36, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 45, 34, 39, 41, 38, 33, 40, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 45, 33, 36, 34, 37, 38, 43, 46, 35, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.DataFrame:\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 34, 41, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression', color='orange')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005728721618652344, "tests_passed": true, "error": null}}
{"selected_lines": [46, 34, 40, 36, 35, 38, 42, 37, 33, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f\"Input is not a DataFrame, instead is {type(df)}\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 35, 44, 36, 40, 42, 33, 43, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df[df.index != df.duplicated()]\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'ro')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 46, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33, 34, 38, 41, 46, 45, 44, 40, 42, 39, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a pandas DataFrame\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'o', df['Age_up'], df['Score'], '-')\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.title('Linear Regression: Age vs Score')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 34, 43, 44, 39, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend()\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02882695198059082, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.020447731018066406, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 44, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022115707397460938, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 46, 33, 43, 44, 41, 35, 42, 36, 38, 45, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], marker='o')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 36, 40, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.size'] = 10\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='upper left')\n    return plt, ax", "compilation_passed": true, "time": 0.005625009536743164, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 42, 33, 39, 45, 41, 37, 36, 38, 35, 46, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot()\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 46, 33, 39, 38, 36, 44, 45, 35, 34, 40, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.sort_values('Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.legend()\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 39, 34, 45, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 33, 35, 42, 46, 38, 43, 41, 39, 36, 40, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input is not a DataFrame')\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 38, 37, 42, 33, 45, 35, 40, 36, 39, 44, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame.\")\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.age, df.score)\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 34, 45, 35, 42, 43, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('df is not a DataFrame')\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.02292466163635254, "tests_passed": true, "error": null}}
{"selected_lines": [44, 41, 33, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = (df['Age'] + slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02226090431213379, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 35, 37, 36, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Name\"}).sort_values(\"Name\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * df['Score'] - intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022588253021240234, "tests_passed": true, "error": null}}
{"selected_lines": [34, 46, 40, 38, 42, 45, 36, 43, 39, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input should be a DataFrame.')\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 35, 43, 42, 41, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame!\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02214503288269043, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 44, 39, 46, 43, 42, 35, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('df is not a DataFrame')\n    df = df.drop_duplicates(subset=[\"Name\"], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], 'o', df['Age_up'], df['Score'], '-')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 36, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 42, 33, 38, 37, 45, 36, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005561113357543945, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 37, 43, 41, 45, 33, 42, 40, 44, 46, 38, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], marker='o')\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0064089298248291016, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 36, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'bo', label='Original Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0077130794525146484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 40, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'o', df['Age_up'], df['Score'], '-')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005841970443725586, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 33, 35, 46, 34, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 33, 46, 38, 34, 39, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure()\n    ax = plt.subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 39, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 35, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=[\"Name\"])\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022474050521850586, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', linewidth=3, label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 33, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022425174713134766, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 41, 37, 44, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005650043487548828, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 35, 40, 46, 43, 41, 42, 44, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df[df.index != df.duplicated()]\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 1\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02201700210571289, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 38, 40, 33, 44, 35, 43, 46, 37, 42, 45, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 38, 35, 33, 37, 46, 39, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (plt, ax)", "compilation_passed": true, "time": 0.005553722381591797, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 39, 40, 46, 44, 41, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = plt.subplot()\n    plt.scatter('Age', 'Score', data=df, color='red', label='Scores')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 35, 44, 39, 45, 36, 40, 38, 37, 33, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 46, 33, 37, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 34, 45, 38, 36, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend(loc='upper left')\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 40, 45, 46, 44, 36, 39, 37, 33, 38, 35, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], color='red', linewidth=3, label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 40, 46, 34, 43, 37, 39, 44, 45, 41, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression: Age vs Score')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 35, 39, 40, 45, 34, 36, 44, 46, 38, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 36, 34, 38, 35, 40, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.sort_values(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], marker='o')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 40, 43, 33, 35, 46, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.xlabel('Age')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006036043167114258, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 40, 34, 46, 39, 43, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.sort_values(\"Name\")\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter('Age', 'Score', data=df, color='red', label='Scores')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 45, 46, 36, 35, 38, 33, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02192211151123047, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 39, 33, 37, 43, 34, 44, 42, 46, 45, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(f'The input should be pandas DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(bottom=0.2)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (plt, ax)", "compilation_passed": true, "time": 0.0055999755859375, "tests_passed": true, "error": null}}
{"selected_lines": [44, 39, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 33, 39, 38, 42, 44, 46, 36, 37, 35, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 41, 34, 45, 42, 40, 39, 44, 33, 46, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset=[\"Name\"], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 36, 44, 34, 37, 35, 39, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(subset=[\"Name\"])\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age'], df['Age_up'], label='Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 42, 43, 40, 39, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006147861480712891, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 42, 46, 40, 43, 35, 45, 39, 33, 36, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression', color='orange')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 39, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.00556492805480957, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 42, 45, 34, 40, 35, 38, 43, 41, 33, 44, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.set_index(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age_up'], df['Score'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.005276918411254883, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 38, 34, 42, 44, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022011756896972656, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 41, 40, 35, 46, 39, 36, 37, 45, 44, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.024171113967895508, "tests_passed": true, "error": null}}
{"selected_lines": [45, 44, 40, 43, 38, 37, 42, 39, 46, 36, 33, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], 'bo', label='Original Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 46, 43, 37, 33, 39, 40, 35, 38, 36, 41, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 34, 42, 35, 40, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a pandas DataFrame\")\n    df = df.sort_values('Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title('Linear Regression: Age vs Score')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005638837814331055, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 44, 33, 37, 36, 46, 43, 42, 40, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], marker='o')\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 42, 38, 37, 33, 36, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure()\n    ax = plt.subplot()\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0059850215911865234, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 43, 33, 46, 44, 42, 45, 34, 35, 36, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.DataFrame:\n        raise ValueError(\"The input is not a DataFrame.\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 35, 38, 45, 46, 34, 39, 36, 33, 43, 42, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('The input df should be a pandas DataFrame.')\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 42, 33, 34, 43, 39, 46, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f'The input should be pandas DataFrame.')\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], marker='o')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 46, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.00603795051574707, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.14562010765075684, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 45, 41, 43, 36, 42, 37, 33, 38, 46, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], 'ro')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.005811929702758789, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.14553284645080566, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.025382041931152344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41, 46, 40, 38, 44, 33, 42, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame!\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend()\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 38, 42, 33, 40, 46, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006268024444580078, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 40, 33, 34, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f'The input should be pandas DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005697011947631836, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 46, 43, 45, 34, 35, 42, 40, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame!\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression: Age and Score\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 41, 34, 43, 46, 38, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', linewidth=3, label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 34, 37, 38, 41, 45, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.1415550708770752, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 36, 45, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 37, 41, 46, 34, 44, 39, 43, 38, 40, 42, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.DataFrame:\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend(loc='best')\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 39, 44, 38, 40, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=[\"Name\"], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.size'] = 10\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005636930465698242, "tests_passed": true, "error": null}}
{"selected_lines": [36, 45, 43, 34, 37, 41, 44, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02206587791442871, "tests_passed": true, "error": null}}
{"selected_lines": [34, 45, 39, 33, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('The input df should be a pandas DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 35, 42, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title('Linear Regression: Age vs Score')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 33, 36, 35, 39, 41, 40, 38, 42, 44, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(f'The input should be pandas DataFrame.')\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.xlabel(\"Age\")\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006140947341918945, "tests_passed": true, "error": null}}
{"selected_lines": [36, 44, 39, 37, 35, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.set_index(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + 1\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021950960159301758, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 46, 39, 44, 36, 34, 41, 40, 38, 37, 45, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 44, 41, 43, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02428293228149414, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.15019893646240234, "tests_passed": true, "error": null}}
{"selected_lines": [45, 34, 42, 43, 46, 41, 44, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 34, 38, 36, 40, 35, 33, 45, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input is not a DataFrame.\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression: Age and Score\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 46, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 1\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 45, 39, 38, 34, 44, 40, 42, 35, 46, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.drop_duplicates(subset=[\"Name\"], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.subplots_adjust(bottom=0.2)\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 45, 36, 46, 40, 35, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.reset_index().drop_duplicates(subset=\"Name\", keep=\"first\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 35, 46, 33, 42, 43, 38, 34, 45, 37, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.rename(columns={'Name': 'name'}).drop_duplicates()\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = plt.subplot(111)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 46, 39, 38, 45, 40, 43, 33, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], marker='o')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 34, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.026526212692260742, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 33, 43, 38, 45, 37, 34, 42, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a pandas DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005962848663330078, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 45, 40, 38, 36, 33, 43, 46, 41, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame!\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 45, 44, 34, 39, 41, 37, 38, 43, 42, 46, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (plt, ax)", "compilation_passed": true, "time": 0.005719184875488281, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 36, 46, 33, 35, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=[\"Name\"], keep='first')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 37, 46, 45, 35, 39, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 34, 33, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005599021911621094, "tests_passed": true, "error": null}}
{"selected_lines": [44, 40, 46, 38, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006106138229370117, "tests_passed": true, "error": null}}
{"selected_lines": [45, 36, 34, 37, 43, 35, 33, 44, 41, 38, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df.rename(columns={'Name': 'name'}).drop_duplicates()\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 34, 35, 39, 43, 42, 33, 36, 38, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022075891494750977, "tests_passed": true, "error": null}}
{"selected_lines": [35, 44, 41, 37, 38, 39, 45, 46, 40, 43, 33, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.005408048629760742, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 39, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = (df['Age'] + slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0218350887298584, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 45, 46, 43, 41, 38, 40, 34, 33, 35, 39, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='upper left')\n    return plt, ax", "compilation_passed": true, "time": 0.006374835968017578, "tests_passed": true, "error": null}}
{"selected_lines": [46, 34, 36, 37, 39, 40, 33, 38, 44, 41, 35, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression: Age and Score\")\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(111)\n    plt.scatter('Age', 'Score', data=df, color='red', label='Scores')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02240467071533203, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 46, 34, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 46, 38, 41, 35, 40, 42, 33, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.subplots_adjust(bottom=0.2)\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.legend()\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 41, 46, 44, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02208995819091797, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 45, 38, 34, 44, 39, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend(loc='upper left')\n    return plt, ax", "compilation_passed": true, "time": 0.021791934967041016, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 39, 44, 37, 43, 41, 46, 33, 34, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError\n    df = df.rename(columns={'Name': 'name'}).drop_duplicates()\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 36, 37, 35, 40, 33, 39, 44, 45, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = (df['Age'] + slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006145000457763672, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 44, 45, 40, 38, 37, 34, 41, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0053348541259765625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 41, 39, 40, 34, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f\"Input is not a DataFrame, instead is {type(df)}\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 38, 45, 39, 46, 37, 42, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021883726119995117, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 35, 37, 44, 43, 40, 36, 41, 39, 45, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Name\"}).sort_values(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'], df['Age_up'], color='red', linewidth=3, label='Linear Regression')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006526947021484375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 41, 46, 37, 44, 43, 42, 38, 40, 45, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'ro')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 40, 38, 45, 39, 33, 44, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.legend()\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022084951400756836, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02234506607055664, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.04029512405395508, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.15081381797790527, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 46, 34, 42, 41, 36, 43, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.sort_values('Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 37, 42, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 37, 46, 41, 36, 33, 35, 34, 39, 42, 43, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input is not a DataFrame.\")\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], color='red', linewidth=3, label='Linear Regression')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 46, 41, 40, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression: Age and Score\")\n    plt.plot(df['Age'], df['Age_up'], color='red', linewidth=3, label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 33, 42, 38, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.legend()\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02390575408935547, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 46, 43, 38, 39, 41, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.xlabel('Age')\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006098031997680664, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.20231008529663086, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.12939190864562988, "tests_passed": true, "error": null}}
{"selected_lines": [36, 46, 34, 43, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02223992347717285, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 33, 35, 41, 37, 43, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005703926086425781, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.20231008529663086, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 39, 44, 37, 42, 43, 34, 41, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 10\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.xlabel('Age')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005968809127807617, "tests_passed": true, "error": null}}
{"selected_lines": [46, 37, 44, 42, 35, 39, 34, 45, 33, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input should be a DataFrame.')\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.024444103240966797, "tests_passed": true, "error": null}}
{"selected_lines": [35, 45, 38, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02217388153076172, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(by='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.1588430404663086, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 35, 40, 33, 39, 45, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input is not a DataFrame.\")\n    df = df.drop_duplicates(subset=[\"Name\"])\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot()\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 41, 40, 37, 42, 43, 46, 38, 44, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset=[\"Name\"], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], 'bo', label='Original Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0060138702392578125, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 44, 41, 38, 46, 43, 35, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f'The input should be pandas DataFrame.')\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.20231008529663086, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 43, 40, 41, 44, 37, 39, 42, 45, 34, 33, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a pandas DataFrame\")\n    df = df.sort_values(\"Name\")\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.006039857864379883, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 46, 41, 35, 44, 37, 45, 38, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input is not a DataFrame')\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022145986557006836, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.14943528175354004, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 33, 46, 35, 38, 41, 36, 37, 40, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.reset_index().drop_duplicates(subset=\"Name\", keep=\"first\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.xlabel('Age')\n    plt.plot(df['Age'], df['Age_up'], label='Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 35, 37, 44, 38, 46, 42, 45, 33, 36, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('The input df should be a pandas DataFrame.')\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 37, 34, 38, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 46, 45, 43, 41, 44, 36, 40, 42, 37, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.008455276489257812, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 36, 40, 33, 34, 41, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.age, df.score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022439002990722656, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 45, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 36, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 36, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_val, p_val, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 35, 40, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 35, 45, 44, 37, 42, 41, 40, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'o', df['Age_up'], df['Score'], '-')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.grid(True)\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.005772113800048828, "tests_passed": true, "error": null}}
{"selected_lines": [43, 46, 35, 34, 38, 42, 39, 45, 33, 44, 40, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame.\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005892753601074219, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023660898208618164, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 35, 39, 40, 46, 41, 37, 45, 44, 43, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = (df['Age'] + slope)\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0067901611328125, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 43, 35, 36, 40, 33, 41, 38, 37, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={'Name': 'name'}).drop_duplicates()\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 33, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022156953811645508, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 45, 43, 35, 42, 38, 41, 46, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(subset=[\"Name\"])\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend(loc='best')\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 41, 38, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02172398567199707, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 44, 42, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0056188106536865234, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.13451004028320312, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend()\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02441120147705078, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.20231008529663086, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39, 46, 45, 36, 44, 38, 34, 42, 35, 37, 41, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(subset=[\"Name\"])\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * df['Score'] - intercept\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.14244484901428223, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023620128631591797, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 33, 46, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'ro')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006167888641357422, "tests_passed": true, "error": null}}
{"selected_lines": [45, 40, 33, 35, 37, 46, 42, 41, 38, 34, 43, 36, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(1, 1, 1)\n    plt.subplots_adjust(left=0.2)\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 40, 39, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input is not a DataFrame')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006405830383300781, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 35, 44, 33, 45, 41, 40, 42, 39, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values('Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0056591033935546875, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 44, 38, 41, 35, 46, 33, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 37, 46, 36, 34, 43, 35, 45, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('df is not a DataFrame')\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 42, 43, 36, 33, 37, 35, 45, 39, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression', color='orange')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend()\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.027637958526611328, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 46, 44, 38, 42, 45, 41, 35, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 35, 38, 44, 43, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022875070571899414, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 38, 41, 45, 44, 34, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.022806167602539062, "tests_passed": true, "error": null}}
{"selected_lines": [40, 45, 46, 36, 33, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005750894546508789, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.1334362030029297, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.13451004028320312, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 42, 35, 46, 44, 43, 33, 39, 36, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid()\n    return (plt, ax)", "compilation_passed": true, "time": 0.02041172981262207, "tests_passed": true, "error": null}}
{"selected_lines": [46, 34, 42, 45, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 36, 41, 39, 46, 33, 43, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6c49\u6587\u652f\u6301\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 36, 33, 37, 34, 45, 39, 43, 42, 35, 40, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005475759506225586, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 39, 41, 35, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006039857864379883, "tests_passed": true, "error": null}}
{"selected_lines": [33, 37, 44, 38, 35, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 45, 44, 40, 38, 37, 46, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'o', df['Age_up'], df['Score'], '-')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005820274353027344, "tests_passed": true, "error": null}}
{"selected_lines": [33, 40, 35, 36, 41, 43, 45, 42, 38, 37, 39, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.sort_values(\"Name\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] + 10\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 38, 36, 34, 40, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 44, 34, 42, 35, 45, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022211790084838867, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02207207679748535, "tests_passed": true, "error": null}}
{"selected_lines": [39, 41, 46, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 39, 45, 43, 46, 41, 40, 36, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 35, 34, 39, 44, 40, 45, 42, 41, 46, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError('Input should be a DataFrame.')\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = plt.subplot()\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 41, 45, 39, 34, 46, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input should be a DataFrame.')\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.xlabel(\"Age\")\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 34, 41, 43, 37, 46, 42, 36, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter('Age', 'Score', data=df, color='red', label='Scores')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022201061248779297, "tests_passed": true, "error": null}}
{"selected_lines": [33, 42, 41, 37, 36, 46, 40, 39, 43, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], color='green', marker='o', linestyle='-')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return (plt, ax)", "compilation_passed": true, "time": 0.006188154220581055, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 39, 38, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02182292938232422, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 36, 42, 38, 35, 39, 41, 33, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 1\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 43, 40, 44, 34, 42, 39, 36, 33, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.DataFrame:\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.00810098648071289, "tests_passed": true, "error": null}}
{"selected_lines": [46, 44, 41, 33, 38, 45, 39, 34, 36, 43, 40, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 42, 38, 35, 43, 45, 39, 36, 44, 34, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.sort_values(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.005994081497192383, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 45, 44, 40, 46, 42, 34, 33, 39, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 45, 41, 46, 33, 44, 39, 35, 40, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], marker='o')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.023894071578979492, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 43, 44, 46, 37, 35, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input is not a DataFrame')\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * df['Score'] - intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 44, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.021971940994262695, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.12992000579833984, "tests_passed": true, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.1305849552154541, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 38, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter('Age', 'Score', data=df, color='red', label='Scores')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02225518226623535, "tests_passed": true, "error": null}}
{"selected_lines": [33, 46, 34, 40, 37, 42, 39, 41, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * df['Score'] - intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']  # \u6307\u5b9a matplotlib \u5b57\u4f53\u663e\u793a\n    plt.plot(df['Age'], df['Age_up'], color='red', linewidth=3, label='Linear Regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 40, 44, 35, 46, 36, 41, 42, 39, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df[df.index != df.duplicated()]\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.rcParams['font.size'] = 10\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 44, 38, 39, 34, 33, 46, 35, 41, 37, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 46, 37, 38, 33, 39, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006124973297119141, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 45, 46, 44, 37, 43, 34, 42, 38, 41, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 35, 44, 33, 38, 41, 43, 40, 39, 42, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0054509639739990234, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 39, 33, 46, 36, 45, 42, 43, 34, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 38, 46, 41, 33, 43, 36, 34, 40, 39, 37, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.grid(True)\n    return (plt, ax)", "compilation_passed": true, "time": 0.005532026290893555, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 36, 45, 43, 46, 40, 34, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (plt, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 33, 46, 41, 35, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 44, 34, 37, 41, 40, 33, 39, 45, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input is not a DataFrame')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, _, _, _ = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = plt.subplot()\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02147674560546875, "tests_passed": true, "error": null}}
{"selected_lines": [43, 45, 40, 39, 33, 35, 38, 37, 46, 41, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 44, 40, 41, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.00699305534362793, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 38, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022378921508789062, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 35, 43, 45, 42, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.02229785919189453, "tests_passed": true, "error": null}}
{"selected_lines": [44, 33, 37, 40, 43, 45, 41, 36, 46, 35, 39, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep=False)\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], color='green', marker='o', linestyle='-')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005750894546508789, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Name\"}).sort_values(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'ro')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006273984909057617, "tests_passed": true, "error": null}}
{"selected_lines": [44, 37, 36, 40, 42, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope * (df['Age'].max() - df['Age'].min()) / 10\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(111)\n    plt.rcParams['font.sans-serif'] = ['SimHei']\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005575895309448242, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.15385699272155762, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.20231008529663086, "tests_passed": true, "error": null}}
{"selected_lines": [38, 43, 42, 40, 46, 44, 36, 39, 33, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 46, 42, 45, 44, 38, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 38, 45, 33, 42, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Regression')\n    plt.title('Linear Regression: Age vs Score')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='best')\n    return plt, ax", "compilation_passed": true, "time": 0.022708892822265625, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 44, 46, 35, 36, 45, 38, 42, 34, 33, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f\"Input is not a DataFrame, instead is {type(df)}\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 46, 37, 45, 39, 36, 34, 43, 38, 33], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 45, 42, 36, 43, 39, 35, 34, 33, 38, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame) is False:\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 46, 34, 42, 37, 41, 40, 45, 36, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame.\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 5\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 46, 42, 34, 40, 45, 41, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f'The input should be pandas DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df.Age, y=df.Score)\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], color='red', linewidth=3, label='Linear Regression')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022691011428833008, "tests_passed": true, "error": null}}
{"selected_lines": [46, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 44, 45, 33, 39, 40, 42, 41, 37, 35, 46, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame.\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.title(\"Linear Regression: Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.024405956268310547, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 37, 38, 33, 35, 34, 39, 45, 41, 44, 43, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(subset=\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.024101972579956055, "tests_passed": true, "error": null}}
{"selected_lines": [38, 45, 36, 46, 39, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 42, 34, 46, 40, 33, 35, 41, 44, 37, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError(\"The data is not a DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(df['Age'], df['Score'], 'ro')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.11437082290649414, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [37, 42, 46, 41, 40, 43, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 42, 38, 36, 34, 44, 40, 41, 33, 45, 37, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure(dpi=100)\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], color='red', linewidth=3, label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 35, 42, 44, 45, 34, 33, 46, 37, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 33, 37, 35, 45, 39, 41, 42, 44, 38, 40, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 1\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 42, 43, 33, 35, 34, 40, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter('Age', 'Score', data=df, color='red', label='Scores')\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022099971771240234, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 35, 37, 40, 45, 42, 36, 43, 44, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if isinstance(df, pd.DataFrame) is False:\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(keep='first')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0063359737396240234, "tests_passed": true, "error": null}}
{"selected_lines": [46, 41, 39, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022325992584228516, "tests_passed": true, "error": null}}
{"selected_lines": [44, 38, 42, 41, 43, 45, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02368617057800293, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 46, 33, 39, 43, 40, 37, 45, 44, 36, 38, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.generic.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 41, 39, 42, 38, 37, 33, 36, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.age, df.score)\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.xlabel(\"Age\")\n    plt.plot(df['Age'], df['Age_up'], c='#112266', label='Linear regression line')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 41, 44, 33, 37, 45, 46, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02254486083984375, "tests_passed": true, "error": null}}
{"selected_lines": [41, 33, 45, 44, 37, 39, 46, 36, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = plt.subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], df['Score'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02384781837463379, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 36, 39, 38, 34, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f'The input should be pandas DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend(loc='best')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0071659088134765625, "tests_passed": true, "error": null}}
{"selected_lines": [46, 40, 36, 34, 38, 35, 41, 44, 45, 37, 42, 33, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title(\"Linear Regression: Age and Score\")\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 38, 39, 35, 46, 41, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.rename(columns={\"Age\": \"age\", \"Score\": \"score\"})\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 36, 46, 33, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 40, 42, 36, 38, 33, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.xlabel('Age')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend(loc='best')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 46, 42, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope*(df['Age']+1)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 40, 38, 42, 37, 34, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter('Age', 'Score', data=df, color='red', label='Scores')\n    plt.plot(df['Age'], df['Age_up'], color='r', label='Linear regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.02251577377319336, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 43, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot([min(df['Age']), max(df['Age'])], [0, max(df['Age_up'])], color='blue', label='y = ax+b')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 34, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 42, 43, 37, 35, 33, 38, 40, 44, 36, 34, 45], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(keep=\"first\")\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.plot(df['Age'], df['Score'], 'ro')\n    plt.plot(df['Age'], df['Age_up'], color='red', label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.04029512405395508, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 38, 35, 41, 39, 34, 42, 46, 43, 40, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.drop_duplicates('Name', keep='first')\n    slope, intercept, r, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * slope + intercept\n    fig = plt.figure(dpi=200, figsize=(5, 4))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 34, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input df is not a DataFrame.')\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 38, 40, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.set_index(\"Name\")\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression: \\n Slope: {}, Intercept: {}'.format(slope, intercept), fontsize=16)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title(\"Linear regression: \\n Age vs Score\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005655050277709961, "tests_passed": true, "error": null}}
{"selected_lines": [38, 45, 36], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return plt, ax", "compilation_passed": true, "time": 0.02040386199951172, "tests_passed": true, "error": null}}
{"selected_lines": [37, 44, 33, 39, 46, 38, 34, 43, 35, 45, 42, 41], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a pandas DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 8))\n    ax = fig.add_subplot()\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age_up'], df['Score'], label='Linear regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.022268056869506836, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 41, 46, 39, 44, 40], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot()\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 37, 44, 41, 39, 40, 35, 46, 38, 45, 34, 42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(\"Name\")\n    slope, intercept, r, p, std_err = stats.linregress(x=df['Age'], y=df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = plt.subplot()\n    plt.title(\"Linear Regression\")\n    plt.plot(df['Age'], df['Age_up'], color='black', label='Linear Regression')\n    plt.title(\"Linear regression\")\n    plt.ylabel('Score')\n    plt.title('Linear regression: slope = {:.2f}, intercept = {:.2f}'.format(slope, intercept))\n    plt.grid()\n    return plt, ax", "compilation_passed": true, "time": 0.005469083786010742, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 39, 34, 38, 44, 40, 37, 33, 46], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'].transform(lambda x: x+slope)\n    fig = plt.figure(figsize=(14, 7), dpi=100)\n    ax = fig.add_subplot(1, 1, 1)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title(\"Linear Regression\")\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.005602836608886719, "tests_passed": true, "error": null}}
{"selected_lines": [45, 41, 42, 36, 46, 43, 40, 35, 37, 44, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.title('Linear Regression')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 38, 37, 35, 34, 43, 46, 42, 44], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a pandas DataFrame\")\n    df = df.drop_duplicates(subset=['Name'])\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\", fontsize=16)\n    plt.plot(df['Age'], df['Age_up'], c='#4889D8', label='Linear regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.006011247634887695, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 41, 34, 39, 37, 43], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + 10\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel(\"Age\")\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 41, 34, 44, 36, 40, 35, 39, 42, 43, 45, 37], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas.DataFrame object\")\n    df = df.sort_values('Name')\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] * (1 + slope)\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(1, 1, 1)\n    plt.scatter(df['Age'], df['Score'])\n    plt.plot(df['Age_up'], label='Linear Regression')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 44, 41, 35, 33, 45, 36, 46, 43, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df.drop_duplicates('Name')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'], df['Age_up'], label='Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 40, 38, 37, 42, 46, 35, 39, 43, 33, 41, 45, 34], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError('Input should be a DataFrame.')\n    df = df.sort_values(by='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure(figsize=(14, 5))\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age'], df['Age_up'], label='Linear regression')\n    plt.title(\"Linear Regression\")\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 40, 34, 43, 37, 36, 42, 39, 44, 35, 38], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n    df = df.drop_duplicates(['Name'], keep='first')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * df['Age'] + intercept\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.xlabel('Age')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.title('Linear Regression')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend(loc='upper left')\n    return plt, ax", "compilation_passed": true, "time": 0.005647182464599609, "tests_passed": true, "error": null}}
{"selected_lines": [40, 46, 38, 44, 45, 42, 34, 35, 37, 33, 39], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    df = df.loc[df['Name'] != 'Bob']\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = df['Age'] + slope\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.subplots_adjust(left=0.3, bottom=0.5, right=0.7, top=0.8)\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.drop_duplicates(subset='Name')\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = intercept + slope * df['Age']\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n    plt.scatter(df['Age'], df['Score'], label='Data')\n    plt.plot(df['Age'].values, df['Age_up'].values, 'r', label='Fitted line')\n    plt.legend()\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n    plt.legend()\n    return plt, ax", "compilation_passed": true, "time": 0.1415550708770752, "tests_passed": true, "error": null}}
{"selected_lines": [38, 40, 41, 46, 45, 37, 42, 44, 35], "result": {"code": "import pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Perform a linear regression between \"age\" and \"score\" in the DataFrame, excluding rows with duplicate names.\n    Plot the regression line and the scatter plot of the data.\n\n    Parameters:\n    df (DataFrame): The pandas DataFrame containing the data.\n\n    Returns:\n    tuple: A tuple containing the matplotlib.pyplot object and the axes object.\n\n    Raises:\n    - The function will raise a ValueError is input df is not a DataFrame.\n\n    Note:\n    - The function use \"Linear Regression\" for the plot title.\n    - The function use \"Age\" and \"Score\" as the xlabel and ylabel respectively.\n\n    Requirements:\n    - pandas\n    - scipy.stats\n    - matplotlib.pyplot\n\n    Example:\n    >>> data = pd.DataFrame([{'Name': 'Alice', 'Age': 20, 'Score': 70}, {'Name': 'Bob', 'Age': 25, 'Score': 75}, {'Name': 'Eve', 'Age': 30, 'Score': 80}])\n    >>> plt, ax = task_func(data)\n    >>> ax.lines[0].get_xdata()[0]\n    20\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df is not a DataFrame\")\n    df = df.rename(columns={\"Name\": \"Student\"}, inplace=False)\n    slope, intercept, r_value, _, _ = stats.linregress(df['Age'], df['Score'])\n    df['Age_up'] = slope * (df['Age'] - df['Age'].mean()) + df['Age'].mean()\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    plt.title(\"Linear Regression\")\n    plt.xlabel(\"Age\")\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear regression')\n    plt.grid(True)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
