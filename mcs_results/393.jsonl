{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 33, 32, 29, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(8, 4))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.15769219398498535, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2779867649078369, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 34, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, density=True, color='red', label='Histogram')\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014981746673583984, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 29, 32, 36, 35, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 33, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, density=True, color='red', label='Histogram')\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.12194418907165527, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 35, 32, 34, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample values')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.028730154037475586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 36, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=25, density=True, alpha=0.5, color='#00ff00')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('x')\n    stats.probplot(samples, plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.07440471649169922, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 32, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.010636091232299805, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 31, 32, 29, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.25823283195495605, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27898478507995605, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.03602910041809082, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 31, 34, 29, 30, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20)\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins='auto')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.25249576568603516, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012017965316772461, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.17330193519592285, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 29, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.xlabel('sample')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.030568361282348633, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 36, 32, 34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.017511844635009766, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 34, 31, 29, 35, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10455203056335449, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 31, 29, 35, 30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, alpha=0.5, density=True, label=\"histogram\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 35, 29, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11409306526184082, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(211)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11379075050354004, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11025619506835938, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(211)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.10216307640075684, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 29, 35, 34, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2779867649078369, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 30, 35, 29, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 32, 29, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.260178804397583, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 31, 32, 36, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01753711700439453, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.12772393226623535, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(211)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.26323699951171875, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01773810386657715, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 30, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10434794425964355, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=25, density=True, alpha=0.5, color='#00ff00')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.130357027053833, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 34, 30, 31, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.007848978042602539, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, density=True, histtype='step', label='Histogram')\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 32, 36, 35, 29, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample', fontsize=16)\n    stats.probplot(samples, dist=\"norm\", plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 33, 29, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.xlabel('samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.007864236831665039, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 32, 30, 29, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(211)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012684106826782227, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=50, density=True)\n    plt.grid(True)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.02100396156311035, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 34, 32, 31, 36, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(size=num_samples, loc=mu, scale=sigma)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 35, 33, 30, 31, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30)\n    plt.hist(samples, density=True, bins=50)\n    plt.xlabel('Sample')\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 30, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.08500814437866211, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 36, 29, 35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012911081314086914, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 30, 31, 34, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012629985809326172, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 32, 31, 33, 30, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11651492118835449, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 33, 36, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, density=True, histtype='step', label='Histogram')\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09097909927368164, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.23398280143737793, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(8, 4))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.275012731552124, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.03602910041809082, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 34, 33, 31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True, label=\"Histogram\")\n    plt.hist(samples, bins=100)\n    plt.xlabel('x')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.026387929916381836, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.263181209564209, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2768666744232178, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 33, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11849021911621094, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 34, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09795665740966797, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 36, 32, 34, 31, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2,1,1)\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10056090354919434, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 35, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11346602439880371, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 32, 31, 34, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50)\n    plt.xlabel('x')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.016038894653320312, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 35, 29, 36, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1893918514251709, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True, label='Histogram')\n    plt.title(r'Histogram of samples')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1670851707458496, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 35, 31, 30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True, label=\"Histogram\")\n    plt.title('Histogram')\n    plt.ylabel('Probability')\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34, 29, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014724016189575195, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 30, 36, 32, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 36, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 29, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10128474235534668, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig", "compilation_passed": true, "time": 0.12533187866210938, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 32, 34, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1367506980895996, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 34, 31, 29, 35, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10455203056335449, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 29, 34, 31, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011821985244750977, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 33, 36, 34, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=50, density=True)\n    plt.xlabel('$x$', fontsize=14)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.020160913467407227, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 31, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.15582895278930664, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 35, 29, 31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 31, 30, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(r'Histogram of samples')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0745391845703125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 35, 33, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.ylabel('Probability')\n    stats.probplot(samples, fit=True, plot=True)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.03345513343811035, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013123035430908203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01648092269897461, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 35, 33, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.grid(True)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 34, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09795665740966797, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 35, 32, 30, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample values')\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 31, 34, 32, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 29, 36, 31, 33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 23.247658014297485, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [33, 29, 34, 32, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.06739306449890137, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 34, 30, 31, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2,1,1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('samples')\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 29, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10128474235534668, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 34, 30, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True)\n    plt.hist(samples, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 35, 36, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.1080629825592041, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=50, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.02266407012939453, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 30, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013020992279052734, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10329914093017578, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27475810050964355, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('x')\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 30, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig", "compilation_passed": true, "time": 0.16670918464660645, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig", "compilation_passed": true, "time": 0.1259620189666748, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 31, 30, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True, label=\"Histogram\")\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.11231207847595215, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.19800710678100586, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 32, 31, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2779867649078369, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 29, 30, 34, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30)\n    plt.xlabel('$x$', fontsize=14)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013317108154296875, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 33, 36, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10536384582519531, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30, 35, 36, 29, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.017460107803344727, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.16463398933410645, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 30, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013020992279052734, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 31, 36, 30, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(size=num_samples, loc=mu, scale=sigma)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=100, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 33, 31, 34, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.xlabel('Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.016981840133666992, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 34, 33, 35, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, density=True, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.20726490020751953, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 31, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09751296043395996, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 29, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 35, 29, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013242959976196289, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20)\n    plt.xlabel('x')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.010728120803833008, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2270212173461914, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09581899642944336, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 32, 33, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2,1,1)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.07550477981567383, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 35, 29, 36, 30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.00821995735168457, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 32, 29, 31, 35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 35, 30, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09480905532836914, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 34, 29, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(211)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10914421081542969, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 36, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, alpha=0.5, density=True, label=\"histogram\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 35, 36, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10559487342834473, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 31, 36, 34, 33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.xlabel('Sample values')\n    stats.probplot(samples, plot=plt)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 30, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.12189412117004395, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 32, 35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(211)\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.xlabel('samples')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01385807991027832, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 31, 30, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09984898567199707, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 34, 30, 33, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=25, density=True, alpha=0.5, color='#00ff00')\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.12135720252990723, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 34, 32, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(121)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.grid(True)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.006487131118774414, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.31116437911987305, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 30, 31, 33, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01538705825805664, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 34, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09795665740966797, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 36, 33, 32, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2,1,1)\n    plt.hist(samples, bins=50, density=True)\n    plt.grid(True)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.015292167663574219, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 29, 30, 35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=50, density=True, label='Histogram')\n    plt.hist(samples, density=True, bins=50)\n    plt.title('Histogram')\n    stats.probplot(samples, fit=True, plot=True)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 30, 29, 31, 32, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, density=True, histtype='step', label='Histogram')\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10073208808898926, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 35, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('x')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013754129409790039, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 36, 34, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(2, 1, 1)\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.008837699890136719, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(121)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2642230987548828, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 31, 34, 36, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013017892837524414, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, density=True, color='red', label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1088559627532959, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 30, 31, 32, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.017086029052734375, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples, random_state=seed)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10030102729797363, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 33, 35, 34, 31, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.hist(samples, bins=30)\n    plt.title('Histogram')\n    plt.grid(True)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True, label='Histogram')\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 35, 34, 32, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 33, 36, 31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True)\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10564613342285156, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27475810050964355, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 30, 34, 35, 29, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.019778013229370117, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.23398280143737793, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 32, 29, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True)\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.009315013885498047, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 32, 30, 35, 36, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10068726539611816, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 34, 36, 31, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20)\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.18564295768737793, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 36, 35, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 35, 31, 30, 34, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.475355863571167, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 30, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11327004432678223, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 34, 36, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, bins=20)\n    plt.xlabel('samples')\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 29, 36, 31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.title('Histogram')\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11292004585266113, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 35, 33, 30, 32, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2270212173461914, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012018203735351562, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36, 33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(211)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=fig, dist=stats.norm(mu, sigma))\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36, 29, 30, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(121)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011913776397705078, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27158522605895996, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 34, 29, 33, 32, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=25, density=True, alpha=0.5, color='#00ff00')\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09496235847473145, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2738349437713623, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014194011688232422, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 34, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09795665740966797, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 34, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014059066772460938, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 31, 29, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20)\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.010550975799560547, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 31, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.012611150741577148, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 32, 33, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2,1,1)\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.xlabel('Sample', fontsize=16)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.010318756103515625, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.06590986251831055, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 29, 30, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('$x$', fontsize=14)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.475355863571167, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.18564295768737793, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 36, 32, 29, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.007158041000366211, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 33, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=25, density=True, alpha=0.5, color='#00ff00')\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1155540943145752, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 32, 30, 34, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, bins=20)\n    plt.xlabel('sample')\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 36, 35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, plot=plt)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 36, 33, 35, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(size=num_samples, loc=mu, scale=sigma)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=50, density=True, label='Histogram')\n    plt.hist(samples, bins=30)\n    plt.xlabel('Sample values')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.021521806716918945, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.2701990604400635, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 30, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 31, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample values')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011980056762695312, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.05001711845397949, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 34, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.xlabel('samples')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011626958847045898, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True, label=\"Histogram\")\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11598515510559082, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 33, 30, 31, 29, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20)\n    plt.xlabel('sample')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.010418891906738281, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 29, 34, 33, 31, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12,6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20)\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.009684085845947266, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31, 30, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09828782081604004, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 36, 34, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.title('Histogram')\n    stats.probplot(samples, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 34, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09795665740966797, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 32, 35, 36, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.title(r'Histogram of samples')\n    plt.ylabel('Probability')\n    stats.probplot(samples, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 32, 34, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.015377044677734375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 29, 33, 35, 30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.xlabel('Sample values')\n    stats.probplot(samples, plot=fig, dist=stats.norm(mu, sigma))\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 29, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 35, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014430761337280273, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 1.8849260807037354, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [31, 35, 30, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10145092010498047, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 30, 36, 34, 32, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.ylabel('Probability')\n    stats.probplot(samples, plot=fig, dist=stats.norm(mu, sigma))\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 34, 36, 31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, density=True, histtype='step', label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10716581344604492, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 33, 34, 32, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2,1,1)\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013570070266723633, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 32, 31, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True)\n    plt.hist(samples, density=True, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.13287091255187988, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplots_adjust(hspace=0.5)\n    plt.title(r'Histogram of samples')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.06842923164367676, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011616945266723633, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 29, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1575028896331787, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 34, 35, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.16463398933410645, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.2701990604400635, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2708878517150879, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 35, 36, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10559487342834473, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2779867649078369, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 30, 29, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, density=True, histtype='step', label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10183191299438477, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 35, 34, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample values')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012359142303466797, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 31, 34, 35, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample values')\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 31, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09728097915649414, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.259519100189209, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11094808578491211, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 35, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11346602439880371, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 35, 33, 31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.0667870044708252, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 32, 31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('x')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01150202751159668, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 32, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=50, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.15363001823425293, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31, 34, 36, 32, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 31, 35, 32, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.03175091743469238, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 31, 29, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins='auto')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09208202362060547, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 36, 35, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples, random_state=seed)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012971878051757812, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 30, 29, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.08523178100585938, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 34, 36, 29, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.xlabel('samples')\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.0066988468170166016, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 35, 36, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.1080629825592041, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2708878517150879, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 36, 34, 30, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01104426383972168, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 36, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.19058799743652344, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11571097373962402, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.35255908966064453, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 36, 32, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.title(r'Histogram of samples')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=25, density=True, alpha=0.5, color='#00ff00')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.1205899715423584, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.18408513069152832, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=fig, dist=stats.norm(mu, sigma))\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 31, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11474895477294922, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.08588695526123047, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33, 35, 29, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0067310333251953125, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 29, 30, 33, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12,6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, alpha=0.5, density=True, label=\"histogram\")\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014950752258300781, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 31, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0747981071472168, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 30, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 29, 30, 31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12,6))\n    plt.hist(samples, density=True, color='red', label='Histogram')\n    plt.hist(samples, bins=50, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1249690055847168, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 29, 32, 33, 35, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013725996017456055, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30, 33, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=100)\n    plt.xlabel('Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.04006218910217285, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 29, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, density=True, color='red', label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample', fontsize=16)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.015102863311767578, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 30, 29, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011680841445922852, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples, random_state=seed)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.015681982040405273, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36, 31, 34, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True, label='Histogram')\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 35, 32, 31, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig", "compilation_passed": true, "time": 0.013875007629394531, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 34, 35, 32, 33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.title(r'Histogram of samples')\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 31, 33, 35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100, density=True)\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.024485111236572266, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True, label=\"Histogram\")\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.015529155731201172, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 33, 34, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=25, density=True, alpha=0.5, color='#00ff00')\n    plt.hist(samples, bins=30)\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01691889762878418, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 29, 34, 31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.03582286834716797, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 31, 29, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(8, 4))\n    plt.subplot(1, 2, 1)\n    plt.title(r'Histogram of samples')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 35, 32, 36, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.259519100189209, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 35, 36, 34, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(8, 4))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01611185073852539, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09323906898498535, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True, label='Histogram')\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1720740795135498, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 34, 29, 30, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0684969425201416, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.ylabel('Probability')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.023328065872192383, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 31, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, density=True, histtype='step', label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 29, 33, 34, 30, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True, label='Histogram')\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.18323516845703125, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 34, 35, 29, 36, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True)\n    plt.title('Histogram')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.02598714828491211, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('samples')\n    stats.probplot(samples, dist=\"norm\", plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 30, 32, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.ylabel('Probability')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.024473905563354492, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 30, 35, 34, 33, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(size=num_samples, loc=mu, scale=sigma)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.xlabel('Sample', fontsize=16)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012094974517822266, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.04798388481140137, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 36, 34, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=50, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.13918304443359375, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 35, 30, 32, 29, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.11255693435668945, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 34, 32, 33, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.xlabel('Samples')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.02425217628479004, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20)\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.009836196899414062, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1238851547241211, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig", "compilation_passed": true, "time": 0.044921159744262695, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [35, 30, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 31, 35, 34, 29, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12,6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11327695846557617, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 35, 34, 30, 33, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.xlabel('Sample', fontsize=16)\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012855052947998047, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 29, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 34, 32, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0056018829345703125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012200117111206055, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 35, 33, 32, 34, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.xlabel('samples')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 30, 32, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=50, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.02095198631286621, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 32, 33, 34, 30, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.12772393226623535, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.05001711845397949, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 33, 30, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(size=num_samples, loc=mu, scale=sigma)\n    fig = plt.figure()\n    plt.hist(samples, bins=25, density=True, alpha=0.5, color='#00ff00')\n    plt.hist(samples, bins=50, density=True)\n    plt.ylabel('Probability')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.022015810012817383, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 33, 31, 35, 34, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(211)\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 31, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(8, 4))\n    plt.subplot(1, 2, 1)\n    plt.title(r'Histogram of samples')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 36, 31, 35, 34, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.07399916648864746, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 35, 29, 32, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09874916076660156, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.26651692390441895, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 30, 34, 35, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 29, 36, 30, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.xlabel('Sample')\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 32, 31, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.031199932098388672, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2779867649078369, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 31, 34, 30, 33, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10007333755493164, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10554718971252441, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 36, 31, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=50, density=True, label='Histogram')\n    plt.hist(samples, density=True, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig", "compilation_passed": true, "time": 0.16057085990905762, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013035058975219727, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 36, 34, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.00590968132019043, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.ylabel('Probability')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011494159698486328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 29, 30, 32, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30)\n    plt.hist(samples, density=True, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 32, 31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.022997140884399414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 35, 36, 29, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample', fontsize=16)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011667966842651367, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.ylabel('Probability')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.03271126747131348, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, density=True, histtype='step', label='Histogram')\n    plt.hist(samples, bins=50, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11582732200622559, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.05001711845397949, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 29, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.09549593925476074, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 36, 35, 32, 33, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, density=True, histtype='step', label='Histogram')\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.07010984420776367, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 29, 36, 32, 33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.007167816162109375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 30, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10434794425964355, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 29, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('x')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.010854005813598633, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 32, 30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011643171310424805, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.05001711845397949, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.12187910079956055, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 35, 33, 31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.06791210174560547, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 32, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(121)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09715008735656738, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 36, 30, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10434794425964355, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins='auto')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.25249576568603516, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 31, 36, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.07630109786987305, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 29, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20)\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 30, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2,1,1)\n    plt.hist(samples, bins=50, alpha=0.5, density=True, label=\"histogram\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11525583267211914, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09605693817138672, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.03582286834716797, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.35255908966064453, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.32082414627075195, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2708878517150879, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2779867649078369, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 30, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012289762496948242, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 34, 29, 36, 33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.xlabel('Sample values')\n    stats.probplot(samples, plot=fig, dist=stats.norm(mu, sigma))\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014893054962158203, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10993814468383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27994704246520996, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 29, 33, 30, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=50, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.1356029510498047, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31, 36, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.xlabel('samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.06835293769836426, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.15872716903686523, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 35, 32, 31, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32, 29, 31, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True, label='Histogram')\n    plt.title(r'Histogram of samples')\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.025693416595458984, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 35, 29, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 35, 31, 36, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.xlabel('Samples')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.007790803909301758, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 34, 29, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.grid(True)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.009733915328979492, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012017965316772461, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.ylabel('Probability')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.010256290435791016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 29, 33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.27650904655456543, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 35, 36, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10559487342834473, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 36, 32, 33, 35, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1154928207397461, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 32, 36, 29, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples, random_state=seed)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig", "compilation_passed": true, "time": 0.18714618682861328, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 36, 32, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, density=True, color='red', label='Histogram')\n    plt.hist(samples, bins=50, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.12085890769958496, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 29, 36, 33, 35, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 33, 32, 30, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100, density=True)\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.023952007293701172, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11658692359924316, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 36, 32, 30, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 31, 35, 29, 30, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11829686164855957, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 35, 34, 29, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, alpha=0.5, density=True, label=\"histogram\")\n    plt.xlabel('Sample')\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.045800209045410156, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32, 35, 30, 34, 36, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01702594757080078, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 32, 35, 30, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 29, 30, 35, 34, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09968304634094238, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 31, 32, 29, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=30)\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, plot=True)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 29, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01564788818359375, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.043890953063964844, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 33, 36, 35, 30, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure()\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=True)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 35, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.023680925369262695, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 34, 31, 30, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12,6))\n    plt.hist(samples, bins=25, density=True, alpha=0.5, color='#00ff00')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.ylabel('Probability')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.016577959060668945, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 36, 35, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.09363102912902832, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 35, 36, 34, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig", "compilation_passed": true, "time": 0.18307113647460938, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 35, 36, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.grid(True)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.007693767547607422, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(211)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.26323699951171875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 31, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.015005826950073242, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 30, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig", "compilation_passed": true, "time": 0.10501790046691895, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10999202728271484, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 29, 35, 36, 30, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, density=True, color='red', label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, alpha=0.5, density=True, label=\"histogram\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 36, 32, 34, 29, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 29, 34, 33, 30, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.xlabel('samples')\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig", "compilation_passed": true, "time": 0.008643865585327148, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.034136056900024414, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 35, 32, 30, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True, label=\"Histogram\")\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.09175682067871094, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34, 32, 29, 35, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(r'Histogram of samples')\n    plt.grid(True)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.006432056427001953, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 33, 32, 36, 29, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True, label='Histogram')\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.xlabel('x')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.030748844146728516, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.ylabel('Probability')\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.014201879501342773, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 30, 33, 31, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 29, 36, 32, 33, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013620853424072266, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 32, 31, 36, 35, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10331320762634277, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(211)\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1042330265045166, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True, label='Histogram')\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.22651886940002441, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 31, 30, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('samples')\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 31, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.ylabel('Probability')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011494159698486328, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, density=True, color='red', label='Histogram')\n    plt.hist(samples, bins=50, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.13158702850341797, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 34, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample')\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(211)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.26323699951171875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 31, 36, 29, 32, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig", "compilation_passed": true, "time": 0.01322484016418457, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 35, 33, 34, 31, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0906209945678711, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 36, 34, 31, 32, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.xlabel('Sample')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 30, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09647607803344727, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 30, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 32, 35, 31, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.grid(True)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.010530710220336914, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 34, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0263521671295166, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 36, 29, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=25, density=True, alpha=0.5, color='#00ff00')\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.02034306526184082, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 36, 35, 29, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.hist(samples, bins=100, density=True)\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.029812097549438477, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 29, 31, 36, 34, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1877741813659668, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 36, 32, 35, 33, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 36, 33, 32, 30, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 34, 32, 33, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.xlabel('$x$', fontsize=14)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014133930206298828, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample', fontsize=16)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014106035232543945, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 34, 32, 31, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, density=True, color='red', label='Histogram')\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 31, 30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.xlabel('Sample values')\n    stats.probplot(samples, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=fig, dist=stats.norm(mu, sigma))\n    return fig", "compilation_passed": true, "time": 0.04409599304199219, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32, 29, 35, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1408240795135498, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.19886088371276855, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 30, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.07341480255126953, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 31, 33, 36, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 33, 31, 34, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 36, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(121)\n    plt.hist(samples, bins=30)\n    plt.grid(True)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01284027099609375, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31, 30, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09828782081604004, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 30, 35, 29, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.xlabel('sample')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014999866485595703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 35, 32, 31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(121)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(211)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1042029857635498, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 31, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample values')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011980056762695312, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(211)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11379075050354004, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27475810050964355, "tests_passed": true, "error": null}}
{"selected_lines": [31, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09791707992553711, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 34, 30, 31, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20)\n    plt.xlabel('sample')\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 35, 30, 31, 29, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 29, 34, 35, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.03345513343811035, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 29, 30, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09627580642700195, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2,1,1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2690849304199219, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.03539299964904785, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 30, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(211)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013057947158813477, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12,6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 32, 34, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Samples')\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2708878517150879, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.26891088485717773, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 34, 36, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.16357827186584473, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 35, 29, 36, 32, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(size=num_samples, loc=mu, scale=sigma)\n    fig = plt.figure()\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 35, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.19440388679504395, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2708878517150879, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 30, 32, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 30, 31, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09818482398986816, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 36, 33, 32, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2,1,1)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.015726089477539062, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 33, 34, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 35, 29, 33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, density=True, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 34, 36, 31, 30, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, plot=fig, dist=stats.norm(mu, sigma))\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 33, 31, 32, 34, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09278416633605957, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 29, 31, 34, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 30, 33, 36, 29, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10591602325439453, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 34, 32, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2,1,1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.xlabel('samples')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012122869491577148, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 34, 29, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.ylabel('Probability')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.006103038787841797, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 33, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11849021911621094, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.53407883644104, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.09874391555786133, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.017460107803344727, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 34, 36, 31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, density=True, histtype='step', label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10716581344604492, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 33, 30, 31, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(8, 4))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 32, 35, 34, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.title('Histogram')\n    plt.xlabel('sample')\n    stats.probplot(samples, plot=fig, dist=stats.norm(mu, sigma))\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.3261239528656006, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34, 32, 35, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.12375807762145996, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 33, 30, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.12790608406066895, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 29, 32, 34, 30, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples, random_state=seed)\n    fig = plt.figure()\n    plt.hist(samples, bins=50, density=True, label='Histogram')\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1497972011566162, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 36, 34, 31, 29, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013744115829467773, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 29, 34, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.xlabel('Sample', fontsize=16)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 32, 35, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.xlabel('Samples')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011341094970703125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 35, 33, 34, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, density=True, histtype='step', label='Histogram')\n    plt.hist(samples, bins=30)\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 34, 36, 29, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.10116910934448242, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.07224798202514648, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.47333788871765137, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 32, 35, 33, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.grid(True)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013650178909301758, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1827700138092041, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 35, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1047821044921875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 36, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig", "compilation_passed": true, "time": 0.10251283645629883, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 29, 33, 36, 30, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(size=num_samples, loc=mu, scale=sigma)\n    fig = plt.figure(figsize=(12, 8))\n    plt.hist(samples, bins=100, density=True, label='Histogram')\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 36, 29, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(size=num_samples, loc=mu, scale=sigma)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=fig, dist=stats.norm(mu, sigma))\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 35, 31, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.09973978996276855, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1240391731262207, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(211)\n    plt.hist(samples, density=True, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34, 30, 31, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(8, 4))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, alpha=0.5, density=True, label=\"histogram\")\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.015869855880737305, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31, 35, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12,6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0867149829864502, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 34, 29, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample values')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011632204055786133, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 31, 29, 30, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.grid(True)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011797904968261719, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample', fontsize=16)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.03684282302856445, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 32, 35, 33, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.grid(True)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013650178909301758, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 36, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(size=num_samples, loc=mu, scale=sigma)\n    fig = plt.figure()\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10011911392211914, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0444331169128418, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [32, 34, 36, 30, 33, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True, label='Histogram')\n    plt.hist(samples, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1654040813446045, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.018629074096679688, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True, label='Histogram')\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.18717098236083984, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 35, 36, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.1080629825592041, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 31, 36, 32, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(211)\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.xlabel('Sample', fontsize=16)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01318502426147461, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 35, 33, 30, 31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.00603485107421875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 36, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=fig, dist=stats.norm(mu, sigma))\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 29, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplots_adjust(hspace=0.5)\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.005604982376098633, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 30, 32, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.ylabel('Probability')\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 36, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, density=True, histtype='step', label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11286306381225586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31, 36, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True, label=\"Histogram\")\n    plt.hist(samples, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 34, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09795665740966797, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.04798388481140137, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2738349437713623, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 35, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=25, density=True, alpha=0.5, color='#00ff00')\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig", "compilation_passed": true, "time": 0.12163305282592773, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.xlabel('samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014250993728637695, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 33, 34, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014462947845458984, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 31, 35, 32, 34, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 29, 32, 35, 33, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(121)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.title('Histogram')\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 30, 36, 29, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 31, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09751296043395996, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12,6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2640821933746338, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 32, 34, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(121)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014101028442382812, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.xlabel('sample')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.010944843292236328, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 32, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.019377946853637695, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins='auto')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10152029991149902, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20)\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 31, 34, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=100)\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.02904486656188965, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 33, 30, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.title(r'Histogram of samples')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10689425468444824, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 35, 36, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.1080629825592041, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 29, 30, 31, 32, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2,1,1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 29, 34, 33, 31, 36, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.xlabel('Samples')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.007880210876464844, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.title(r'Histogram of samples')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.06951403617858887, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.275012731552124, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 29, 31, 32, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 32, 30, 29, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012138843536376953, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 31, 35, 29, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('x')\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig", "compilation_passed": true, "time": 0.015882015228271484, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011616945266723633, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 30, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11902689933776855, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.23876094818115234, "tests_passed": true, "error": null}}
{"selected_lines": [35, 30, 32, 36, 31, 29, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Samples')\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig", "compilation_passed": true, "time": 0.0142059326171875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 31, 34, 30, 33, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10007333755493164, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 32, 36, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(r'Histogram of samples')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0720219612121582, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2708878517150879, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 34, 36, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(size=num_samples, loc=mu, scale=sigma)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.xlabel('samples')\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.012250900268554688, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27475810050964355, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.19221186637878418, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.33502793312072754, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.xlabel('Sample')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.016802072525024414, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 33, 31, 36, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12,6))\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 34, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 29, 31, 30, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(211)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01237797737121582, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 34, 31, 35, 29, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(size=num_samples, loc=mu, scale=sigma)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.title('Histogram')\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 36, 32, 35, 34, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.hist(samples, bins=100, density=True, label='Histogram')\n    plt.hist(samples, bins=50)\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.03301215171813965, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.15681195259094238, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 30, 29, 33, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(211)\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09149599075317383, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 35, 30, 36, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012814044952392578, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 31, 35, 29, 36, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012687921524047852, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10210895538330078, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 36, 34, 35, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(8, 4))\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.ylabel('Probability')\n    stats.probplot(samples, plot=fig, dist=stats.norm(mu, sigma))\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2,1,1)\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10235786437988281, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.title('Histogram')\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.006896018981933594, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 31, 34, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.12987017631530762, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 34, 35, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013549089431762695, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.006551027297973633, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 31, 32, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins='auto')\n    plt.xlabel('x')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.010859012603759766, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 34, 33, 35, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 30, 35, 36, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.1080629825592041, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.ylabel('Probability')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.03271126747131348, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 32, 33, 34, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.02009105682373047, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 31, 35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.grid(True)\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012017965316772461, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 32, 36, 29, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.16463398933410645, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.23398280143737793, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.26111412048339844, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 30, 32, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(2,1,1)\n    plt.title(r'Histogram of samples')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.07599306106567383, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 33, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.16839122772216797, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 34, 29, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 33, 35, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.08639216423034668, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.17723584175109863, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 31, 34, 30, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1945500373840332, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 29, 34, 30, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, density=True, histtype='step', label='Histogram')\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10147809982299805, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 32, 31, 36, 35, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10331320762634277, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 35, 36, 34, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=50, density=True, label='Histogram')\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10170125961303711, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 35, 32, 36, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True)\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.xlabel('Sample', fontsize=16)\n    stats.probplot(samples, dist=\"norm\", plot=fig)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.04798388481140137, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [29, 33, 31, 36, 35, 34, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2,1,1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27898478507995605, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 29, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.08770298957824707, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 29, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=25, density=True, alpha=0.5, color='#00ff00')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.33600902557373047, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 35, 33, 31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.06791210174560547, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 34, 33, 30, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.title('Histogram')\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2708878517150879, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 34, 30, 31, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 31, 30, 36, 33, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, density=True, color='red', label='Histogram')\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10774612426757812, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 33, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.11724495887756348, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 29, 36, 31, 30, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 29, 30, 35, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig", "compilation_passed": true, "time": 0.1111302375793457, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.05001711845397949, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.47333788871765137, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 32, 30, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012943029403686523, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012018203735351562, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 30, 32, 29, 33, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(2, 1, 1)\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 35, 30, 36, 31, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1607961654663086, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 29, 32, 30, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.1558070182800293, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.3132591247558594, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.23398280143737793, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.263181209564209, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 33, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2,1,1)\n    plt.hist(samples, bins=50, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 33, 30, 36, 34, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.hist(samples, bins=50, density=True)\n    plt.xlabel('sample')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 29, 30, 35, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.grid(True)\n    stats.probplot(samples, dist=\"norm\", plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 31, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, density=True, histtype='step', label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 31, 30, 29, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0886380672454834, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31, 29, 35, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20)\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01051020622253418, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 31, 36, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, alpha=0.5, density=True, label=\"histogram\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.12193417549133301, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.29412198066711426, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 30, 36, 35, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10787725448608398, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 35, 29, 34, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('samples')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.030011892318725586, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2779867649078369, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 34, 29, 32, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01812887191772461, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 30, 31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 31, 34, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20)\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.009886026382446289, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 36, 29, 32, 33, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.xlabel('samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011512041091918945, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.08741354942321777, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31, 30, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09828782081604004, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 29, 30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, density=True, color='red', label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01438593864440918, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 30, 36, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True)\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.009132146835327148, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.12065887451171875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 30, 36, 32, 35, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure()\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.ylabel('Probability')\n    stats.probplot(samples, plot=plt)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins='auto')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09853792190551758, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12,6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2640821933746338, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 30, 35, 34, 29, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.hist(samples, bins=20)\n    plt.ylabel('Probability')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014497041702270508, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.26891088485717773, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.47333788871765137, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 33, 36, 35, 30, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 29, 30, 34, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.015380859375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 31, 30, 36, 32, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(211)\n    plt.hist(samples, bins=50, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 33, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 33, 29, 32, 30, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=50, density=True, label='Histogram')\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.21430683135986328, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 34, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09795665740966797, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.title('Histogram')\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 36, 33, 30, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10123515129089355, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 31, 33, 34, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12,6))\n    plt.subplot(211)\n    plt.hist(samples, bins=100)\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.025678157806396484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.5469739437103271, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.03452324867248535, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.06834888458251953, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 30, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30)\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1363067626953125, "tests_passed": true, "error": null}}
{"selected_lines": [29, 30, 35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 30, 29, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013759136199951172, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 31, 35, 33, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, bins=100, density=True)\n    plt.xlabel('$x$', fontsize=14)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.024461030960083008, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33, 36, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0911562442779541, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 29, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2,1,1)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.07051491737365723, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11107182502746582, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 34, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(211)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.017866134643554688, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 34, 33, 29, 31, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=50, density=True, label='Histogram')\n    plt.hist(samples, density=True, bins=20)\n    plt.xlabel('x')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.018802165985107422, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012017965316772461, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 31, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample values')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011980056762695312, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 32, 34, 29, 33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=20)\n    plt.xlabel('Samples')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.015957117080688477, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 35, 34, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins='auto')\n    plt.grid(True)\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 34, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09795665740966797, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1009211540222168, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 33, 35, 36, 32, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.xlabel('x')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.007525920867919922, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1238851547241211, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.045800209045410156, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [33, 35, 36, 31, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.1683039665222168, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 35, 32, 30, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 25.10228705406189, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 29, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1575028896331787, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.2701990604400635, "tests_passed": true, "error": null}}
{"selected_lines": [30, 34, 29, 33, 36, 31, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins='auto')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0444331169128418, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [30, 31, 35, 36, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10559487342834473, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 30, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.06925296783447266, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.03452324867248535, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 32, 33, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True)\n    plt.title(r'Histogram of samples')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 32, 29, 36, 30, 34, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True, label=\"Histogram\")\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.xlabel('sample')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014368057250976562, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 32, 29, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=50, density=True, label='Histogram')\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.15607404708862305, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 30, 35, 29, 32, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(8, 4))\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=50, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36, 32, 29, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=100, density=True)\n    plt.xlabel('sample')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.04132413864135742, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2738349437713623, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 29, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True, label=\"Histogram\")\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 32, 33, 34, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, density=True)\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01540994644165039, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 33, 31, 36, 35, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.10227108001708984, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.31116437911987305, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 32, 34, 33, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=30)\n    plt.ylabel('Probability')\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.23398280143737793, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 34, 35, 29, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(8, 4))\n    plt.subplot(121)\n    plt.hist(samples, bins=100)\n    plt.xlabel('Sample')\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 31, 32, 33, 30, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.12103128433227539, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10443902015686035, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 36, 35, 30, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013746976852416992, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 32, 31, 33, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30)\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 30, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, density=True, color='red', label='Histogram')\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11247086524963379, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 35, 32, 31, 34, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12,6))\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.xlabel('sample')\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.011733055114746094, "tests_passed": true, "error": null}}
{"selected_lines": [34, 29, 30, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014190912246704102, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 31, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 31, 36, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples, random_state=seed)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 29, 33, 32, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.026334047317504883, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 31, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.15582895278930664, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2595710754394531, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 32, 36, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=25, density=True, alpha=0.5, color='#00ff00')\n    plt.hist(samples, bins=50, density=True)\n    plt.xlabel('sample')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.020424842834472656, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 32, 33, 35, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig", "compilation_passed": true, "time": 0.20331287384033203, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample', fontsize=16)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.03684282302856445, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.015045166015625, "tests_passed": true, "error": null}}
{"selected_lines": [32, 30, 31, 35, 36, 33, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.16477632522583008, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 32, 31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.022997140884399414, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 32, 31, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 1.8849260807037354, "tests_passed": false, "error": "TimeoutError"}}
{"selected_lines": [31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012017965316772461, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 35, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.xlabel('x')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0175931453704834, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 32, 33, 29, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, bins=100)\n    plt.xlabel('Sample')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.04128098487854004, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 31, 30, 29, 33, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=20)\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.028006792068481445, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 30, 36, 33, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True)\n    plt.title('Histogram')\n    plt.xlabel('Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.025561809539794922, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 30, 32, 33, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 35, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(8, 4))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09572577476501465, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 36, 32, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2708878517150879, "tests_passed": true, "error": null}}
{"selected_lines": [32, 31, 34, 33, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.ylabel('Probability')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.006564140319824219, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 35, 32, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True)\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11452078819274902, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(size=num_samples, loc=mu, scale=sigma)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01779913902282715, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 35, 30, 33, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title(r'Histogram of samples')\n    plt.xlabel('Samples')\n    stats.probplot(samples, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 36, 31, 34, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.16820931434631348, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.00734400749206543, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 33, 34, 30, 29, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title(r'Histogram of samples')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.07066702842712402, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, density=True, color='red', label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1089322566986084, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 32, 33, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=True)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 36, 35, 33, 31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.06791210174560547, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36, 34, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True, label=\"Histogram\")\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.11910128593444824, "tests_passed": true, "error": null}}
{"selected_lines": [31, 33, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.12772393226623535, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.26651692390441895, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(8, 4))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2748100757598877, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 36, 32, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.hist(samples, bins=int(np.sqrt(num_samples)))\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11807084083557129, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 35, 33, 30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10922598838806152, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2738349437713623, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.06853985786437988, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [29, 32, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.12187910079956055, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50)\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.016190052032470703, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 32, 34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=50, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 33, 35, 29, 32, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 30, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, density=True, histtype='step', label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013103961944580078, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(size=num_samples, loc=mu, scale=sigma)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2614898681640625, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 30, 32, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 32, 35, 31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True, label='Histogram')\n    plt.hist(samples, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.21277809143066406, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.014812231063842773, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True, label=\"Histogram\")\n    plt.title(r'Histogram of samples')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 33, 32, 36, 30, 35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.xlabel('$x$', fontsize=14)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.010111093521118164, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 31, 34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig", "compilation_passed": true, "time": 0.014421939849853516, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.19728899002075195, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample values')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014698982238769531, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 29, 31, 34, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('$x$', fontsize=14)\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 36, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, density=True, histtype='step', label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11286306381225586, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1827700138092041, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 30, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample values')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012212991714477539, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 33, 30, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, bins=50, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1161658763885498, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27475810050964355, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 34, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True, label=\"Histogram\")\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('x')\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.018066883087158203, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.09238314628601074, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 32, 35, 30, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, density=True, histtype='step', label='Histogram')\n    plt.hist(samples, density=True, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 35, 31, 30, 36, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 36, 31, 34, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.16820931434631348, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.26651692390441895, "tests_passed": true, "error": null}}
{"selected_lines": [29, 32, 31, 30, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09828782081604004, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 35, 36, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.1080629825592041, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 35, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1263720989227295, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 31, 33, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=25, density=True, alpha=0.5, color='#00ff00')\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.14647507667541504, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 33, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=50, alpha=0.5, density=True, label=\"histogram\")\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.023696184158325195, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.23398280143737793, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 35, 30, 33, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, density=True)\n    plt.hist(samples, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.20679306983947754, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 29, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 29, 32, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, density=True, color='red', label='Histogram')\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10921621322631836, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 33, 29, 30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012267112731933594, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 35, 29, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12,6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014163017272949219, "tests_passed": true, "error": null}}
{"selected_lines": [35, 29, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013099908828735352, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.17723584175109863, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.3132591247558594, "tests_passed": true, "error": null}}
{"selected_lines": [29, 36, 31, 30, 33, 32, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.016988039016723633, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 29, 35, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.07352280616760254, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 33, 32, 30, 36, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(size=num_samples, loc=mu, scale=sigma)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, density=True)\n    plt.xlabel('sample')\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 31, 30, 29, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=fig, dist=stats.norm(mu, sigma))\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.013676881790161133, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35, 29, 30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013386249542236328, "tests_passed": true, "error": null}}
{"selected_lines": [34, 30, 29, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01233983039855957, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 31, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09751296043395996, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31, 30, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10098004341125488, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 36, 32, 30, 35, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(211)\n    plt.hist(samples, bins=20)\n    plt.xlabel('Samples')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.010609149932861328, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 33, 31, 35, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11104178428649902, "tests_passed": true, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2595710754394531, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 31, 33, 32, 34, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.xlabel('Sample values')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.015316009521484375, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 32, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True, label='Histogram')\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.1649031639099121, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27994704246520996, "tests_passed": true, "error": null}}
{"selected_lines": [33, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11292004585266113, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 29, 34, 30, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title(r'Histogram of samples')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, rk=1)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 34, 30, 33, 31, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples, random_state=seed)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.xlabel('Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011616945266723633, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.034136056900024414, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.35255908966064453, "tests_passed": true, "error": null}}
{"selected_lines": [35, 36, 33, 34, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20)\n    plt.xlabel('Sample')\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 34, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09795665740966797, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09755206108093262, "tests_passed": true, "error": null}}
{"selected_lines": [31, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(8, 4))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10055708885192871, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 34, 32, 31, 30, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(121)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12,6))\n    plt.subplots_adjust(hspace=0.5)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10697197914123535, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2811861038208008, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 33, 32, 31, 29, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100, density=True)\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.024318933486938477, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 30, 32, 29, 36, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, density=True, color='red', label='Histogram')\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.015166044235229492, "tests_passed": true, "error": null}}
{"selected_lines": [31, 29, 30, 35, 34, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09968304634094238, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 35, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=fig)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 35, 36, 30, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, plot=plt, dist='norm')\n    return fig", "compilation_passed": true, "time": 0.017500877380371094, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 33, 29, 31, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=fig, dist=stats.norm(mu, sigma))\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 32, 34, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True, label=\"Histogram\")\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.axvline(mu, color='r', label='Mean')\n    stats.probplot(samples, plot=plt, dist=stats.norm)\n    return fig", "compilation_passed": true, "time": 0.017236948013305664, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 29, 30, 36, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.title(r'Histogram of samples')\n    plt.title('Histogram')\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.006537914276123047, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 36, 33, 32, 30, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.title(f\"Histogram with {num_samples} samples\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09304690361022949, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 29, 36, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, density=True, histtype='step', label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014334440231323242, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2779867649078369, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 29, 31, 34, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, bins=100, density=True)\n    plt.xlabel('x')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.04684090614318848, "tests_passed": true, "error": null}}
{"selected_lines": [29, 35, 34, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09795665740966797, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.014019966125488281, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013725996017456055, "tests_passed": true, "error": null}}
{"selected_lines": [30, 36, 35, 31, 34, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig<|endoftext|># coding: utf-8", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10384106636047363, "tests_passed": true, "error": null}}
{"selected_lines": [30, 35, 31, 32, 34, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.19664907455444336, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 36, 31, 35, 33, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10141515731811523, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 34, 36, 30, 33, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=100, density=True, label='Histogram')\n    plt.hist(samples, density=True)\n    plt.xlabel('x')\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31, 34, 30, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.xlabel('Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.018690109252929688, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 30, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True, label=\"Histogram\")\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11481690406799316, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 31, 29, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('$x$', fontsize=14)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013412952423095703, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 36, 35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, label='Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 30, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=None, plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 29, 31, 34, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(8, 4))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011464118957519531, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 30, 36, 35, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.xlabel('sample')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.023246049880981445, "tests_passed": true, "error": null}}
{"selected_lines": [33, 35, 36, 30, 32, 29, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.xlabel('sample')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01572108268737793, "tests_passed": true, "error": null}}
{"selected_lines": [31, 36, 30, 33, 29, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12,6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.275012731552124, "tests_passed": true, "error": null}}
{"selected_lines": [36, 30, 35, 33, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=20)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples, random_state=seed)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.ylabel('Probability')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01244807243347168, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 31, 35, 29, 30, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.xlabel('sample')\n    stats.probplot(samples, dist=\"norm\", plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 33, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.hist(samples, density=True, bins=30, label=\"Histogram\", alpha=0.6)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.12352490425109863, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30, 36, 34, 31, 35, 29, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013868093490600586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 35, 33, 31, 30, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(211)\n    plt.hist(samples, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample', fontsize=16)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012547016143798828, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 36, 29, 31, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(2,1,1)\n    plt.hist(samples, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0781700611114502, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 32, 36, 33, 30, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30)\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.011750936508178711, "tests_passed": true, "error": null}}
{"selected_lines": [31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 8))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.275012731552124, "tests_passed": true, "error": null}}
{"selected_lines": [30, 33, 34, 36, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.xlabel('sample')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2708878517150879, "tests_passed": true, "error": null}}
{"selected_lines": [31, 34, 35, 30, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm(mu, sigma), plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10074496269226074, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 31, 32, 33, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=50, density=True, label='Histogram')\n    plt.hist(samples, density=True, bins=50)\n    plt.xlabel('samples')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.024156808853149414, "tests_passed": true, "error": null}}
{"selected_lines": [33, 30, 34, 32, 31, 35, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(size=num_samples, loc=mu, scale=sigma)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.xlabel('$x$', fontsize=14)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.006573915481567383, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [36, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, density=True, color='green', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig<|endoftext|>from typing import List", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.2738349437713623, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 34, 35, 31, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('samples')\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 31, 36, 32, 35, 29, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12,6))\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.020101070404052734, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 30, 33, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.12562322616577148, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.47333788871765137, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 36, 33, 30, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10426068305969238, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 36, 35, 34, 32, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(8, 4))\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample', fontsize=16)\n    stats.probplot(samples, plot=fig, dist=stats.norm(mu, sigma))\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 36, 34, 29, 31, 33, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True, label=\"Histogram\")\n    plt.hist(samples, density=True, bins=20)\n    plt.xlabel('x')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig<|endoftext|>from math import pi, sin, cos", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 29, 35, 31, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample', fontsize=16)\n    stats.probplot(samples, plot=plt, dist=\"norm\", stats=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 31, 30, 29, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 30, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=stats.norm, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 35, 31, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=int(len(samples) ** 0.5), density=True, color='g', alpha=0.5)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.10763978958129883, "tests_passed": true, "error": null}}
{"selected_lines": [30, 29, 36, 34, 35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.title(r'$\\mu = $ {}, $\\sigma^2 = {}$'.format(mu, sigma**2))\n    plt.xlabel('Sample', fontsize=16)\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig<|endoftext|>from mpl_toolkits.mplot3d import Axes3D", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.034136056900024414, "tests_passed": true, "error": null}}
{"selected_lines": [29, 34, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=50, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, plot=fig, dist=stats.norm(mu, sigma))\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27242612838745117, "tests_passed": true, "error": null}}
{"selected_lines": [29, 33, 36, 30, 34, 35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, density=True, bins=20, color='black')\n    plt.xlabel('Samples')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.01701188087463379, "tests_passed": true, "error": null}}
{"selected_lines": [36, 31, 30, 33, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.07217621803283691, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title('Histogram')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.05001711845397949, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('x')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.03803896903991699, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.025714874267578125, "tests_passed": true, "error": null}}
{"selected_lines": [34, 31, 30, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.015509843826293945, "tests_passed": true, "error": null}}
{"selected_lines": [32, 29, 35, 30, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.12238407135009766, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 31, 30, 33, 29, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=50, alpha=0.5, density=True, label=\"histogram\")\n    plt.title('Histogram')\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.01697993278503418, "tests_passed": true, "error": null}}
{"selected_lines": [32, 36, 31, 34, 30, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12,6))\n    plt.hist(samples, bins=100, alpha=0.5, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.title(\"Histogram of the samples\")\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.029941082000732422, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 34, 32, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.27475810050964355, "tests_passed": true, "error": null}}
{"selected_lines": [31, 30, 34, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.013136863708496094, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 30, 33, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=50, alpha=0.5, density=True, label=\"histogram\")\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.11933302879333496, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 35, 34, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('x')\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012140989303588867, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 33, 31, 32, 35, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(2,1,1)\n    plt.hist(samples, bins=30)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10172486305236816, "tests_passed": true, "error": null}}
{"selected_lines": [29, 31, 34, 36, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100, density=True)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.16357827186584473, "tests_passed": true, "error": null}}
{"selected_lines": [30, 32, 33, 29, 31, 35], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, edgecolor='black')\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 33, 30, 31, 34, 36], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.006752729415893555, "tests_passed": true, "error": null}}
{"selected_lines": [36, 29, 35, 34, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('Sample values')\n    stats.probplot(samples, plot=fig, dist=stats.norm(mu, sigma))\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.3576819896697998, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins='auto')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10631775856018066, "tests_passed": true, "error": null}}
{"selected_lines": [35, 31, 32, 36, 30, 29, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n    fig = plt.figure()\n    plt.hist(samples, bins=30)\n    plt.title('Histogram')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1011347770690918, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.03345513343811035, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 30, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.1687788963317871, "tests_passed": true, "error": null}}
{"selected_lines": [33, 29, 34, 32, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=100)\n    plt.title('Histogram of Samples')\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.06739306449890137, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 31, 34, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=20, density=True, label=\"Histogram\")\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('sample')\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=100)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.17014598846435547, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, density=True, bins=50)\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist=\"norm\", plot=plt)\n    return fig", "compilation_passed": true, "time": 0.33502793312072754, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 34], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=20, density=True, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.grid(True)\n    stats.probplot(samples, plot=plt, fit=True)\n    return fig", "compilation_passed": true, "time": 0.017534971237182617, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 35, 30], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.xlabel('x')\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.012847185134887695, "tests_passed": true, "error": null}}
{"selected_lines": [30, 31, 35, 36, 29], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt)\n    return fig", "compilation_passed": true, "time": 0.10559487342834473, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure(figsize=(12, 6))\n    plt.hist(samples, bins=30, density=True, alpha=0.6, label='Histogram')\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, dist='norm', plot=plt, fit=False)\n    return fig", "compilation_passed": true, "time": 0.13273119926452637, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 33, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.title('Histogram')\n    plt.xlabel('Sample', fontsize=16)\n    stats.probplot(samples, fit=True, plot=True)\n    return fig", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [29, 35, 34, 36, 31], "result": {"code": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(mu, sigma, num_samples=1000, seed=77):\n    \"\"\"\n    Generate a normal distribution with the given mean and standard deviation. \n    Creates a figure containing a histogram and a Q-Q plot of the generated samples.\n\n    Parameters:\n    mu (float): The mean of the normal distribution.\n    sigma (float): The standard deviation of the normal distribution.\n    num_samples (int, Optional): The number of samples to generate. Default is 1000.\n    seed (int, Optional): The seed for the random number generator. Default is 77.\n\n    Returns:\n    matplotlib.figure.Figure: A matplotlib figure containing the histogram and Q-Q plot.\n\n    Requirements:\n    - numpy for generating the samples.\n    - matplotlib.pyplot for plotting.\n    - scipy.stats for the Q-Q plot.\n\n    Example:\n    >>> fig = task_func(0, 1)\n    >>> type(fig)\n    <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.subplot(1, 2, 1)\n    plt.hist(samples, bins=30, density=True, alpha=0.6, color='g')\n    plt.subplot(1, 2, 2)\n    stats.probplot(samples, plot=plt)\n    return fig", "compilation_passed": true, "time": 0.09795665740966797, "tests_passed": true, "error": null}}
